{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Evolview Introduction Tree upload To start using the Evolview you just have to click the \"Try me\" button on the window or login if you have a user account with Evolview. Evolview supports two kinds of tree upload operations Drag and drop tree file, Upload tree using upload button. Both the upload option requires the user to provide with some details like project name ,tree name for easy management purposes. Project: [new_project] - [Auto generated when using drag and drop option]. Name: [new_tree] - provide tree file name [Auto detected when using drag and drop option]. Type: [select tree format] - [Auto detected when using drag and drop option]. Supported tree Formats Supported input formats newick/ phylip nhx nexus phyloXML (partial; embedded annotations will not be parsed by EvolView for now) Visulization styles Evolview supports the visualisation of phylogenetic trees as phylograms and cladograms, each in either rectangular or circular layout.On top of this, Evolview supports two additional visualisation styles that will make trees stylish. User Access EvolView is free for all users; all functionalities, except those require a connection to remote MySQL servers, are available to non-registered users. However there are many benefits for registered users (registration is free); with an account, you can: save your trees and datasets on our MySQL server, save your all customizations, including zoom in and out of your tree, the positions of your tree on the canvas and many others on user MySQL server, access your trees and datasets from any computer with internet connection, and many more ... No registration If you're not interested in creating a new account, just click the \"Try me\" Option: Please note: You DON'T need an account to use EvolView, it's free for all users; all functionalities, except those require a connection to remote MySQL servers, are available to non-registered users. Since Aug 2013, the data entered / uploaded by temporary users will also saved on our server; a unique token will be automatically assigned to current user and saved in browser cookie. During the period that this token is valid (usually a week), a temporary user can access the data as long as he / she does not clear browser history. If the temporary user creates a new account and becomes a registered user, he / she will be asked to transfer the data to this newly created account. With user account To sign up, click the \"Sign up\" button on the top of the \"login\" page: Then fill the form in the login/register page and click \"Create my account\"; all fields with \"*\" are mandatory If there is no errors occurred during the registration, a dialogbox will popup and inform the user that the new account is ready!! What if the password I choose is the same for my Gmail or even my bank account? Please note that for security and privacy reasons, we would never save the original password string you entered on our server; instead, only an encrypted version is kept (see below). With Social login With OAuth, you can login with your existing accounts such as Gmail, Facebook, Windows Live, LinkedIn and many others. To do this, simply click one of the following icons in the Login page: On clicking the social login option from login page, the user is redirected to the below looking page: Click the \"Windows live\" icon, for example, you will be redirected to https://login.live.com . After signing in with your existing \"Live\" account.You will be redirected back to EvolView and login automatically. If you do this for the first time, EvolView will create a new account for you. Your existing data (if there is any) will be then loaded. For more information about OAuth, an open standard for authorisation, see here User interface Overview The user interface is divided into three parts: The top part consisting the Evolview logo,Project /tree navigation, quick controls like login/logout, citation and help page links. The middle part consisting of icon controls for the tree and dataset visualization. The bottem part with the display canvas Evolview logo: On click takes user to the canvas view of the webpage. Evolview : On click takes user to usage statistics page. Project navigation : Project dropdown list with inbuilt search option. Tree navigation : Tree dropdown list with inbuilt search option. Edit toolbar: Provides users for quick tree editing options. The edit toolbar has grouped the buttons into various groups based on button functions. Advanced toolbar: Provides users with some advanced tree edit actions like swapping tree rotation angles, show/hide control panel, delete tree . Import toolbar: Provides users with all file import related actions. Export toolbar: Provides users with image and data export options. Control panel: Dataset control panel. Edit tree Project management Project Management is part of Section 4 of the User interface. It provides control over your project data and show overall view of the sharing status. User can View all the project and trees, Download any project fully along with tree and annotation datasets, View the sharing status and control the sharing link information To access the project management, select the projects icon from the right corner of the webpage as displayed. The project management page displayed as below: Search project,trees From Evolview version 4, we support project and tree search directly from navigation area. This provides an quick access even while working on diffrent project or tree. Annotations The current version Evolview supports totally twenty annotation types, including one which was newly added. The most popular ones included leaf label background color, group label, color strips and color shapes, leaf colors and heatmap lots. In general, these annotation types can be categorized into the following subcategories according to their intended functions: leaf styling and annotation, branch styling and annotation and display of additional annotations. Branch styling and annotations This category includes eight annotation types, such as branch color, pie charts, bootstrap value style, timeline plot and collapse internal nodes. While branch color annotation type helps in modifying the branch color, the pie charts dataset type helps to insert pie chart plots on branches and internal nodes. Handling visual representation of very large tree visualization often comes with some difficulties, collapse internal nodes can be used to group the nodes, providing better perspective by grouping nodes. Leaf styling and annotations In total four annotation types fall into this category, including leaf color, leaf background color, leaf label decorations, group labels and leaf images. These annotation types focus on aiding users with leaf label based modifications like change leaf label color, change background or even add additional decorations between the leaf label and the branch. Many of these annotation types facilitate upload of multiple datasets to the same tree providing users, the support for their different visualizations. Additional annotations Evolview has been supporting options to combine and visualize various trees along with certain types of plots or charts. At present version 3 supports totally seven datasets, including bar plots, heatmap, protein domain plot, column plot, dot plot , color strips and shapes. These annotation types facilitate users with additional visualization options that can be integrated with phylogenetic trees, providing larger platform to visualize tree related information. Auto generate annotations From Evolview version 4, we provide template generation option for annotations datasets,which would help user to try any of visulization options. The annotations templates are generated for user selected tree for user selection annotation type. The user can edit,modify the annotation definations to visual styles of choice. Legends Data export Supported text output formats newick nhx nexus phyloXML Supported graphic output formats svg (preferred) pdf png jpeg / jpg Share trees Tree Sharing is a much anticipated feature that allows user to share their trees for others to view both within Evolview website and also on other websites too. Share Share within Evolview Embed Embed Evolview tree on other websites","title":"Home"},{"location":"#welcome-to-evolview","text":"","title":"Welcome to Evolview"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#tree-upload","text":"To start using the Evolview you just have to click the \"Try me\" button on the window or login if you have a user account with Evolview. Evolview supports two kinds of tree upload operations Drag and drop tree file, Upload tree using upload button. Both the upload option requires the user to provide with some details like project name ,tree name for easy management purposes. Project: [new_project] - [Auto generated when using drag and drop option]. Name: [new_tree] - provide tree file name [Auto detected when using drag and drop option]. Type: [select tree format] - [Auto detected when using drag and drop option].","title":"Tree upload"},{"location":"#supported-tree-formats","text":"","title":"Supported tree Formats"},{"location":"#supported-input-formats","text":"newick/ phylip nhx nexus phyloXML (partial; embedded annotations will not be parsed by EvolView for now)","title":"Supported input formats"},{"location":"#visulization-styles","text":"Evolview supports the visualisation of phylogenetic trees as phylograms and cladograms, each in either rectangular or circular layout.On top of this, Evolview supports two additional visualisation styles that will make trees stylish.","title":"Visulization styles"},{"location":"#user-access","text":"EvolView is free for all users; all functionalities, except those require a connection to remote MySQL servers, are available to non-registered users. However there are many benefits for registered users (registration is free); with an account, you can: save your trees and datasets on our MySQL server, save your all customizations, including zoom in and out of your tree, the positions of your tree on the canvas and many others on user MySQL server, access your trees and datasets from any computer with internet connection, and many more ...","title":"User Access"},{"location":"#no-registration","text":"If you're not interested in creating a new account, just click the \"Try me\" Option: Please note: You DON'T need an account to use EvolView, it's free for all users; all functionalities, except those require a connection to remote MySQL servers, are available to non-registered users. Since Aug 2013, the data entered / uploaded by temporary users will also saved on our server; a unique token will be automatically assigned to current user and saved in browser cookie. During the period that this token is valid (usually a week), a temporary user can access the data as long as he / she does not clear browser history. If the temporary user creates a new account and becomes a registered user, he / she will be asked to transfer the data to this newly created account.","title":"No registration"},{"location":"#with-user-account","text":"To sign up, click the \"Sign up\" button on the top of the \"login\" page: Then fill the form in the login/register page and click \"Create my account\"; all fields with \"*\" are mandatory If there is no errors occurred during the registration, a dialogbox will popup and inform the user that the new account is ready!! What if the password I choose is the same for my Gmail or even my bank account? Please note that for security and privacy reasons, we would never save the original password string you entered on our server; instead, only an encrypted version is kept (see below).","title":"With user account"},{"location":"#with-social-login","text":"With OAuth, you can login with your existing accounts such as Gmail, Facebook, Windows Live, LinkedIn and many others. To do this, simply click one of the following icons in the Login page: On clicking the social login option from login page, the user is redirected to the below looking page: Click the \"Windows live\" icon, for example, you will be redirected to https://login.live.com . After signing in with your existing \"Live\" account.You will be redirected back to EvolView and login automatically. If you do this for the first time, EvolView will create a new account for you. Your existing data (if there is any) will be then loaded. For more information about OAuth, an open standard for authorisation, see here","title":"With Social login"},{"location":"#user-interface","text":"","title":"User interface"},{"location":"#overview","text":"The user interface is divided into three parts: The top part consisting the Evolview logo,Project /tree navigation, quick controls like login/logout, citation and help page links. The middle part consisting of icon controls for the tree and dataset visualization. The bottem part with the display canvas Evolview logo: On click takes user to the canvas view of the webpage. Evolview : On click takes user to usage statistics page. Project navigation : Project dropdown list with inbuilt search option. Tree navigation : Tree dropdown list with inbuilt search option. Edit toolbar: Provides users for quick tree editing options. The edit toolbar has grouped the buttons into various groups based on button functions. Advanced toolbar: Provides users with some advanced tree edit actions like swapping tree rotation angles, show/hide control panel, delete tree . Import toolbar: Provides users with all file import related actions. Export toolbar: Provides users with image and data export options. Control panel: Dataset control panel.","title":"Overview"},{"location":"#edit-tree","text":"","title":"Edit tree"},{"location":"#project-management","text":"Project Management is part of Section 4 of the User interface. It provides control over your project data and show overall view of the sharing status. User can View all the project and trees, Download any project fully along with tree and annotation datasets, View the sharing status and control the sharing link information To access the project management, select the projects icon from the right corner of the webpage as displayed. The project management page displayed as below:","title":"Project management"},{"location":"#search-projecttrees","text":"From Evolview version 4, we support project and tree search directly from navigation area. This provides an quick access even while working on diffrent project or tree.","title":"Search project,trees"},{"location":"#annotations","text":"The current version Evolview supports totally twenty annotation types, including one which was newly added. The most popular ones included leaf label background color, group label, color strips and color shapes, leaf colors and heatmap lots. In general, these annotation types can be categorized into the following subcategories according to their intended functions: leaf styling and annotation, branch styling and annotation and display of additional annotations.","title":"Annotations"},{"location":"#branch-styling-and-annotations","text":"This category includes eight annotation types, such as branch color, pie charts, bootstrap value style, timeline plot and collapse internal nodes. While branch color annotation type helps in modifying the branch color, the pie charts dataset type helps to insert pie chart plots on branches and internal nodes. Handling visual representation of very large tree visualization often comes with some difficulties, collapse internal nodes can be used to group the nodes, providing better perspective by grouping nodes.","title":"Branch styling and annotations"},{"location":"#leaf-styling-and-annotations","text":"In total four annotation types fall into this category, including leaf color, leaf background color, leaf label decorations, group labels and leaf images. These annotation types focus on aiding users with leaf label based modifications like change leaf label color, change background or even add additional decorations between the leaf label and the branch. Many of these annotation types facilitate upload of multiple datasets to the same tree providing users, the support for their different visualizations.","title":"Leaf styling and annotations"},{"location":"#additional-annotations","text":"Evolview has been supporting options to combine and visualize various trees along with certain types of plots or charts. At present version 3 supports totally seven datasets, including bar plots, heatmap, protein domain plot, column plot, dot plot , color strips and shapes. These annotation types facilitate users with additional visualization options that can be integrated with phylogenetic trees, providing larger platform to visualize tree related information.","title":"Additional annotations"},{"location":"#auto-generate-annotations","text":"From Evolview version 4, we provide template generation option for annotations datasets,which would help user to try any of visulization options. The annotations templates are generated for user selected tree for user selection annotation type. The user can edit,modify the annotation definations to visual styles of choice.","title":"Auto generate annotations"},{"location":"#legends","text":"","title":"Legends"},{"location":"#data-export","text":"","title":"Data export"},{"location":"#supported-text-output-formats","text":"newick nhx nexus phyloXML","title":"Supported text output formats"},{"location":"#supported-graphic-output-formats","text":"svg (preferred) pdf png jpeg / jpg","title":"Supported graphic output formats"},{"location":"#share-trees","text":"Tree Sharing is a much anticipated feature that allows user to share their trees for others to view both within Evolview website and also on other websites too. Share Share within Evolview Embed Embed Evolview tree on other websites","title":"Share trees"},{"location":"examples/","text":"","title":"Examples"},{"location":"faq/","text":"","title":"Faq"},{"location":"helptopics/","text":"Embed tree in other websites From Evolview version 4, the sharing tree provides additional option to create embed links that can help user embedding evolview tree along with annotation plots into other websites. Generate annotation template for tree From Evolview version 4, we provide template generation option for annotations datasets,which would help user to try any of visulization options. The annotations templates are generated for user selected tree for user selection annotation type. The user can edit,modify the annotation definations to visual styles of choice.","title":"Helptopics"},{"location":"helptopics/#embed-tree-in-other-websites","text":"From Evolview version 4, the sharing tree provides additional option to create embed links that can help user embedding evolview tree along with annotation plots into other websites.","title":"Embed tree in other websites"},{"location":"helptopics/#generate-annotation-template-for-tree","text":"From Evolview version 4, we provide template generation option for annotations datasets,which would help user to try any of visulization options. The annotations templates are generated for user selected tree for user selection annotation type. The user can edit,modify the annotation definations to visual styles of choice.","title":"Generate annotation template for tree"},{"location":"locdeploy/","text":"instructions for deploying [evolview v3 and ver2] (http://www.evolgenius.info/evolview) to a local computer EvolView is an easy-to-use online tool for displaying, managing and customizing phylogenetic trees. Here is a very short tutorial for deploying Evolview to your local computer. First, you may have to install the following softwares (all are free and cross-platform): * Tomcat 7+ * MySQL 5.7.9+ * JAVA 1.8+ 1. install Tomcat For Mac users please see instructions here . For Windows users, see here for Linux users, depending on your distribution, see the following links: * for Ubuntu * for Debian * for Redhat/CentOS At the end, if the installation is successful, open the following link in a browser: ## -- if access from the computer where Tomcat is installed: http://127.0.0.1:8080 ## -- or access the server from another computer http://server_IP_address:8080 and you will see a page that says \"It works!\", in addition to other information. 2. install MySQL for Ubuntu users for Debian users for Redhat users for CentOS users for MacOS users for Windows users 3. download and deploy Evolview 3.1 download the following two files from the 'downloads/' folder or use the download links provided below: eviewer_ver1.schema.sql evolview.war (version 3) Alternatively, you can download the evolview.war file from the following online file-sharing sites: For latest version of Evolviw(version 3), use the following links: for people else where: https://www.dropbox.com/s/ddoptc6amyox755/evolview.war?dl=0 For Older versions of Evolview(version 2),use the following link: for people in Mainland China: https://pan.baidu.com/s/17ECfLEdO-eRwcAA-VCovOg for people elsewhere: https://www.dropbox.com/s/aiqs090n8m9292l/evolview.war?dl=0 3.2 connect to your MySQL server On Windows, I recommend MySQL Workbench for MySQL connection. On Mac and Linux, enter the following command in Terminal to connect to MySQL: mysql -u root -p 3.3 prepare the database 3.3.1 create a new database for Evolview, and load the database schema ## run this in mysql create database eviewer_ver1; use eviewer_ver1; ## -- for linux / mac users source /path/to/eviewer_ver1.schema.sql ## -- for windows users source C:/path/to/eviewer_ver1.schema.sql 3.3.2 create a new user, and grant some privileges ##-- create a new user 'evuser', set password to 'evuserpass' ## -- you may need root privileges to do it create user `evuser`@`localhost` identified by 'evuserpass'; grant all on eviewer_ver1.* to `evuser`@`localhost`; 3.4 deploy Evolview On Mac OS, if you installed Tomcat as instructed, you can copy the downloaded .war file to to the 'webapp/' folder: sudo cp /path/to/evolview.war /Library/Tomcat/ Wait a few minutes for Tomcat to unzip the app, then open the following URL in your browser (Google chrome is recommended; firefox also works): http://localhost:8080/evolview The familiar login page will appear!! For Linux users, the 'webapps/' folder can often be found at : /var/lib/tomcat7/webappps/: ## if tomcat7 is installed; change the version number ## if you have other version of tomcat installed. cp /path/to/evolview.ar /var/lib/tomcat7/webapps/ Enjoy! Note: * please go check our \"what's new\" page regularly for new features and update your version of Evolview accordingly * please contact us (evolgenius.team@gmail.com) to report problems and send us your comments, corrections, suggestions and feature requests * attach your tree and datasets to your email if necessary","title":"Local Deploy"},{"location":"locdeploy/#instructions-for-deploying-evolview-v3-and-ver2-httpwwwevolgeniusinfoevolview-to-a-local-computer","text":"EvolView is an easy-to-use online tool for displaying, managing and customizing phylogenetic trees. Here is a very short tutorial for deploying Evolview to your local computer. First, you may have to install the following softwares (all are free and cross-platform): * Tomcat 7+ * MySQL 5.7.9+ * JAVA 1.8+","title":"instructions for deploying [evolview v3 and ver2] (http://www.evolgenius.info/evolview) to a local computer"},{"location":"locdeploy/#1-install-tomcat","text":"For Mac users please see instructions here . For Windows users, see here for Linux users, depending on your distribution, see the following links: * for Ubuntu * for Debian * for Redhat/CentOS At the end, if the installation is successful, open the following link in a browser: ## -- if access from the computer where Tomcat is installed: http://127.0.0.1:8080 ## -- or access the server from another computer http://server_IP_address:8080 and you will see a page that says \"It works!\", in addition to other information.","title":"1. install Tomcat"},{"location":"locdeploy/#2-install-mysql","text":"for Ubuntu users for Debian users for Redhat users for CentOS users for MacOS users for Windows users","title":"2. install MySQL"},{"location":"locdeploy/#3-download-and-deploy-evolview","text":"","title":"3. download and deploy Evolview"},{"location":"locdeploy/#31-download-the-following-two-files-from-the-downloads-folder-or-use-the-download-links-provided-below","text":"eviewer_ver1.schema.sql evolview.war (version 3) Alternatively, you can download the evolview.war file from the following online file-sharing sites:","title":"3.1 download the following two files from the 'downloads/' folder or use the download links provided below:"},{"location":"locdeploy/#for-latest-version-of-evolviwversion-3-use-the-following-links","text":"for people else where: https://www.dropbox.com/s/ddoptc6amyox755/evolview.war?dl=0","title":"For latest version of Evolviw(version 3), use the following links:"},{"location":"locdeploy/#for-older-versions-of-evolviewversion-2use-the-following-link","text":"for people in Mainland China: https://pan.baidu.com/s/17ECfLEdO-eRwcAA-VCovOg for people elsewhere: https://www.dropbox.com/s/aiqs090n8m9292l/evolview.war?dl=0","title":"For Older versions of Evolview(version 2),use the following link:"},{"location":"locdeploy/#32-connect-to-your-mysql-server","text":"On Windows, I recommend MySQL Workbench for MySQL connection. On Mac and Linux, enter the following command in Terminal to connect to MySQL: mysql -u root -p","title":"3.2 connect to your MySQL server"},{"location":"locdeploy/#33-prepare-the-database","text":"3.3.1 create a new database for Evolview, and load the database schema ## run this in mysql create database eviewer_ver1; use eviewer_ver1; ## -- for linux / mac users source /path/to/eviewer_ver1.schema.sql ## -- for windows users source C:/path/to/eviewer_ver1.schema.sql 3.3.2 create a new user, and grant some privileges ##-- create a new user 'evuser', set password to 'evuserpass' ## -- you may need root privileges to do it create user `evuser`@`localhost` identified by 'evuserpass'; grant all on eviewer_ver1.* to `evuser`@`localhost`;","title":"3.3 prepare the database"},{"location":"locdeploy/#34-deploy-evolview","text":"On Mac OS, if you installed Tomcat as instructed, you can copy the downloaded .war file to to the 'webapp/' folder: sudo cp /path/to/evolview.war /Library/Tomcat/ Wait a few minutes for Tomcat to unzip the app, then open the following URL in your browser (Google chrome is recommended; firefox also works): http://localhost:8080/evolview The familiar login page will appear!! For Linux users, the 'webapps/' folder can often be found at : /var/lib/tomcat7/webappps/: ## if tomcat7 is installed; change the version number ## if you have other version of tomcat installed. cp /path/to/evolview.ar /var/lib/tomcat7/webapps/ Enjoy! Note: * please go check our \"what's new\" page regularly for new features and update your version of Evolview accordingly * please contact us (evolgenius.team@gmail.com) to report problems and send us your comments, corrections, suggestions and feature requests * attach your tree and datasets to your email if necessary","title":"3.4 deploy Evolview"},{"location":"quickstart/","text":"Add new tree to project New project can be created by uploading the tree either after signing in or by using the try me option. After sign in, you can just drag and drop the file to the canvas window,which then shows a window with options for creating a project for the tree file uploaded. For more information you can check the : Tree upload Change the branch color and stroke In the following example,we'll add several datasets to change the appearances of the tree.You can select Example tree from tree upload box to test this example. Use \"Sample tree 1\" , let's use the same tree again: Sample tree: (chicken,((mouse,rat),(chimp,human))); To Change the branch color: 1 2 3 4 5 6 7 8 ## lines start with # are annotations; you can put an annotation line ## anywhere in this dataset, provided that the # is the first character ## of the line ## let the dataset begin: all fields of a line are seperated by 'tab' ## first all, color all branches with 'grey' human,chicken grey ad ## and then highlight the branches connecting human and chimp human,chimp red ad To change the branch stroke type: 1 2 human,chimp red ad dash:8,3 chicken green Change the leaf colors and background 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ## let the dataset begin ## each line of the 'data part' consists three fields sparated by a 'tab' character ## the first field specifies the location on the tree; for example 'human' indicates ## the leaf node representing 'human' or the branch connecting to this leaf node, ## while 'human,mouse' indicates the internal node representing the ## last common ancester (LCA) of human and mouse ## the second field specifies the color to be applied to the corresponding nodes / branches ## the third field is optional; it can be one the following 'key-words': ## ad: the color will be applied to all decendents of the node specified by the first field ## prefix: the color will be applied to all leaf nodes (or connecting branches) whose names ## start with the string in the first field ## suffix: the color will be applied to all leaf nodes (or connecting branches) whose names ## end with the string in the first field ## anywhere: the color will be applied to all leaf nodes (or connecting branches) whose names ## contain the string in the first field ## first all, color all leaves to 'grey' human,chicken grey ad ## then, highlight human and chimp with 'red' human,chimp red ad Add bar plots to the tree (next to the leaf labels) 1 2 3 4 5 6 7 8 9 10 11 12 ##barplots !groups a,b,c !colors darkblue,darkgreen,darkred !showlegends 0 !plotwidth 100 !align !grid chicken 2,3,1 mouse 8,9,2 human 20,3,4 chimp 10,20,1 rat 4,6,5 Add colored objects/ shapes to the tree (next to the leaf labels) 1 2 3 4 5 6 7 8 9 10 ##color strips !groups a,b,c,d !colors blue,green,grey,red !type rect,circle,star,strip !showlegends 1 human red,green,blue,purple chimp purple,darkred,lightgreen,lightblue mouse lightblue,yellow chicken darkgreen,grey,pink,grey rat grey,orange,pink,orange Add colored objects/shapes to the branch 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ##mandatory property !groups bad,good ##mandatory property !colors red,green !groups_class id=T1,bkcolor=red,color=black,shape=star,width=20,height=20 !groups_class id=T2,bkcolor=green,color=black,shape=circle,width=20,height=20 !groups_class id=T3,bkcolor=red,color=black,shape=cross,width=20,height=20 !groups_class id=T4,bkcolor=green,color=black,shape=check,width=15,height=15 A T4 B T3 C T1 D T2 Show/Hide bootstrap using annotation,branch length values 1 2 3 4 5 6 7 8 9 10 ## with legend; !Title bootstrap !Groups <=40,41~80,81~100 !Colors grey,gold,red !LegendStyle circle !bootstrapValueStyle show=1,style=circle 40 color=darkgrey 41,80 color=gold 81,100 color=red Embed tree in other websites To embed tree in other websites, Select share icon from the tool bar In the share options window,select the embed option Embed option generates a url , please copy the url. To ember Evolview trees, you can use the Iframe HTML tag , Here is an example that shows one of the demo trees from Evolview: 1 2 <iframe src=\"http://js.evolgenius.info/embed/t046BQUavNl\" width=\"100%\" height=\"300\" style=\"border:none;\"> </iframe> To know more about share options,kindly check the Share trees Auto generate annotation templates for tree From Evolview version 4, we provide a new auto template generate functionality for any tree, which would help user to test and try different visulizations. To generate template for a datset, Go to the Import tab on the tool bar. Select any one of the import dataset option from the tool bar. A import window pops up with many options, click the Generate template button from the import window. Datasets for the current tree is auto generated on the text box shown on the window. Now you can make changes as your wish or upload the dataset to view the annotations. To know more about share options,kindly check the Auto generate annotations","title":"Quick start"},{"location":"quickstart/#add-new-tree-to-project","text":"New project can be created by uploading the tree either after signing in or by using the try me option. After sign in, you can just drag and drop the file to the canvas window,which then shows a window with options for creating a project for the tree file uploaded. For more information you can check the : Tree upload","title":"Add new tree to project"},{"location":"quickstart/#change-the-branch-color-and-stroke","text":"In the following example,we'll add several datasets to change the appearances of the tree.You can select Example tree from tree upload box to test this example. Use \"Sample tree 1\" , let's use the same tree again: Sample tree: (chicken,((mouse,rat),(chimp,human))); To Change the branch color: 1 2 3 4 5 6 7 8 ## lines start with # are annotations; you can put an annotation line ## anywhere in this dataset, provided that the # is the first character ## of the line ## let the dataset begin: all fields of a line are seperated by 'tab' ## first all, color all branches with 'grey' human,chicken grey ad ## and then highlight the branches connecting human and chimp human,chimp red ad To change the branch stroke type: 1 2 human,chimp red ad dash:8,3 chicken green","title":"Change the branch color and stroke"},{"location":"quickstart/#change-the-leaf-colors-and-background","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ## let the dataset begin ## each line of the 'data part' consists three fields sparated by a 'tab' character ## the first field specifies the location on the tree; for example 'human' indicates ## the leaf node representing 'human' or the branch connecting to this leaf node, ## while 'human,mouse' indicates the internal node representing the ## last common ancester (LCA) of human and mouse ## the second field specifies the color to be applied to the corresponding nodes / branches ## the third field is optional; it can be one the following 'key-words': ## ad: the color will be applied to all decendents of the node specified by the first field ## prefix: the color will be applied to all leaf nodes (or connecting branches) whose names ## start with the string in the first field ## suffix: the color will be applied to all leaf nodes (or connecting branches) whose names ## end with the string in the first field ## anywhere: the color will be applied to all leaf nodes (or connecting branches) whose names ## contain the string in the first field ## first all, color all leaves to 'grey' human,chicken grey ad ## then, highlight human and chimp with 'red' human,chimp red ad","title":"Change the leaf colors and background"},{"location":"quickstart/#add-bar-plots-to-the-tree-next-to-the-leaf-labels","text":"1 2 3 4 5 6 7 8 9 10 11 12 ##barplots !groups a,b,c !colors darkblue,darkgreen,darkred !showlegends 0 !plotwidth 100 !align !grid chicken 2,3,1 mouse 8,9,2 human 20,3,4 chimp 10,20,1 rat 4,6,5","title":"Add bar plots to the tree (next to the leaf labels)"},{"location":"quickstart/#add-colored-objects-shapes-to-the-tree-next-to-the-leaf-labels","text":"1 2 3 4 5 6 7 8 9 10 ##color strips !groups a,b,c,d !colors blue,green,grey,red !type rect,circle,star,strip !showlegends 1 human red,green,blue,purple chimp purple,darkred,lightgreen,lightblue mouse lightblue,yellow chicken darkgreen,grey,pink,grey rat grey,orange,pink,orange","title":"Add colored objects/ shapes to the tree (next to the leaf labels)"},{"location":"quickstart/#add-colored-objectsshapes-to-the-branch","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 ##mandatory property !groups bad,good ##mandatory property !colors red,green !groups_class id=T1,bkcolor=red,color=black,shape=star,width=20,height=20 !groups_class id=T2,bkcolor=green,color=black,shape=circle,width=20,height=20 !groups_class id=T3,bkcolor=red,color=black,shape=cross,width=20,height=20 !groups_class id=T4,bkcolor=green,color=black,shape=check,width=15,height=15 A T4 B T3 C T1 D T2","title":"Add colored objects/shapes to the branch"},{"location":"quickstart/#showhide-bootstrap-using-annotationbranch-length-values","text":"1 2 3 4 5 6 7 8 9 10 ## with legend; !Title bootstrap !Groups <=40,41~80,81~100 !Colors grey,gold,red !LegendStyle circle !bootstrapValueStyle show=1,style=circle 40 color=darkgrey 41,80 color=gold 81,100 color=red","title":"Show/Hide bootstrap using annotation,branch length values"},{"location":"quickstart/#embed-tree-in-other-websites","text":"To embed tree in other websites, Select share icon from the tool bar In the share options window,select the embed option Embed option generates a url , please copy the url. To ember Evolview trees, you can use the Iframe HTML tag , Here is an example that shows one of the demo trees from Evolview: 1 2 <iframe src=\"http://js.evolgenius.info/embed/t046BQUavNl\" width=\"100%\" height=\"300\" style=\"border:none;\"> </iframe> To know more about share options,kindly check the Share trees","title":"Embed tree in other websites"},{"location":"quickstart/#auto-generate-annotation-templates-for-tree","text":"From Evolview version 4, we provide a new auto template generate functionality for any tree, which would help user to test and try different visulizations. To generate template for a datset, Go to the Import tab on the tool bar. Select any one of the import dataset option from the tool bar. A import window pops up with many options, click the Generate template button from the import window. Datasets for the current tree is auto generated on the text box shown on the window. Now you can make changes as your wish or upload the dataset to view the annotations. To know more about share options,kindly check the Auto generate annotations","title":"Auto generate annotation templates for tree"},{"location":"verhistory/","text":"What's new April 2021 New dataset import options. Now Evolview supports Drag and drop action which can also detect tree files and dataset files partially. Focus mode for the Evolview. The focus mode can take the web browser to a full window mode hiding all parts of the screen ,showing only the tool bar and canvas section for dedicated tree editing and design. Feb 2021 Complete user interface redesign. Implementation of material theme thought the website and for user controls. Redesign SVG JS icons for the newly implemented material theme New Tree share function: Embed Evolview tree and canvas anywhere. This function helps the users with embedding the evolview tree canvas along with datasets into any website using the iframe protocol from HTML. January 2021 Bug fixing and minor updates to some of the backend functions to improve the usability. December 2020 The new user guide has been developed and setup using MKdocs. Social login plugin was included with the latest update. new examples for the new datasets have been included into the online version. November 2020 New dataset types and some minor bug updates have been done. Support Gene synteny dataset type. October 2020 New dataset types have been created for the tree visualizations: Options to modify the brach type dashed/modify individual branch line width and along with color New branch label annotation is included with this update new label annotation types have been included supporting multiple styles of visualizations. Support to insert images besides the leaf label. August 2020 The data management window has been redesigned with user options to download and manage their data. The tree dataset control window on the right has been redesigned as an draggable and resizable window. The error reporting has been improved and user can know more about the issues in their data format with new improved dialogue system. This update also include some bug fixings. July 2020 A test version based on JS has been brought online in js.evolgenius.info domain for initial testing. Feb 2020 Javascript based The version 4 development was started. New version includes interesting features and updates. May 2019 The version 3 accepted by NAR and published in may 22,2019 issue. November 1,2018 *New version with updated user nterface is online. Update includes: New dataset visualization charts included New updated user intercae with re-designed user data managaement section Improved and updated user help pages with search functionality to assist users Evolview domains fully secured with HTTPS certificates Evolview v2 moved to newer domain to provide assestance to the users for easy trancision. May 4, 2018 re-enabled support for the lastest version of Firefox (ver 59) updated GWT to ver2.8.2, lib-svg-gwt to ver0.5.15; Feb 03, 2018 for batplot, users now can use modifier ' !RowDataReorder ' to change the display order of the stacked bars according to their corresponding values in either ascending or descending orders. See here for more details. Let's see some examples. First, the tree: (A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; example 1 , the default barplot: !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title barplot with data shown !fan !itemHeightPCT 80 !plotWidth 150 ### last modified: sep 28, 2014 !showData !showDataFontSize 10 !showDataFontColor white !showDataTextAlign start A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 example 2 , barplot with row data re-ordered in ascending order. !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title barplot with data shown !fan !itemHeightPCT 80 !plotWidth 150 ## -- new modifier here!!! !RowDataReorder asc ### last modified: sep 28, 2014 !showData !showDataFontSize 10 !showDataFontColor white !showDataTextAlign start A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 example 3 , barplot with row data re-ordered in descending order. !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title barplot with data shown !fan !itemHeightPCT 80 !plotWidth 150 ## -- new modifier here!!! !RowDataReorder desc ### last modified: sep 28, 2014 !showData !showDataFontSize 10 !showDataFontColor white !showDataTextAlign start A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 June~Aug, 2017 added HTML mode; the documentation is to be written. July 17, 2017 bug fixes as always fixed an issue that leaf label background overlaps with group labels of style 1 fixed an issue that the background box is smaller than the leaf label; also improved cross-browser compatibility on this issue July 11, 2017 our documentation has been moved to GitHub!!! Long-time users may still remember that Evolview documentation was originally hosted at Google Code, then was moved to MicroSoft CodePlex. This may never happen but let us hope that we do NOT have to move again!!! Jan 19, 2017 use '!colorRecycle' modifier to stop recycling colors in \"Color shapes and strips\" plot. For example by default colors will be recycled: The tree: (chicken,((mouse,rat),(chimp,human))); ##color strips !type strip,rect,circle,star,check,triangle !showlegends 1 !defaultstrokewidth 2 !plotwidth 200 !colorRecycle 1 ## let the data begin mouse pink,red,green,blue:brighter chicken yellow,purple,white:darkred,lightgreen:darker ## -- two objects will be plotted instead of six -- rat lightblue,white:lightblue chimp grey,darkgreen:brighter,grey:darker,pink:darker human orange,red,white:gold,lightblue However, set '!recycleColor' or '!colorRecycle' to 0 will stop cycling the colors: ##color strips !type strip,rect,circle,star,check,triangle !showlegends 1 !defaultstrokewidth 2 !plotwidth 200 ## -- recycle color, default is true -- ## -- !type determines that maximally six objects will be displayed ## -- normally user-supplied colors will be recycled; for example, ## -- however, when !recycleColor is set to 0, the colors will not be recycled !colorRecycle 0 ## let the data begin mouse pink,red,green,blue:brighter chicken yellow,purple,white:darkred,lightgreen:darker ## -- two objects will be plotted instead of six -- rat lightblue,white:lightblue chimp grey,darkgreen:brighter,grey:darker,pink:darker human orange,red,white:gold,lightblue Dec 29, 2016 bug fixes fixed a bug that the header disappeared in Mac Safari Nov 2, 2016 bug fixes fixed a bug that exporting to PDF fails on some circular group labels Aug 25, 2016 bug fixes fixed a bug that the exporting to png/jpeg/tiff functionality fails from time to time May 25, 2016 bug fixes as always added support for two additional tree visualisation styles that can be used in combination with phylograms and cladograms. See here for more information. Here is an example: 1. the original tree: in combination with style 1: in combination with style 2: To turn on/off the new visualisation styles, use the corresponding icons on the Toolbar (as shown below): May 22, 2016; bug fixes May 20, 2016 bug fixes as always added support for a new bootstrap value style here is the tree: (A:0.1,(B:0.2,(C:0.3,(D:0.4,E:0.5)40:0.6)80:0.05)100:0.1)90:0.43; the dataset: ## place=4 !bootstrapValueStyle show=1,style=numeric,place=4,color=darkred and the visualisation results: May 19, 2016 added support for multiple sets of bootstrap values ; here is an example: See here for more information and examples. May 18, 2016 added a new annotation type: TimeLine ; here is an example: See here for more information and examples. Mar 1, 2016 bug fixes as always ... allow user to copy datasets from one tree to others Feb 19, 2016 updated user interface for tree sharing Feb 3, 2016 bug fixes fixed a bug that the charts are not updated after the leaf labels are switched on/off Jan 29, 2016 now Evolview is equipped with a \"CodeMirror\"-powered text-editor that features: line numbers current row highlight keywords highlight See the screenshot below: Jan 28, 2016 use scientific numbers as branch lengths Float numbers less than 0.0001 (1e-4; non-inclusive) will be displayed as scientific numbers. For example, the tree: (A:0.0001,(B:0.00002,(C:0.000003,D:0.000004)100:0.05)100:0.1)90:0.43; will be visualised as: In addition, branch lengths can be directly written as scientific numbers. For example, the following tree will be correctly parsed and visualised: (A:1e-2,(B:0.00002,(C:0.000003,D:1.45e-5)100:0.05)100:0.1)90:0.43; Jan 26, 2016 bug fixes fixed an issue caused by Google Chrome ver 48+ datasets for 'Bootstrap value style' can only be uploaded for trees with bootstrap values (of course) fixed an issue that causes blank page in certain browsers after the deployment of a new version Jan 20, 2016 added support for collapsing at internal nodes; with this annotation type, users can : collapse at internal nodes show a small triangle at the collapsed nodes that is proportional to the number of leaves that the collapsed node contains Here is an example: See here for more information and examples. Jan 14, 2016 now Evolview can correctly parse and display parentheses in leaf node names. As long as they come in pairs, parentheses can be put at anywhere (start, end, middle) of the leaf name; multiple and nested parentheses in a single leaf name are also supported. For example, the tree below: ( ( ( (A)(NC_1)B(C):0.4, ((B)B_(NC_2)):0.3)90:0.2, ( C_(NC_3):0.1, (D_(NC_4)):0.001)75:0.2 )90:0.3, E_(NC_5)_E:0.44 )100:0.3; will be visualised as: Dec 6, 2015 added a new type anntation dataset: Column plots, it allow users to visualise complex summary information of species in a phylogenetic tree, here is an example: See here for more information. Dec 5, 2015 added support for the use of 'darker' or 'brighter' as stroke colors, see the section 'Stroke color and width' and related sections in the annotation datasets. for example: * green:darker == use darker green as stroke color; the stroke color is usually 20% darker than the specified color * purple:ligher or purple:brighter == use lighter purple as stroke color; the stroke color will be 20% brighter than the specific color Here are some examples: Dec 4, 2015 added a new type of annotation dataset: bootstrap value styles, it allows users to change the visiblity color size style / shape and position of the bootstrap scores according to their values, e.g. 40, or value ranges, e.g. 10~60 see here for detail. Here are some examples: Dec 1, 2015 added a new modifier '!columLabelStyle' to allow user to customize the column labels for dotplot and heatmap , below is an example: Nov 30, 2015 bug fixes as usual added a new option 'valuesToHide' for modifier !showDataValue of the dot plots; below is an example; see here for more information: values to hide April 4, 2015 bug fixes as always added a new annotation type, heatmap : March 31, 2015 bug fixes (there are always bugs somewhere ... ) added a new annotation type: dot plot ; here is an example: March 24, 2015 bug fixes updated the pfam domain api added four more styles for group labels; See here for the documentation. added two more example trees to the 'DEMOS' project to showcase the group labels Jan 2, 2015 fixed a bug in tree sharing caused by case-sensitive setting of MySQL at the server-end Dec 15, 2014 a major update has just been released, with a new feature that allows users to share trees to others to view, interact and even edit. See here for the documentation. NOTE: this function is still under development; bugs are thus expected. Please send us feature requests, comments and suggestions!! Dec 15, 2014 added support for a new type of annotation: Group Labels ; here is an example: Oct 9, 2014 bug fixes Oct 1, 2014 fixed a UI bug that the UI behaves differently between firefox and google chrome. Sep 28, 2014 added support for the display of data values in pie and bar charts; see trees 'yeast duplicates' and 'bars' in the \"DEMOS\" project. pie chart : bar chart : Sep 23, 2014 added a new button \"show /hide lines linking leaf labels and datasets\" to the \"Basic\" tab; mouse over this icon to see larger image for more details. July 4, 2014 bug fix June 23, 2014 added rotate subtree at internal nodes June 20, 2014 bug fix: fixed a bug that the tree panel doesn't show properly in Firefox June 18, 2014 added support for navigation (beta) added a new modifier 'toroot' for branch colors; see here for examples April 2, 2014 now Firefox is officially back!! Enjoy!! March 27, 2014 new features: add support for stroke colour and stroke width; see here for more details add a new dataset type : Leaf label decorations Sep 11, 2013 fix a bug with trees that have bootstrap values but no branch lengths : ((a,b)0.88,(c,d)0.99); new features: (beta) social login: now evolview supports OAuth 2.0, an open standard for authorization; users can login with existing accounts including Facebook, Gmail, Windows Live, Yahoo and many others. See here for more information about OAuth: http://en.wikipedia.org/wiki/OAuth now users can set the fonts of bootstrap or branch length values to italic and change their sizes; all changes will be saved on to the server April 18, 2013 fix a bug caused by tree like this '((a:1,b):3,(c:1,(d:1,e:3):1):2);' new features: temporary users can save their trees, projects and datasets on our server up to 7 days and the keys for accessing the data are saved in browser cookies (clearing the browser cookies will lose the keys) (Note: each temporary use would have a unique ID, she / he can use it to retrieve their data by emailing it to the server administrator ) when creating a new account, temporary uses can choose to move their data to the newly created account May 22, 2012 manuscript accepted for publication on NAR 2012 Web Server issue. Check it out on the publisher's website: http://nar.oxfordjournals.org/content/40/W1/W569 Build# 510; May 15, 2012 add visualisation for protein domains add automatic annotation for protein domains using tree leaf label names to query against PFAM database Build# 500; May 12, 2012 fix a bug on parsing the bootstrap scores in newick format fix some usability issues Build# 450; Apr 23, 2012 improvement on pie-chars: now user can specify whether to use the summation of a row as the area of a pie, or the radius now each plotmode/ treemode has independent translateX, Y as well as pixal per width values; and all these values will be saved on our server if a user is logged in fix a bug on parsing the bootstrap scores in PhyloXML format Build# 412; Feb 14, 2012 fix several bugs on submitting datasets to trees; fix a bug on parsing \"legend\"-related information from datasets Build# 400; Feb 2, 2012 the last active tree will be loaded automatically when sign in; however, if the last active tree is in project \"DEMOS\", no tree will be loaded better compatibility (import/ export) with the following formats: nexus, phyloXML; better support for internal branches from imported trees new download popup panel Build# 380; Jan 17, 2012 zoom in and out at the mouse pointer fix a bug at parsing trees in PhyloXML format add statistics on users' visits per month (click the EvolView logo at the login page to view the statistics) add more interactivity with the tree branches Build# 200; milestone 1; Dec 28, 2012 first version available online manuscript submitted to NAR web server issue 2012","title":"Version history"},{"location":"verhistory/#whats-new","text":"","title":"What's new"},{"location":"verhistory/#april-2021","text":"New dataset import options. Now Evolview supports Drag and drop action which can also detect tree files and dataset files partially. Focus mode for the Evolview. The focus mode can take the web browser to a full window mode hiding all parts of the screen ,showing only the tool bar and canvas section for dedicated tree editing and design.","title":"April 2021"},{"location":"verhistory/#feb-2021","text":"Complete user interface redesign. Implementation of material theme thought the website and for user controls. Redesign SVG JS icons for the newly implemented material theme New Tree share function: Embed Evolview tree and canvas anywhere. This function helps the users with embedding the evolview tree canvas along with datasets into any website using the iframe protocol from HTML.","title":"Feb 2021"},{"location":"verhistory/#january-2021","text":"Bug fixing and minor updates to some of the backend functions to improve the usability.","title":"January 2021"},{"location":"verhistory/#december-2020","text":"The new user guide has been developed and setup using MKdocs. Social login plugin was included with the latest update. new examples for the new datasets have been included into the online version.","title":"December 2020"},{"location":"verhistory/#november-2020","text":"New dataset types and some minor bug updates have been done. Support Gene synteny dataset type.","title":"November 2020"},{"location":"verhistory/#october-2020","text":"New dataset types have been created for the tree visualizations: Options to modify the brach type dashed/modify individual branch line width and along with color New branch label annotation is included with this update new label annotation types have been included supporting multiple styles of visualizations. Support to insert images besides the leaf label.","title":"October 2020"},{"location":"verhistory/#august-2020","text":"The data management window has been redesigned with user options to download and manage their data. The tree dataset control window on the right has been redesigned as an draggable and resizable window. The error reporting has been improved and user can know more about the issues in their data format with new improved dialogue system. This update also include some bug fixings.","title":"August 2020"},{"location":"verhistory/#july-2020","text":"A test version based on JS has been brought online in js.evolgenius.info domain for initial testing.","title":"July 2020"},{"location":"verhistory/#feb-2020","text":"Javascript based The version 4 development was started. New version includes interesting features and updates.","title":"Feb 2020"},{"location":"verhistory/#may-2019","text":"The version 3 accepted by NAR and published in may 22,2019 issue.","title":"May 2019"},{"location":"verhistory/#november-12018","text":"*New version with updated user nterface is online. Update includes: New dataset visualization charts included New updated user intercae with re-designed user data managaement section Improved and updated user help pages with search functionality to assist users Evolview domains fully secured with HTTPS certificates Evolview v2 moved to newer domain to provide assestance to the users for easy trancision.","title":"November 1,2018"},{"location":"verhistory/#may-4-2018","text":"re-enabled support for the lastest version of Firefox (ver 59) updated GWT to ver2.8.2, lib-svg-gwt to ver0.5.15;","title":"May 4, 2018"},{"location":"verhistory/#feb-03-2018","text":"for batplot, users now can use modifier ' !RowDataReorder ' to change the display order of the stacked bars according to their corresponding values in either ascending or descending orders. See here for more details. Let's see some examples. First, the tree: (A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; example 1 , the default barplot: !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title barplot with data shown !fan !itemHeightPCT 80 !plotWidth 150 ### last modified: sep 28, 2014 !showData !showDataFontSize 10 !showDataFontColor white !showDataTextAlign start A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 example 2 , barplot with row data re-ordered in ascending order. !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title barplot with data shown !fan !itemHeightPCT 80 !plotWidth 150 ## -- new modifier here!!! !RowDataReorder asc ### last modified: sep 28, 2014 !showData !showDataFontSize 10 !showDataFontColor white !showDataTextAlign start A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 example 3 , barplot with row data re-ordered in descending order. !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title barplot with data shown !fan !itemHeightPCT 80 !plotWidth 150 ## -- new modifier here!!! !RowDataReorder desc ### last modified: sep 28, 2014 !showData !showDataFontSize 10 !showDataFontColor white !showDataTextAlign start A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20","title":"Feb 03, 2018"},{"location":"verhistory/#juneaug-2017","text":"added HTML mode; the documentation is to be written.","title":"June~Aug, 2017"},{"location":"verhistory/#july-17-2017","text":"bug fixes as always fixed an issue that leaf label background overlaps with group labels of style 1 fixed an issue that the background box is smaller than the leaf label; also improved cross-browser compatibility on this issue","title":"July 17, 2017"},{"location":"verhistory/#july-11-2017","text":"our documentation has been moved to GitHub!!! Long-time users may still remember that Evolview documentation was originally hosted at Google Code, then was moved to MicroSoft CodePlex. This may never happen but let us hope that we do NOT have to move again!!!","title":"July 11, 2017"},{"location":"verhistory/#jan-19-2017","text":"use '!colorRecycle' modifier to stop recycling colors in \"Color shapes and strips\" plot. For example by default colors will be recycled: The tree: (chicken,((mouse,rat),(chimp,human))); ##color strips !type strip,rect,circle,star,check,triangle !showlegends 1 !defaultstrokewidth 2 !plotwidth 200 !colorRecycle 1 ## let the data begin mouse pink,red,green,blue:brighter chicken yellow,purple,white:darkred,lightgreen:darker ## -- two objects will be plotted instead of six -- rat lightblue,white:lightblue chimp grey,darkgreen:brighter,grey:darker,pink:darker human orange,red,white:gold,lightblue However, set '!recycleColor' or '!colorRecycle' to 0 will stop cycling the colors: ##color strips !type strip,rect,circle,star,check,triangle !showlegends 1 !defaultstrokewidth 2 !plotwidth 200 ## -- recycle color, default is true -- ## -- !type determines that maximally six objects will be displayed ## -- normally user-supplied colors will be recycled; for example, ## -- however, when !recycleColor is set to 0, the colors will not be recycled !colorRecycle 0 ## let the data begin mouse pink,red,green,blue:brighter chicken yellow,purple,white:darkred,lightgreen:darker ## -- two objects will be plotted instead of six -- rat lightblue,white:lightblue chimp grey,darkgreen:brighter,grey:darker,pink:darker human orange,red,white:gold,lightblue","title":"Jan 19, 2017"},{"location":"verhistory/#dec-29-2016","text":"bug fixes fixed a bug that the header disappeared in Mac Safari","title":"Dec 29, 2016"},{"location":"verhistory/#nov-2-2016","text":"bug fixes fixed a bug that exporting to PDF fails on some circular group labels","title":"Nov 2, 2016"},{"location":"verhistory/#aug-25-2016","text":"bug fixes fixed a bug that the exporting to png/jpeg/tiff functionality fails from time to time","title":"Aug 25, 2016"},{"location":"verhistory/#may-25-2016","text":"bug fixes as always added support for two additional tree visualisation styles that can be used in combination with phylograms and cladograms. See here for more information. Here is an example: 1. the original tree: in combination with style 1: in combination with style 2: To turn on/off the new visualisation styles, use the corresponding icons on the Toolbar (as shown below):","title":"May 25, 2016"},{"location":"verhistory/#may-22-2016","text":"bug fixes","title":"May 22, 2016;"},{"location":"verhistory/#may-20-2016","text":"bug fixes as always added support for a new bootstrap value style here is the tree: (A:0.1,(B:0.2,(C:0.3,(D:0.4,E:0.5)40:0.6)80:0.05)100:0.1)90:0.43; the dataset: ## place=4 !bootstrapValueStyle show=1,style=numeric,place=4,color=darkred and the visualisation results:","title":"May 20, 2016"},{"location":"verhistory/#may-19-2016","text":"added support for multiple sets of bootstrap values ; here is an example: See here for more information and examples.","title":"May 19, 2016"},{"location":"verhistory/#may-18-2016","text":"added a new annotation type: TimeLine ; here is an example: See here for more information and examples.","title":"May 18, 2016"},{"location":"verhistory/#mar-1-2016","text":"bug fixes as always ... allow user to copy datasets from one tree to others","title":"Mar 1, 2016"},{"location":"verhistory/#feb-19-2016","text":"updated user interface for tree sharing","title":"Feb 19, 2016"},{"location":"verhistory/#feb-3-2016","text":"bug fixes fixed a bug that the charts are not updated after the leaf labels are switched on/off","title":"Feb 3, 2016"},{"location":"verhistory/#jan-29-2016","text":"now Evolview is equipped with a \"CodeMirror\"-powered text-editor that features: line numbers current row highlight keywords highlight See the screenshot below:","title":"Jan 29, 2016"},{"location":"verhistory/#jan-28-2016","text":"use scientific numbers as branch lengths Float numbers less than 0.0001 (1e-4; non-inclusive) will be displayed as scientific numbers. For example, the tree: (A:0.0001,(B:0.00002,(C:0.000003,D:0.000004)100:0.05)100:0.1)90:0.43; will be visualised as: In addition, branch lengths can be directly written as scientific numbers. For example, the following tree will be correctly parsed and visualised: (A:1e-2,(B:0.00002,(C:0.000003,D:1.45e-5)100:0.05)100:0.1)90:0.43;","title":"Jan 28, 2016"},{"location":"verhistory/#jan-26-2016","text":"bug fixes fixed an issue caused by Google Chrome ver 48+ datasets for 'Bootstrap value style' can only be uploaded for trees with bootstrap values (of course) fixed an issue that causes blank page in certain browsers after the deployment of a new version","title":"Jan 26, 2016"},{"location":"verhistory/#jan-20-2016","text":"added support for collapsing at internal nodes; with this annotation type, users can : collapse at internal nodes show a small triangle at the collapsed nodes that is proportional to the number of leaves that the collapsed node contains Here is an example: See here for more information and examples.","title":"Jan 20, 2016"},{"location":"verhistory/#jan-14-2016","text":"now Evolview can correctly parse and display parentheses in leaf node names. As long as they come in pairs, parentheses can be put at anywhere (start, end, middle) of the leaf name; multiple and nested parentheses in a single leaf name are also supported. For example, the tree below: ( ( ( (A)(NC_1)B(C):0.4, ((B)B_(NC_2)):0.3)90:0.2, ( C_(NC_3):0.1, (D_(NC_4)):0.001)75:0.2 )90:0.3, E_(NC_5)_E:0.44 )100:0.3; will be visualised as:","title":"Jan 14, 2016"},{"location":"verhistory/#dec-6-2015","text":"added a new type anntation dataset: Column plots, it allow users to visualise complex summary information of species in a phylogenetic tree, here is an example: See here for more information.","title":"Dec 6, 2015"},{"location":"verhistory/#dec-5-2015","text":"added support for the use of 'darker' or 'brighter' as stroke colors, see the section 'Stroke color and width' and related sections in the annotation datasets. for example: * green:darker == use darker green as stroke color; the stroke color is usually 20% darker than the specified color * purple:ligher or purple:brighter == use lighter purple as stroke color; the stroke color will be 20% brighter than the specific color Here are some examples:","title":"Dec 5, 2015"},{"location":"verhistory/#dec-4-2015","text":"added a new type of annotation dataset: bootstrap value styles, it allows users to change the visiblity color size style / shape and position of the bootstrap scores according to their values, e.g. 40, or value ranges, e.g. 10~60 see here for detail. Here are some examples:","title":"Dec 4, 2015"},{"location":"verhistory/#dec-1-2015","text":"added a new modifier '!columLabelStyle' to allow user to customize the column labels for dotplot and heatmap , below is an example:","title":"Dec 1, 2015"},{"location":"verhistory/#nov-30-2015","text":"bug fixes as usual added a new option 'valuesToHide' for modifier !showDataValue of the dot plots; below is an example; see here for more information: values to hide","title":"Nov 30, 2015"},{"location":"verhistory/#april-4-2015","text":"bug fixes as always added a new annotation type, heatmap :","title":"April 4, 2015"},{"location":"verhistory/#march-31-2015","text":"bug fixes (there are always bugs somewhere ... ) added a new annotation type: dot plot ; here is an example:","title":"March 31, 2015"},{"location":"verhistory/#march-24-2015","text":"bug fixes updated the pfam domain api added four more styles for group labels; See here for the documentation. added two more example trees to the 'DEMOS' project to showcase the group labels","title":"March 24, 2015"},{"location":"verhistory/#jan-2-2015","text":"fixed a bug in tree sharing caused by case-sensitive setting of MySQL at the server-end","title":"Jan 2, 2015"},{"location":"verhistory/#dec-15-2014","text":"a major update has just been released, with a new feature that allows users to share trees to others to view, interact and even edit. See here for the documentation. NOTE: this function is still under development; bugs are thus expected. Please send us feature requests, comments and suggestions!!","title":"Dec 15, 2014"},{"location":"verhistory/#dec-15-2014_1","text":"added support for a new type of annotation: Group Labels ; here is an example:","title":"Dec 15, 2014"},{"location":"verhistory/#oct-9-2014","text":"bug fixes","title":"Oct 9, 2014"},{"location":"verhistory/#oct-1-2014","text":"fixed a UI bug that the UI behaves differently between firefox and google chrome.","title":"Oct 1, 2014"},{"location":"verhistory/#sep-28-2014","text":"added support for the display of data values in pie and bar charts; see trees 'yeast duplicates' and 'bars' in the \"DEMOS\" project. pie chart : bar chart :","title":"Sep 28, 2014"},{"location":"verhistory/#sep-23-2014","text":"added a new button \"show /hide lines linking leaf labels and datasets\" to the \"Basic\" tab; mouse over this icon to see larger image for more details.","title":"Sep 23, 2014"},{"location":"verhistory/#july-4-2014","text":"bug fix","title":"July 4, 2014"},{"location":"verhistory/#june-23-2014","text":"added rotate subtree at internal nodes","title":"June 23, 2014"},{"location":"verhistory/#june-20-2014","text":"bug fix: fixed a bug that the tree panel doesn't show properly in Firefox","title":"June 20, 2014"},{"location":"verhistory/#june-18-2014","text":"added support for navigation (beta) added a new modifier 'toroot' for branch colors; see here for examples","title":"June 18, 2014"},{"location":"verhistory/#april-2-2014","text":"now Firefox is officially back!! Enjoy!!","title":"April 2, 2014"},{"location":"verhistory/#march-27-2014","text":"new features: add support for stroke colour and stroke width; see here for more details add a new dataset type : Leaf label decorations","title":"March 27, 2014"},{"location":"verhistory/#sep-11-2013","text":"fix a bug with trees that have bootstrap values but no branch lengths : ((a,b)0.88,(c,d)0.99); new features: (beta) social login: now evolview supports OAuth 2.0, an open standard for authorization; users can login with existing accounts including Facebook, Gmail, Windows Live, Yahoo and many others. See here for more information about OAuth: http://en.wikipedia.org/wiki/OAuth now users can set the fonts of bootstrap or branch length values to italic and change their sizes; all changes will be saved on to the server","title":"Sep 11, 2013"},{"location":"verhistory/#april-18-2013","text":"fix a bug caused by tree like this '((a:1,b):3,(c:1,(d:1,e:3):1):2);' new features: temporary users can save their trees, projects and datasets on our server up to 7 days and the keys for accessing the data are saved in browser cookies (clearing the browser cookies will lose the keys) (Note: each temporary use would have a unique ID, she / he can use it to retrieve their data by emailing it to the server administrator ) when creating a new account, temporary uses can choose to move their data to the newly created account","title":"April 18, 2013"},{"location":"verhistory/#may-22-2012","text":"manuscript accepted for publication on NAR 2012 Web Server issue. Check it out on the publisher's website: http://nar.oxfordjournals.org/content/40/W1/W569","title":"May 22, 2012"},{"location":"verhistory/#build-510-may-15-2012","text":"add visualisation for protein domains add automatic annotation for protein domains using tree leaf label names to query against PFAM database","title":"Build# 510; May 15, 2012"},{"location":"verhistory/#build-500-may-12-2012","text":"fix a bug on parsing the bootstrap scores in newick format fix some usability issues","title":"Build# 500; May 12, 2012"},{"location":"verhistory/#build-450-apr-23-2012","text":"improvement on pie-chars: now user can specify whether to use the summation of a row as the area of a pie, or the radius now each plotmode/ treemode has independent translateX, Y as well as pixal per width values; and all these values will be saved on our server if a user is logged in fix a bug on parsing the bootstrap scores in PhyloXML format","title":"Build# 450; Apr 23, 2012"},{"location":"verhistory/#build-412-feb-14-2012","text":"fix several bugs on submitting datasets to trees; fix a bug on parsing \"legend\"-related information from datasets","title":"Build# 412; Feb 14, 2012"},{"location":"verhistory/#build-400-feb-2-2012","text":"the last active tree will be loaded automatically when sign in; however, if the last active tree is in project \"DEMOS\", no tree will be loaded better compatibility (import/ export) with the following formats: nexus, phyloXML; better support for internal branches from imported trees new download popup panel","title":"Build# 400; Feb 2, 2012"},{"location":"verhistory/#build-380-jan-17-2012","text":"zoom in and out at the mouse pointer fix a bug at parsing trees in PhyloXML format add statistics on users' visits per month (click the EvolView logo at the login page to view the statistics) add more interactivity with the tree branches","title":"Build# 380; Jan 17, 2012"},{"location":"verhistory/#build-200-milestone-1-dec-28-2012","text":"first version available online manuscript submitted to NAR web server issue 2012","title":"Build# 200; milestone 1; Dec 28, 2012"},{"location":"dataset/","text":"Annotation Lines with the first character as '#' are annotations. Annotations are usually at the beginning of a dataset; however if desired, annotation lines can be placed anywhere in a dataset. Modifiers Pairs usually start with '!', and are separated by a single 'tab' character; KA pairs are used to specify or change certain default settings / behavior of a dataset, for example: to set the title or legend to change the width, height or opacity of the dataset in some cases, the attribute part of a KA-pair is optional. Here are a list of KA-pairs common to all datasets; dataset-specific KA-pairs will be introduced later. Key (case insensitive) Value Description !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendStyle or !Style rect or circle or star shapes to be plotted before the legend texts; default = rect !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ; note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset !PlotWidth integer > 0 pixel width of the dataset on canvas Data Data are usually tab-delimited three-column texts; the first two columns are often mandatory, the third one is often optional. first column: the location The first column dictates where the data to be plotted. It usually contains the name of a leaf node, or two leaf names separated by a ','. one single leaf name dictates that the data will be plotted on / next to / under the leaf or the branch connecting directly to the leaf node two leaf names, on the hand, dictates that the data will be displayed on the branch representing the last common ancestor of the two leaf nodes For example: chicken mouse,human second column: data to be displayed in bar plots, the data are the numbers representing the widths of the bars. see more examples in each of the datasets third column: optional commands to change the default behavior of the input see the examples in each of the datasets. Legends","title":"Overview"},{"location":"dataset/#annotation","text":"Lines with the first character as '#' are annotations. Annotations are usually at the beginning of a dataset; however if desired, annotation lines can be placed anywhere in a dataset.","title":"Annotation"},{"location":"dataset/#modifiers","text":"Pairs usually start with '!', and are separated by a single 'tab' character; KA pairs are used to specify or change certain default settings / behavior of a dataset, for example: to set the title or legend to change the width, height or opacity of the dataset in some cases, the attribute part of a KA-pair is optional. Here are a list of KA-pairs common to all datasets; dataset-specific KA-pairs will be introduced later. Key (case insensitive) Value Description !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendStyle or !Style rect or circle or star shapes to be plotted before the legend texts; default = rect !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ; note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset !PlotWidth integer > 0 pixel width of the dataset on canvas","title":"Modifiers"},{"location":"dataset/#data","text":"Data are usually tab-delimited three-column texts; the first two columns are often mandatory, the third one is often optional.","title":"Data"},{"location":"dataset/#first-column-the-location","text":"The first column dictates where the data to be plotted. It usually contains the name of a leaf node, or two leaf names separated by a ','. one single leaf name dictates that the data will be plotted on / next to / under the leaf or the branch connecting directly to the leaf node two leaf names, on the hand, dictates that the data will be displayed on the branch representing the last common ancestor of the two leaf nodes For example: chicken mouse,human","title":"first column: the location"},{"location":"dataset/#second-column-data-to-be-displayed","text":"in bar plots, the data are the numbers representing the widths of the bars. see more examples in each of the datasets","title":"second column: data to be displayed"},{"location":"dataset/#third-column-optional-commands-to-change-the-default-behavior-of-the-input","text":"see the examples in each of the datasets.","title":"third column: optional commands to change the default behavior of the input"},{"location":"dataset/#legends","text":"","title":"Legends"},{"location":"dataset/bars/","text":"Tip notes on preparing your dataset!! please always use TAB to separate the modifiers and their values. some modifiers should not be used in combination, e.g. !itemHeightPX and !itemHeightPCT. However if both are used (accidentally), only !itemHeightPX be used. if a modifier is used (accidentally) multiple tiles, only the last one will be used. the \"data\" part of this dataset can only contain two columns of tab-delimited texts; the third column, if presents, will be ignored please also always use TAB to separate the columns in the data section. Related modifiers (specific to bar plots) Key (case insensitive) Value Description !align or !alignIndividualColumn none align individual columns if the bars are stacked !Fanplot or ! Fan none works only with circular tree; see examples bellow new: !showdataValue show data values; see here for more details new: !RowDataReorder no, asc, desc reorder the display order of stacked bars according to their corresponding values. default no; asc: in ascending order; desc: in descending order; see here for more details Other usefull modifiers Key (case insensitive) Value Description !PlotWidth integer > 0 pixel width of the dataset on canvas !itemHeightPX or !barHeightPX integer > 0 pixel height of each bar; see examples bellow !itemHeightPCT or !barHeightPCT float number between 1 to 100 percentage of available height taken by each bar; see examples bellow !grid none show a background grid !gridlabel or !axis none show the values corresponding to the grid lines Tree (A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Example Example 1 ##barplots !groups 2009,2010,2011 !colors lightblue,yellow,green !showLegends 1 !plotwidth 100 !style rect !title an example of bar plots A 2,3,1 B 10,20,1 C 8,9,2 D 20,3,4 Example Example 2 To have the grid for bar plots: ##barplots ## to turn grid on !grid !groups 2009,2010,2011 !colors lightblue,yellow,green !showLegends 1 !plotwidth 100 !style rect !title an example of bar plots A 2,3,1 B 10,20,1 C 8,9,2 D 20,3,4 Example Example 3 To align the bar plots: ##barplots ## to turn grid on !grid !align !groups 2009,2010,2011 !colors lightblue,yellow,green !showLegends 1 !plotwidth 100 !style rect !title an example of bar plots A 2,3,1 B 10,20,1 C 8,9,2 D 20,3,4 Example Example 4 To activate fan plot of the bars in circular mode: ##barplots ## to turn grid on !grid !align !Fanplot !groups 2009,2010,2011 !colors lightblue,yellow,green !showLegends 1 !plotwidth 100 !style rect !title an example of bar plots A 2,3,1 B 10,20,1 C 8,9,2 D 20,3,4 Height modfiers heights of individual bars By default, the height of an individual bar is 10 pixel, it can be changed using two modifiers: !itemHeightPX !itemHeightPCT !itemHeightPX specifies the absolute pixel height for individual bars; its value ranges from >0 to 40. Here are some examples: Example Example 1 !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 ## -- set height for individual bars -- ## -- default value is 10 -- !itemHeightPX 10 A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20D 20,5,20 Example Example 2 !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 ## -- if the pixel height is larger than the available space, ## -- which is 30 pixel in this case, ## -- only available space will be taken by the bars (30 pixel) !itemHeightPX 35 A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 Example Example 3 !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 ## -- now we dont mention any height -- A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 Show data values Now users can use modifier '!showdataValue' to enable the display the bar values. Example Example 1 !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title Example of barplots 4 !plotwidth 200 !itemHeightPCT 80 !grid !axis !showLegends 0 ## -- here you go the new modifier -- ## -- please use 'TAB' to separate this modifier with its value -- !showdataValue show=1,fontsize=12,fontitalic=1,textalign=end A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 The 'value' part of the modifier !showdataValue can be any combination of the following, separated by a \",\": key-value alternative value description show = 1 0 show or hide data values; optional; the data values will be shown if omitted fontsize=12 any integer set font size; optional; default = 10 fontcolor=red any value color name set text color; optional; default = black fontitalic=1 0 set font italic; optional; default = 0 textalign=middle start or end set text align; optional; default = middle; see the following examples Example Example 2 !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title Example of barplots 4 !plotwidth 200 !itemHeightPCT 80 !grid !axis !showLegends 0 !showdataValue show=1,fontsize=12,fontitalic=1,textalign=end,fontcolor=white A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 Example Example 3 align the values to the end of the bars: !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title Example of barplots 4 !plotwidth 200 !itemHeightPCT 80 !grid !axis !showLegends 0 !showdataValue show=1,fontsize=12,fontitalic=1,textalign=end,fontcolor=white A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 Example Example 4 align the values to the start of the bars: !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title Example of barplots 4 !plotwidth 200 !itemHeightPCT 80 !grid !axis !showLegends 0 !showdataValue show=1,fontsize=12,fontitalic=1,textalign=start,fontcolor=white A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 Change display order of stacked bars Users now can use modifier '!RowDataReorder' to change the display order of the stacked bars according to their corresponding values in either ascending or descending orders. Example Example 1 barplot with row data re-ordered in ascending order. !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title barplot with data shown !fan !itemHeightPCT 80 !plotWidth 150 ## -- new modifier here!!! !RowDataReorder asc ### last modified: sep 28, 2014 !showData !showDataFontSize 10 !showDataFontColor white !showDataTextAlign start A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 Example Example 2 barplot with row data re-ordered in descending order. !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title barplot with data shown !fan !itemHeightPCT 80 !plotWidth 150 ## -- new modifier here!!! !RowDataReorder desc ### last modified: sep 28, 2014 !showData !showDataFontSize 10 !showDataFontColor white !showDataTextAlign start A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20","title":"Bar chart"},{"location":"dataset/bars/#related-modifiers","text":"(specific to bar plots) Key (case insensitive) Value Description !align or !alignIndividualColumn none align individual columns if the bars are stacked !Fanplot or ! Fan none works only with circular tree; see examples bellow new: !showdataValue show data values; see here for more details new: !RowDataReorder no, asc, desc reorder the display order of stacked bars according to their corresponding values. default no; asc: in ascending order; desc: in descending order; see here for more details","title":"Related modifiers"},{"location":"dataset/bars/#other-usefull-modifiers","text":"Key (case insensitive) Value Description !PlotWidth integer > 0 pixel width of the dataset on canvas !itemHeightPX or !barHeightPX integer > 0 pixel height of each bar; see examples bellow !itemHeightPCT or !barHeightPCT float number between 1 to 100 percentage of available height taken by each bar; see examples bellow !grid none show a background grid !gridlabel or !axis none show the values corresponding to the grid lines","title":"Other usefull modifiers"},{"location":"dataset/bars/#tree","text":"(A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Example","title":"Tree"},{"location":"dataset/bars/#example-1","text":"##barplots !groups 2009,2010,2011 !colors lightblue,yellow,green !showLegends 1 !plotwidth 100 !style rect !title an example of bar plots A 2,3,1 B 10,20,1 C 8,9,2 D 20,3,4 Example","title":"Example 1"},{"location":"dataset/bars/#example-2","text":"To have the grid for bar plots: ##barplots ## to turn grid on !grid !groups 2009,2010,2011 !colors lightblue,yellow,green !showLegends 1 !plotwidth 100 !style rect !title an example of bar plots A 2,3,1 B 10,20,1 C 8,9,2 D 20,3,4 Example","title":"Example 2"},{"location":"dataset/bars/#example-3","text":"To align the bar plots: ##barplots ## to turn grid on !grid !align !groups 2009,2010,2011 !colors lightblue,yellow,green !showLegends 1 !plotwidth 100 !style rect !title an example of bar plots A 2,3,1 B 10,20,1 C 8,9,2 D 20,3,4 Example","title":"Example 3"},{"location":"dataset/bars/#example-4","text":"To activate fan plot of the bars in circular mode: ##barplots ## to turn grid on !grid !align !Fanplot !groups 2009,2010,2011 !colors lightblue,yellow,green !showLegends 1 !plotwidth 100 !style rect !title an example of bar plots A 2,3,1 B 10,20,1 C 8,9,2 D 20,3,4","title":"Example 4"},{"location":"dataset/bars/#height-modfiers","text":"heights of individual bars By default, the height of an individual bar is 10 pixel, it can be changed using two modifiers: !itemHeightPX !itemHeightPCT !itemHeightPX specifies the absolute pixel height for individual bars; its value ranges from >0 to 40. Here are some examples: Example","title":"Height modfiers"},{"location":"dataset/bars/#example-1_1","text":"!groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 ## -- set height for individual bars -- ## -- default value is 10 -- !itemHeightPX 10 A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20D 20,5,20 Example","title":"Example 1"},{"location":"dataset/bars/#example-2_1","text":"!groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 ## -- if the pixel height is larger than the available space, ## -- which is 30 pixel in this case, ## -- only available space will be taken by the bars (30 pixel) !itemHeightPX 35 A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 Example","title":"Example 2"},{"location":"dataset/bars/#example-3_1","text":"!groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 ## -- now we dont mention any height -- A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20","title":"Example 3"},{"location":"dataset/bars/#show-data-values","text":"Now users can use modifier '!showdataValue' to enable the display the bar values. Example","title":"Show data values"},{"location":"dataset/bars/#example-1_2","text":"!groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title Example of barplots 4 !plotwidth 200 !itemHeightPCT 80 !grid !axis !showLegends 0 ## -- here you go the new modifier -- ## -- please use 'TAB' to separate this modifier with its value -- !showdataValue show=1,fontsize=12,fontitalic=1,textalign=end A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 The 'value' part of the modifier !showdataValue can be any combination of the following, separated by a \",\": key-value alternative value description show = 1 0 show or hide data values; optional; the data values will be shown if omitted fontsize=12 any integer set font size; optional; default = 10 fontcolor=red any value color name set text color; optional; default = black fontitalic=1 0 set font italic; optional; default = 0 textalign=middle start or end set text align; optional; default = middle; see the following examples Example","title":"Example 1"},{"location":"dataset/bars/#example-2_2","text":"!groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title Example of barplots 4 !plotwidth 200 !itemHeightPCT 80 !grid !axis !showLegends 0 !showdataValue show=1,fontsize=12,fontitalic=1,textalign=end,fontcolor=white A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 Example","title":"Example 2"},{"location":"dataset/bars/#example-3_2","text":"align the values to the end of the bars: !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title Example of barplots 4 !plotwidth 200 !itemHeightPCT 80 !grid !axis !showLegends 0 !showdataValue show=1,fontsize=12,fontitalic=1,textalign=end,fontcolor=white A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 Example","title":"Example 3"},{"location":"dataset/bars/#example-4_1","text":"align the values to the start of the bars: !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title Example of barplots 4 !plotwidth 200 !itemHeightPCT 80 !grid !axis !showLegends 0 !showdataValue show=1,fontsize=12,fontitalic=1,textalign=start,fontcolor=white A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20","title":"Example 4"},{"location":"dataset/bars/#change-display-order-of-stacked-bars","text":"Users now can use modifier '!RowDataReorder' to change the display order of the stacked bars according to their corresponding values in either ascending or descending orders. Example","title":"Change display order of stacked bars"},{"location":"dataset/bars/#example-1_3","text":"barplot with row data re-ordered in ascending order. !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title barplot with data shown !fan !itemHeightPCT 80 !plotWidth 150 ## -- new modifier here!!! !RowDataReorder asc ### last modified: sep 28, 2014 !showData !showDataFontSize 10 !showDataFontColor white !showDataTextAlign start A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20 Example","title":"Example 1"},{"location":"dataset/bars/#example-2_3","text":"barplot with row data re-ordered in descending order. !groups group 1,group 2,group 3 !colors #028482,#7ABA7A,#B76EB8 !title barplot with data shown !fan !itemHeightPCT 80 !plotWidth 150 ## -- new modifier here!!! !RowDataReorder desc ### last modified: sep 28, 2014 !showData !showDataFontSize 10 !showDataFontColor white !showDataTextAlign start A 8,13,5 B 10,20,7 C 8,9,7 D 20,5,20","title":"Example 2"},{"location":"dataset/bootstrapvalstyle/","text":"Overview Bootstrap value style allows users to tweak the displaying style of bootstrap values. Here is an example. Tree: (A:0.1,(B:0.2,(C:0.3,(D:0.4,E:0.5)40:0.6)80:0.05)100:0.1)90:0.43; simple dataset ##bootstrap value styles !bootstrapValueStyle show=1,style=circle,size=10,place=1,color=red NOTE: in order to show bootstrap values, the tree has to have bootstrap values, and the \"Show/Hide bootstrap scores\" button on the toolbar has to be activated: Supported modifiers In addition to the universal modifiers , an additional 'modifier' is supported: !bootstrapValueStyles or !bootstrapValueStyle (case insensitive) The value of this modifier can be any of the following options, individually or in combination: key alternative value description show=1 0 show or hide all bootstrap values; optional; default = 1 style=numeric any of the following:rect,circle,star,check,triangle display bootstrap values as numbers or shapes; optional; default = numeric size=10 any integer >= 0 set font size of the bootstrap values, or diameter of the shapes; optional, default = 10 color=red or color=red:blue any valid html color name, e.g. green, darkblue ..., or hex html color, e.g. #FF00FF set fill and optional stroke color for the bootstrap values ; optional, default = black; see examples below for detail strokewidth=1 any integer >=1 set strokewidth for bootstrap values, valid only when the strokecolor is set; optional, default = 1; see examples below for detail place=1 2 or 3 or 4 set the place where the bootstrap values to be displayed ; optional, default = 1; see examples below for detail Tip notes on preparing your datasets!! please always use TAB to separate the modifiers and their values. if a modifier is used (accidentally) multiple tiles, only the last one will be used. the \"data\" part of this dataset can only contain two columns of tab-delimited texts; the third column, if presents, will be ignored please also always use TAB to separate the columns in the data section. Data Each line of data should consist of two parts, separated by a 'TAB' character. the first part defines the range of the bootstrap values; it could be either a single numeric value, or two values separated by a ',' or ':'. For example: 80 90,100 70:80 please note that the values are inclusive. the second part sets the display styles for bootstrap values in the range defined in the first part. The 2nd part should be written similarly to the value of '!bootstrapValueStyles' . For example: show=0,color=green,style=circle,size=20 color=darkgreen style=rect,size=20 are all valid. NOTE: unlike other annotation datasets, the data part of 'Bootstrap Value Styles' is optional; when omitted, the global options defined by modifier '!bootstrapValueStyle' will be applied to all bootstrap values the data part, when available, will override the global options. Example Example 1 # bootstrap value style ## no data, global options will be applied to all bootstrap values !bootstrapValueStyle show=1,style=circle,size=10,place=1,color=red Example Example 2 ## hide bootstrap values less than 75, and apply colors according to bootstrap values !bootstrapValueStyle show=1,style=numeric,color=red 0,75 show=0 80,90 color=red,size=12 100,120 color=darkred,size=14 Example Example 3 ## plot bootstrap values as circles, # and use different colors according to the corresponding values !bootstrapValueStyle show=1,style=circle 40 color=darkgrey 80 color=gold 100 color=red Example Example 4 ## use stroke color and stroke width !bootstrapValueStyle show=1,style=circle 40 color=darkgrey 80 color=white:gold,strokewidth=3 100 color=white:red,strokewidth=2 Example Example 5 ## place=2 !bootstrapValueStyle show=1,style=circle,place=2 40 color=darkgrey 80 color=white:gold,strokewidth=3 100 color=white:red,strokewidth=2 Example Example 6 ## place=3 !bootstrapValueStyle show=1,style=circle,place=3,strokewidth=3 40 color=darkgrey 60,80 color=white:gold 81,100 color=white:red Example Example 7 ## place=4 !bootstrapValueStyle show=1,style=numeric,place=4,color=darkred Example Example 8 ## a mixture of styles !bootstrapValueStyle show=1,style=circle,size=10,place=1,color=red,strokewidth=4 40 color=white:darkgrey 80 color=red:blue,style=rect,strokewidth=3 100 show=1,style=numeric Example Example 9 ## with legend; !Title bootstrap !Groups <=40,41~80,81~100 !Colors grey,gold,red !LegendStyle circle !bootstrapValueStyle show=1,style=circle 40 color=darkgrey 41,80 color=gold 81,100 color=red Show multiple sets of bootstrap values Evolview is starting to support multiple sets of bootstraps (meaning this functionality is still under-development). To do so users need to prepare the input tree in a very specific format, and a special \"bootstrap style\" dataset. Here is an example: the input tree: (A:0.1,(B:0.2,(C:0.3,(D:0.4,E:0.5)40/0.4/0.88:0.6)80/1/0.99:0.05)100/1/100:0.1)90/1/0.99:0.43; note there are three sets of bootstrap values, they are written as '80/1/0.99'. Dataset: !bootstrapValueStyle show=1,style=multiple,size=10,color=red|green|blue please note here: style= multiple 'color' has three color names, separated by '|'; if the number of colors is less than three (e.g. color=red|green), the colors will be cycled. for example: ## there are three sets of bootstrap values, but only two colors: !bootstrapValueStyle show=1,style=multiple,size=10,color=red|green of course the font size can be changed: !bootstrapValueStyle show=1,style=multiple,size=14,color=red|green|darkblue","title":"Bootstrapvalue style"},{"location":"dataset/bootstrapvalstyle/#overview","text":"Bootstrap value style allows users to tweak the displaying style of bootstrap values. Here is an example.","title":"Overview"},{"location":"dataset/bootstrapvalstyle/#tree","text":"(A:0.1,(B:0.2,(C:0.3,(D:0.4,E:0.5)40:0.6)80:0.05)100:0.1)90:0.43; simple dataset ##bootstrap value styles !bootstrapValueStyle show=1,style=circle,size=10,place=1,color=red NOTE: in order to show bootstrap values, the tree has to have bootstrap values, and the \"Show/Hide bootstrap scores\" button on the toolbar has to be activated:","title":"Tree:"},{"location":"dataset/bootstrapvalstyle/#supported-modifiers","text":"In addition to the universal modifiers , an additional 'modifier' is supported: !bootstrapValueStyles or !bootstrapValueStyle (case insensitive) The value of this modifier can be any of the following options, individually or in combination: key alternative value description show=1 0 show or hide all bootstrap values; optional; default = 1 style=numeric any of the following:rect,circle,star,check,triangle display bootstrap values as numbers or shapes; optional; default = numeric size=10 any integer >= 0 set font size of the bootstrap values, or diameter of the shapes; optional, default = 10 color=red or color=red:blue any valid html color name, e.g. green, darkblue ..., or hex html color, e.g. #FF00FF set fill and optional stroke color for the bootstrap values ; optional, default = black; see examples below for detail strokewidth=1 any integer >=1 set strokewidth for bootstrap values, valid only when the strokecolor is set; optional, default = 1; see examples below for detail place=1 2 or 3 or 4 set the place where the bootstrap values to be displayed ; optional, default = 1; see examples below for detail Tip notes on preparing your datasets!! please always use TAB to separate the modifiers and their values. if a modifier is used (accidentally) multiple tiles, only the last one will be used. the \"data\" part of this dataset can only contain two columns of tab-delimited texts; the third column, if presents, will be ignored please also always use TAB to separate the columns in the data section.","title":"Supported modifiers"},{"location":"dataset/bootstrapvalstyle/#data","text":"Each line of data should consist of two parts, separated by a 'TAB' character. the first part defines the range of the bootstrap values; it could be either a single numeric value, or two values separated by a ',' or ':'. For example: 80 90,100 70:80 please note that the values are inclusive. the second part sets the display styles for bootstrap values in the range defined in the first part. The 2nd part should be written similarly to the value of '!bootstrapValueStyles' . For example: show=0,color=green,style=circle,size=20 color=darkgreen style=rect,size=20 are all valid. NOTE: unlike other annotation datasets, the data part of 'Bootstrap Value Styles' is optional; when omitted, the global options defined by modifier '!bootstrapValueStyle' will be applied to all bootstrap values the data part, when available, will override the global options. Example","title":"Data"},{"location":"dataset/bootstrapvalstyle/#example-1","text":"# bootstrap value style ## no data, global options will be applied to all bootstrap values !bootstrapValueStyle show=1,style=circle,size=10,place=1,color=red Example","title":"Example 1"},{"location":"dataset/bootstrapvalstyle/#example-2","text":"## hide bootstrap values less than 75, and apply colors according to bootstrap values !bootstrapValueStyle show=1,style=numeric,color=red 0,75 show=0 80,90 color=red,size=12 100,120 color=darkred,size=14 Example","title":"Example 2"},{"location":"dataset/bootstrapvalstyle/#example-3","text":"## plot bootstrap values as circles, # and use different colors according to the corresponding values !bootstrapValueStyle show=1,style=circle 40 color=darkgrey 80 color=gold 100 color=red Example","title":"Example 3"},{"location":"dataset/bootstrapvalstyle/#example-4","text":"## use stroke color and stroke width !bootstrapValueStyle show=1,style=circle 40 color=darkgrey 80 color=white:gold,strokewidth=3 100 color=white:red,strokewidth=2 Example","title":"Example 4"},{"location":"dataset/bootstrapvalstyle/#example-5","text":"## place=2 !bootstrapValueStyle show=1,style=circle,place=2 40 color=darkgrey 80 color=white:gold,strokewidth=3 100 color=white:red,strokewidth=2 Example","title":"Example 5"},{"location":"dataset/bootstrapvalstyle/#example-6","text":"## place=3 !bootstrapValueStyle show=1,style=circle,place=3,strokewidth=3 40 color=darkgrey 60,80 color=white:gold 81,100 color=white:red Example","title":"Example 6"},{"location":"dataset/bootstrapvalstyle/#example-7","text":"## place=4 !bootstrapValueStyle show=1,style=numeric,place=4,color=darkred Example","title":"Example 7"},{"location":"dataset/bootstrapvalstyle/#example-8","text":"## a mixture of styles !bootstrapValueStyle show=1,style=circle,size=10,place=1,color=red,strokewidth=4 40 color=white:darkgrey 80 color=red:blue,style=rect,strokewidth=3 100 show=1,style=numeric Example","title":"Example 8"},{"location":"dataset/bootstrapvalstyle/#example-9","text":"## with legend; !Title bootstrap !Groups <=40,41~80,81~100 !Colors grey,gold,red !LegendStyle circle !bootstrapValueStyle show=1,style=circle 40 color=darkgrey 41,80 color=gold 81,100 color=red","title":"Example 9"},{"location":"dataset/bootstrapvalstyle/#show-multiple-sets-of-bootstrap-values","text":"Evolview is starting to support multiple sets of bootstraps (meaning this functionality is still under-development). To do so users need to prepare the input tree in a very specific format, and a special \"bootstrap style\" dataset. Here is an example: the input tree: (A:0.1,(B:0.2,(C:0.3,(D:0.4,E:0.5)40/0.4/0.88:0.6)80/1/0.99:0.05)100/1/100:0.1)90/1/0.99:0.43; note there are three sets of bootstrap values, they are written as '80/1/0.99'. Dataset: !bootstrapValueStyle show=1,style=multiple,size=10,color=red|green|blue please note here: style= multiple 'color' has three color names, separated by '|'; if the number of colors is less than three (e.g. color=red|green), the colors will be cycled. for example: ## there are three sets of bootstrap values, but only two colors: !bootstrapValueStyle show=1,style=multiple,size=10,color=red|green of course the font size can be changed: !bootstrapValueStyle show=1,style=multiple,size=14,color=red|green|darkblue","title":"Show multiple sets of bootstrap values"},{"location":"dataset/branchcolors/","text":"Overview Branch colors will be applied to tree branches. Similar to pie charts, multiple datasets for branch colors can be uploaded to a tree, but only one can be shown at a time. Tip notes on preparing your dataset!!Data are usually tab-delimited three-column texts, with the third column optional first column: the location the first column dictates where the data to be plotted. It usually contains the name of a leaf node, or two leaf names separated by a ','. one single leaf name dictates that the data will be plotted on / next to / under the leaf or the branch connecting directly to the leaf node two leaf names, on the other hand, dictates that the data will be displayed on the branch representing the last common ancestor of the two leaf nodes Tree (chicken,((mouse,rat),(chimp,human))); For example: 1.first column: the location the first column dictates where the data to be plotted chicken mouse,human 2.second column: color to be applied: chicken green mouse,human blue 3.third column: optional commands to change the default behavior of current line By default, the color will only apply to the specified branch; for example: ## branch color/ styles human red By adding a third column, the default behavior can be changed. Here is a list of choices of this column: Option (case insensitive) Description ad apply color to all descendants prefix apply color to all branches connecting leaf nodes whose name starts with the string specified by the first column suffix apply color to all branches connecting leaf nodes whose name ends with the string specified by the first column anywhere apply color to all branches connecting leaf nodes whose name contains the string specified by the first column toroot apply color to all branches connecting the leaf node and parent nodes all the way to the root Example Example 1 ## branch color human,mouse red ad Example Example 2 ch red prefix Example Example 3 n red prefix Example Example 4 ##barplots ## branch color from specified leaf node to the root human red toroot","title":"Branch colors"},{"location":"dataset/branchcolors/#overview","text":"Branch colors will be applied to tree branches. Similar to pie charts, multiple datasets for branch colors can be uploaded to a tree, but only one can be shown at a time. Tip notes on preparing your dataset!!Data are usually tab-delimited three-column texts, with the third column optional first column: the location the first column dictates where the data to be plotted. It usually contains the name of a leaf node, or two leaf names separated by a ','. one single leaf name dictates that the data will be plotted on / next to / under the leaf or the branch connecting directly to the leaf node two leaf names, on the other hand, dictates that the data will be displayed on the branch representing the last common ancestor of the two leaf nodes","title":"Overview"},{"location":"dataset/branchcolors/#tree","text":"(chicken,((mouse,rat),(chimp,human))); For example: 1.first column: the location the first column dictates where the data to be plotted chicken mouse,human 2.second column: color to be applied: chicken green mouse,human blue 3.third column: optional commands to change the default behavior of current line By default, the color will only apply to the specified branch; for example: ## branch color/ styles human red By adding a third column, the default behavior can be changed. Here is a list of choices of this column: Option (case insensitive) Description ad apply color to all descendants prefix apply color to all branches connecting leaf nodes whose name starts with the string specified by the first column suffix apply color to all branches connecting leaf nodes whose name ends with the string specified by the first column anywhere apply color to all branches connecting leaf nodes whose name contains the string specified by the first column toroot apply color to all branches connecting the leaf node and parent nodes all the way to the root Example","title":"Tree"},{"location":"dataset/branchcolors/#example-1","text":"## branch color human,mouse red ad Example","title":"Example 1"},{"location":"dataset/branchcolors/#example-2","text":"ch red prefix Example","title":"Example 2"},{"location":"dataset/branchcolors/#example-3","text":"n red prefix Example","title":"Example 3"},{"location":"dataset/branchcolors/#example-4","text":"##barplots ## branch color from specified leaf node to the root human red toroot","title":"Example 4"},{"location":"dataset/branchlabel/","text":"Overview Branch label styles provide different ways to highlight and group the tree leaf branches.The annotation properties can be provided in two formats: !groups_class Provides the annotation details for a specified group name or id. Leaf/Branch based annotation details can provided for each leaf along with leaf Name. Here is an quick example Please consult our examples trees 'Branch Label style 1', 'Branch Label style 2' in the DEMOS project. Related modifiers Supported Key-Value pairs Key (case insensitive) Value Description text=group name to be displayed any textual/string content Provide a label name to be displayed for the annotation group. id=some_unique_name any textual/string content without spaces Mandatory for using with !groups_class to represent the group annotation definitions. color=pink any color name or valid html hex colors such as #FF0000 default color for group lines and labels; default = black linewidth=2 any integer >= 0 set width of the group line; default = 1; if set to 0, the group line is hidden; valid only when style=1; see examples below linestyle=dashed if set, a dotted group line will be plotted; default is regular line; valid only when style=1; see examples below fontcolor=black any color name or valid html hex colors such as #FF0000 default color of group labels; default = black; if omitted, uses 'color' fontsize=12 any integer set font size; optional; default = 10 fontitalic=1 0 set font italic; optional; default = 0 textalign=middle start or end set text align; optional; default = middle; see the following examples bkcolor=colorname any color name or valid html hex colors such as #FFFF00 default color for group background; default = lightblue Data Each line of the Data section usually consists two parts, separated by a TAB. The first part defines to where the group label will be placed, it can be either: names of two leaf labels, separated by a ',', or a name of a leaf label. The second part specifics the 'label' (required) and either provide group_class id or settings for this label such as font color, size. See below: Supported Shapes triangle circle rect star check Visualization styles Tree (A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Style-1 Style 1: branch_label(default style) (copy & paste the following contents to Evolview to view the visualisation results): !groups bad,good !colors red,green !style branch_label ##class def !groups_class id=T1,text=bad,textalign=middle,shape=rect,bkcolor=red,color=black,fontsize=8 !groups_class id=T2,text=good,textalign=middle,shape=rect,bkcolor=green,color=black,fontsize=8 ##data A T1 B T2 C T2 D T1 Style-1 Style 1: branch_label(default style) with diffrent shape modifier ##class def !groups_class id=T1,text=bad,textalign=middle,shape=circle,bkcolor=red,color=black !groups_class id=T2,text=good,textalign=start,shape=circle,bkcolor=green,color=black !groups_class id=T3,text=sooo,textalign=end,shape=circle,bkcolor=yellow,color=black ##data A T1 B T2 C,D T3","title":"Branch label"},{"location":"dataset/branchlabel/#overview","text":"Branch label styles provide different ways to highlight and group the tree leaf branches.The annotation properties can be provided in two formats: !groups_class Provides the annotation details for a specified group name or id. Leaf/Branch based annotation details can provided for each leaf along with leaf Name. Here is an quick example Please consult our examples trees 'Branch Label style 1', 'Branch Label style 2' in the DEMOS project.","title":"Overview"},{"location":"dataset/branchlabel/#related-modifiers","text":"Supported Key-Value pairs Key (case insensitive) Value Description text=group name to be displayed any textual/string content Provide a label name to be displayed for the annotation group. id=some_unique_name any textual/string content without spaces Mandatory for using with !groups_class to represent the group annotation definitions. color=pink any color name or valid html hex colors such as #FF0000 default color for group lines and labels; default = black linewidth=2 any integer >= 0 set width of the group line; default = 1; if set to 0, the group line is hidden; valid only when style=1; see examples below linestyle=dashed if set, a dotted group line will be plotted; default is regular line; valid only when style=1; see examples below fontcolor=black any color name or valid html hex colors such as #FF0000 default color of group labels; default = black; if omitted, uses 'color' fontsize=12 any integer set font size; optional; default = 10 fontitalic=1 0 set font italic; optional; default = 0 textalign=middle start or end set text align; optional; default = middle; see the following examples bkcolor=colorname any color name or valid html hex colors such as #FFFF00 default color for group background; default = lightblue","title":"Related modifiers"},{"location":"dataset/branchlabel/#data","text":"Each line of the Data section usually consists two parts, separated by a TAB. The first part defines to where the group label will be placed, it can be either: names of two leaf labels, separated by a ',', or a name of a leaf label. The second part specifics the 'label' (required) and either provide group_class id or settings for this label such as font color, size. See below: Supported Shapes triangle circle rect star check","title":"Data"},{"location":"dataset/branchlabel/#visualization-styles","text":"","title":"Visualization styles"},{"location":"dataset/branchlabel/#tree","text":"(A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Style-1","title":"Tree"},{"location":"dataset/branchlabel/#style-1-branch_labeldefault-style","text":"(copy & paste the following contents to Evolview to view the visualisation results): !groups bad,good !colors red,green !style branch_label ##class def !groups_class id=T1,text=bad,textalign=middle,shape=rect,bkcolor=red,color=black,fontsize=8 !groups_class id=T2,text=good,textalign=middle,shape=rect,bkcolor=green,color=black,fontsize=8 ##data A T1 B T2 C T2 D T1 Style-1","title":"Style 1: branch_label(default style)"},{"location":"dataset/branchlabel/#style-1-branch_labeldefault-style-with-diffrent-shape-modifier","text":"##class def !groups_class id=T1,text=bad,textalign=middle,shape=circle,bkcolor=red,color=black !groups_class id=T2,text=good,textalign=start,shape=circle,bkcolor=green,color=black !groups_class id=T3,text=sooo,textalign=end,shape=circle,bkcolor=yellow,color=black ##data A T1 B T2 C,D T3","title":"Style 1: branch_label(default style) with diffrent shape modifier"},{"location":"dataset/branchmarker/","text":"Overview Branch marker styles provide different ways to show the information using inner branches.The annotation properties can be provided in two formats: !groups_class :Provides the annotation details for a specified group name or id. Leaf/Branch based annotation details can provided for each leaf along with leaf Name. Here is an quick example Related modifiers Supported Key-Value pairs Key (case insensitive) Value Description text=group name to be displayed any textual/string content Provide a label name to be displayed for the annotation group. id=some_unique_name any textual/string content without spaces Mandatory for using with !groups_class to represent the group annotation definitions. shape=rect provide the shape The shapes can either be circle,rect,star,triangle,ellipse,check width=20 provide the width of the shape(Mandatory) default width is set to be 20px. set the width and height as same for perfect positioning of the shape. height=20 provide the height of the shape default height is set to be 20px. set the width and height as same for perfect positioning of the shape. bkcolor=colorname any color name or valid html hex colors such as #FFFF00 default color for group background; valid only when style = 2~5; default = lightblue fillbg=1 set the value either 1 or 0. defines whether the shape background should be transparent or filled; default = lightblue color=pink any color name or valid html hex colors such as #FF0000 default color for group lines and labels; default = black linewidth=2 any integer >= 0 set width of the group line; default = 1; if set to 0, the group line is hidden; see examples below dashline=1 if set, a dotted group line will be plotted; default is regular line; see examples below Data Each line of the Data section usually consists two parts, separated by a TAB . The first part defines to where the group label will be placed, provide the inner branch name or provide all the leaf label names of a inner branch seperated by \",\". To find the inner branch name, go to the tree and point the mouse on the inner branch.The tooltip will show the inner branch name. The second part specifics the 'label' (required) and either provide group_class id or settings for this label such as font color, size. Supported Shapes triangle circle rect star check Visualization styles Tree (A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Example Example 1 !groups T1,T2 !Colors red,green !legendShapes star,circle ##class def !groups_class id=T1,bkcolor=red,color=black,shape=star,width=20,height=15 !groups_class id=T2,bkcolor=green,color=black,shape=circle,width=20,height=15 ##data INT2 T1 INT3 T2 Example Example 2 !groups T1,T2 !Colors red,green !legendShapes star,star ##class def !groups_class id=T1,bkcolor=red,color=black,shape=star,width=20,height=15 !groups_class id=T2,bkcolor=green,color=black,shape=star,width=15,height=15 ##data INT2 T1 INT3 T2 Example Example 3 In this example we used different shapes and selected the inner branch using the branch leaf labels. !groups T1,T2 !Colors red,green !legendShapes cross,check ##class def !groups_class id=T1,bkcolor=red,color=black,shape=cross,width=20,height=20 !groups_class id=T2,bkcolor=green,color=black,shape=check,width=15,height=15 ##data INT2 T1 C,D T2","title":"Branch marker"},{"location":"dataset/branchmarker/#overview","text":"Branch marker styles provide different ways to show the information using inner branches.The annotation properties can be provided in two formats: !groups_class :Provides the annotation details for a specified group name or id. Leaf/Branch based annotation details can provided for each leaf along with leaf Name. Here is an quick example","title":"Overview"},{"location":"dataset/branchmarker/#related-modifiers","text":"Supported Key-Value pairs Key (case insensitive) Value Description text=group name to be displayed any textual/string content Provide a label name to be displayed for the annotation group. id=some_unique_name any textual/string content without spaces Mandatory for using with !groups_class to represent the group annotation definitions. shape=rect provide the shape The shapes can either be circle,rect,star,triangle,ellipse,check width=20 provide the width of the shape(Mandatory) default width is set to be 20px. set the width and height as same for perfect positioning of the shape. height=20 provide the height of the shape default height is set to be 20px. set the width and height as same for perfect positioning of the shape. bkcolor=colorname any color name or valid html hex colors such as #FFFF00 default color for group background; valid only when style = 2~5; default = lightblue fillbg=1 set the value either 1 or 0. defines whether the shape background should be transparent or filled; default = lightblue color=pink any color name or valid html hex colors such as #FF0000 default color for group lines and labels; default = black linewidth=2 any integer >= 0 set width of the group line; default = 1; if set to 0, the group line is hidden; see examples below dashline=1 if set, a dotted group line will be plotted; default is regular line; see examples below","title":"Related modifiers"},{"location":"dataset/branchmarker/#data","text":"Each line of the Data section usually consists two parts, separated by a TAB . The first part defines to where the group label will be placed, provide the inner branch name or provide all the leaf label names of a inner branch seperated by \",\". To find the inner branch name, go to the tree and point the mouse on the inner branch.The tooltip will show the inner branch name. The second part specifics the 'label' (required) and either provide group_class id or settings for this label such as font color, size. Supported Shapes triangle circle rect star check","title":"Data"},{"location":"dataset/branchmarker/#visualization-styles","text":"","title":"Visualization styles"},{"location":"dataset/branchmarker/#tree","text":"(A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Example","title":"Tree"},{"location":"dataset/branchmarker/#example-1","text":"!groups T1,T2 !Colors red,green !legendShapes star,circle ##class def !groups_class id=T1,bkcolor=red,color=black,shape=star,width=20,height=15 !groups_class id=T2,bkcolor=green,color=black,shape=circle,width=20,height=15 ##data INT2 T1 INT3 T2 Example","title":"Example 1"},{"location":"dataset/branchmarker/#example-2","text":"!groups T1,T2 !Colors red,green !legendShapes star,star ##class def !groups_class id=T1,bkcolor=red,color=black,shape=star,width=20,height=15 !groups_class id=T2,bkcolor=green,color=black,shape=star,width=15,height=15 ##data INT2 T1 INT3 T2 Example","title":"Example 2"},{"location":"dataset/branchmarker/#example-3","text":"In this example we used different shapes and selected the inner branch using the branch leaf labels. !groups T1,T2 !Colors red,green !legendShapes cross,check ##class def !groups_class id=T1,bkcolor=red,color=black,shape=cross,width=20,height=20 !groups_class id=T2,bkcolor=green,color=black,shape=check,width=15,height=15 ##data INT2 T1 C,D T2","title":"Example 3"},{"location":"dataset/clrstripshape/","text":"Overview Color strips and color shapes will be shown next to the leaf labels. Multiple datasets can be uploaded and displayed. Here is an example: Tip the differences between 'rect' and 'strip' are: * strip by default will take all available space of a leaf label, while rect will only take 80% * strip looks like the following in circular mode, while rect remains the same. Related modifiers Key (case insensitive) Value Description universal modifiers !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendStyle or !Style rect or circle or star shapes to be plotted before the legend texts; default = rect !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ; note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset none-universal modifiers !PlotWidth integer > 0 pixel width of the dataset on canvas !itemHeightPX or !barHeightPX integer > 0 pixel height of each shape except 'strips'; see examples bellow !itemHeightPCT or !barHeightPCT float number between 1 to 100 percentage of available height taken by each shape except 'strips'; see examples bellow !recycleColor or !colorRecycle 0 or 1 whether colors will be recycled; see examples bellow unique modifiers modifiers for this annotation dataset only !type or !types or !shape or !shapes any one or combination of rect,star,circle,strip,check see examples bellow !stripHeightPX integer > 0 pixel height for each strip; see examples bellow !stripHeightPCT float number between 1 to 100 percentage of available height taken each strip, see examples bellow !checkLineWidth or !checklwd integer > 0 line width of the 'check' symbol, see examples bellow Tip notes on preparing your datasets!! please always use TAB to separate the modifiers and their values. modifier !type controls the number of shapes to be shown next to leaf labels the \"data\" part of this dataset can only contain two columns of tab-delimited texts; the third column, if presents, will be ignored the first column contains the name of a single leaf node the second column contains comma (,) delimited colors; if the number of colors is less than the number of shapes, the colors will be recycled please also always use TAB to separate the columns in the data section. Example Example 1 ##color strips !type strip,rect,circle,star !showlegends 0 ## let the data begin mouse pink,red,green,blue chicken yellow,purple,darkred,lightgreen rat lightblue chimp grey,darkgreen,grey,pink human orange,red,yellow,lightblue Note notes on plot width, widths and heights of individual shapes Here is how widths and heights of individual shapes are calculated: if a dataset contains multiple shapes, then the plot width will be divided equally among each shape each shape will take 80% of available width each shape will take 80% of available height, except strip, while will take 100% all shapes will be centered at the available space both vertically and horizontally for all shapes except strips, when the widths and heights are of different sizes, always the smaller ones will be chosen as their widths and heights by default, strips will take all of the available heights; however, user can change that using two modifiers !stripHeightPX and !stripHeightPCT. When both modifiers are used in the same dataset (by mistake), only !stripHeightPCT will be used. Example Example 2 ##color strips !type strip,check,rect,star,circle A red,green,blue B purple,darkred,lightgreen C lightblue D darkgreen,grey,pink Example Example 3, '!plotWidth': ##color strips !type strip,check,rect,star,circle ## plotwidth by default is 100; set to 200 in this example !plotWidth 200 A red,green,blue B purple,darkred,lightgreen C lightblue D darkgreen,grey,pink Example Example 4, 'itemHeightPCT': ##color strips !type strip,check,rect,star,circle !plotWidth 200 ## -- shapes except strip will take 80% of available space; make it 100% in this example -- !itemHeightPCT 100 A red,green,blue B purple,darkred,lightgreen C lightblue D darkgreen,grey,pink Example Example 5, '!stripHeightPCT': ##color strips !type strip,check,rect,star,circle ## -- by default, strip will always take 100% available height; make it 80 in this example -- !stripHeightPCT 80 A red,green,blue B purple,darkred,lightgreen C lightblue D darkgreen,grey,pink Example Example 6, '!checkLineWidth': ##color strips !type strip,check,rect,star,circle ## -- by default, check has a line width of 2 pixel; make it 5 -- !checkLineWidth 5 A red,green,blue B purple,darkred,lightgreen C lightblue D darkgreen,grey,pink Example Example 7, '!recycleColor' or '!colorRecycle': ##color strips !type strip,rect,circle,star,check,triangle !showlegends 1 !defaultstrokewidth 2 !plotwidth 200 ## -- recycle color, default is true -- ## -- !type determines that maximally six objects will be displayed ## -- normally user-supplied colors will be recycled; for example, ## -- however, when !recycleColor is set to 0, the colors will not be recycled !colorRecycle 0 ## let the data begin mouse pink,red,green,blue:brighter chicken yellow,purple,white:darkred,lightgreen:darker ## -- two objects will be plotted instead of six -- rat lightblue,white:lightblue chimp grey,darkgreen:brighter,grey:darker,pink:darker human orange,red,white:gold,lightblue Example Example 8, '!recycleColor' or '!colorRecycle': ##color strips !type strip,rect,circle,star,check,triangle !showlegends 1 !defaultstrokewidth 2 !plotwidth 200 !colorRecycle 1 ## let the data begin mouse pink,red,green,blue:brighter chicken yellow,purple,white:darkred,lightgreen:darker ## -- two objects will be plotted instead of six -- rat lightblue,white:lightblue chimp grey,darkgreen:brighter,grey:darker,pink:darker human orange,red,white:gold,lightblue","title":"Color strips and color shapes"},{"location":"dataset/clrstripshape/#overview","text":"Color strips and color shapes will be shown next to the leaf labels. Multiple datasets can be uploaded and displayed. Here is an example: Tip the differences between 'rect' and 'strip' are: * strip by default will take all available space of a leaf label, while rect will only take 80% * strip looks like the following in circular mode, while rect remains the same.","title":"Overview"},{"location":"dataset/clrstripshape/#related-modifiers","text":"Key (case insensitive) Value Description universal modifiers !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendStyle or !Style rect or circle or star shapes to be plotted before the legend texts; default = rect !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ; note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset none-universal modifiers !PlotWidth integer > 0 pixel width of the dataset on canvas !itemHeightPX or !barHeightPX integer > 0 pixel height of each shape except 'strips'; see examples bellow !itemHeightPCT or !barHeightPCT float number between 1 to 100 percentage of available height taken by each shape except 'strips'; see examples bellow !recycleColor or !colorRecycle 0 or 1 whether colors will be recycled; see examples bellow unique modifiers modifiers for this annotation dataset only !type or !types or !shape or !shapes any one or combination of rect,star,circle,strip,check see examples bellow !stripHeightPX integer > 0 pixel height for each strip; see examples bellow !stripHeightPCT float number between 1 to 100 percentage of available height taken each strip, see examples bellow !checkLineWidth or !checklwd integer > 0 line width of the 'check' symbol, see examples bellow Tip notes on preparing your datasets!! please always use TAB to separate the modifiers and their values. modifier !type controls the number of shapes to be shown next to leaf labels the \"data\" part of this dataset can only contain two columns of tab-delimited texts; the third column, if presents, will be ignored the first column contains the name of a single leaf node the second column contains comma (,) delimited colors; if the number of colors is less than the number of shapes, the colors will be recycled please also always use TAB to separate the columns in the data section. Example","title":"Related modifiers"},{"location":"dataset/clrstripshape/#example-1","text":"##color strips !type strip,rect,circle,star !showlegends 0 ## let the data begin mouse pink,red,green,blue chicken yellow,purple,darkred,lightgreen rat lightblue chimp grey,darkgreen,grey,pink human orange,red,yellow,lightblue Note notes on plot width, widths and heights of individual shapes Here is how widths and heights of individual shapes are calculated: if a dataset contains multiple shapes, then the plot width will be divided equally among each shape each shape will take 80% of available width each shape will take 80% of available height, except strip, while will take 100% all shapes will be centered at the available space both vertically and horizontally for all shapes except strips, when the widths and heights are of different sizes, always the smaller ones will be chosen as their widths and heights by default, strips will take all of the available heights; however, user can change that using two modifiers !stripHeightPX and !stripHeightPCT. When both modifiers are used in the same dataset (by mistake), only !stripHeightPCT will be used. Example","title":"Example 1"},{"location":"dataset/clrstripshape/#example-2","text":"##color strips !type strip,check,rect,star,circle A red,green,blue B purple,darkred,lightgreen C lightblue D darkgreen,grey,pink Example","title":"Example 2"},{"location":"dataset/clrstripshape/#example-3-plotwidth","text":"##color strips !type strip,check,rect,star,circle ## plotwidth by default is 100; set to 200 in this example !plotWidth 200 A red,green,blue B purple,darkred,lightgreen C lightblue D darkgreen,grey,pink Example","title":"Example 3, '!plotWidth':"},{"location":"dataset/clrstripshape/#example-4-itemheightpct","text":"##color strips !type strip,check,rect,star,circle !plotWidth 200 ## -- shapes except strip will take 80% of available space; make it 100% in this example -- !itemHeightPCT 100 A red,green,blue B purple,darkred,lightgreen C lightblue D darkgreen,grey,pink Example","title":"Example 4, 'itemHeightPCT':"},{"location":"dataset/clrstripshape/#example-5-stripheightpct","text":"##color strips !type strip,check,rect,star,circle ## -- by default, strip will always take 100% available height; make it 80 in this example -- !stripHeightPCT 80 A red,green,blue B purple,darkred,lightgreen C lightblue D darkgreen,grey,pink Example","title":"Example 5, '!stripHeightPCT':"},{"location":"dataset/clrstripshape/#example-6-checklinewidth","text":"##color strips !type strip,check,rect,star,circle ## -- by default, check has a line width of 2 pixel; make it 5 -- !checkLineWidth 5 A red,green,blue B purple,darkred,lightgreen C lightblue D darkgreen,grey,pink Example","title":"Example 6, '!checkLineWidth':"},{"location":"dataset/clrstripshape/#example-7-recyclecolor-or-colorrecycle","text":"##color strips !type strip,rect,circle,star,check,triangle !showlegends 1 !defaultstrokewidth 2 !plotwidth 200 ## -- recycle color, default is true -- ## -- !type determines that maximally six objects will be displayed ## -- normally user-supplied colors will be recycled; for example, ## -- however, when !recycleColor is set to 0, the colors will not be recycled !colorRecycle 0 ## let the data begin mouse pink,red,green,blue:brighter chicken yellow,purple,white:darkred,lightgreen:darker ## -- two objects will be plotted instead of six -- rat lightblue,white:lightblue chimp grey,darkgreen:brighter,grey:darker,pink:darker human orange,red,white:gold,lightblue Example","title":"Example 7, '!recycleColor' or '!colorRecycle':"},{"location":"dataset/clrstripshape/#example-8-recyclecolor-or-colorrecycle","text":"##color strips !type strip,rect,circle,star,check,triangle !showlegends 1 !defaultstrokewidth 2 !plotwidth 200 !colorRecycle 1 ## let the data begin mouse pink,red,green,blue:brighter chicken yellow,purple,white:darkred,lightgreen:darker ## -- two objects will be plotted instead of six -- rat lightblue,white:lightblue chimp grey,darkgreen:brighter,grey:darker,pink:darker human orange,red,white:gold,lightblue","title":"Example 8, '!recycleColor' or '!colorRecycle':"},{"location":"dataset/collapseintnodes/","text":"Overview With this annotation type, users can : collapse at internal nodes show a small triangle at the collapsed nodes that is proportional to the number of leaves that the collapsed node contains Please note a tree CAN NOT be collapsed at leaf nodes or the root this feature does NOT work in \"slanted cladogram\" mode Datasets can be uploaded using the following button on the toolbar: Here is an example: Supported modifiers We didn't introduce new modifiers for this annotation type; only the following universal modifiers related to legends are supported: Key (case insensitive) Value Description !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendStyle or !Style rect or circle or star shapes to be plotted before the legend texts; default = rect !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ; note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends Specify/ define the internal node(s) to collapse The data part contains a list of internal nodes at which the tree should collapse. There are three ways of specifying an internal node. Let's take the following tree as an example: (A,(B,(C,(D,E)2DE)CDE3)BC3DE)ROOT; Now we try to collapse the tree at the last common ancestor of the leaf nodes \"C\" and \"E\". The simplest way is to upload a dataset with the following content: C,E Alternatively, users can point to the internal node by using its \"internal id\" or name (if available); to find out such information, simply mouseover the internal node of interest: Therefore the above dataset is equivalent to: ## internal id INT3 ... or ## name of the internal node CDE3 Please consult this wiki for more information on naming internal nodes. Of course users can collapse at multiple internal nodes at the same time. Let's use a different tree: ( ( (A:0.4,B:0.3)90:0.2,(C:0.1,D:0.001)75:0.2 )90:0.3, E:0.44 )100:0.3; This tree does not have named internal nodes, so we use leaf nodes to define the internal nodes at where the tree would collapses: A,B C,D Size of the triangles The height of a triangle is proportional to the number of leaf nodes that the corresponding internal node contains, it is calculated using the equation: ( 1 + log10( number of contained daughter nodes ) ) * vertical scale * 30% while the width of the triangle is defined by \"horizontal scale\". The \"vertical scale\" and \"horizontal scale\" can be changed/ specified using the toolbar (the \"Basic\" tab): Customise the collapsed nodes Naming collapsed nodes (work in progress) By default, the text displayed next to the collapsed node is the node name (see the annotated figure above); if the node is not named, its internal name (INT###) will be used. Please consult this wiki for more information on naming internal nodes. In the future, we'll allow users to name the collapsed nodes directly in the dataset. For example: C,D name=my collapsed node Styling collapsed nodes Users can customise the visualisation styles of the collapsed nodes using the grammar below. For example: C,D name=my collapsed node,color=yellow,linewidth=2,linestyle=dashed please note that HTML codes are also supported for the name; for example: Scer|YPL277C,Spar|spar435-g2.1 name=my triangle,color=green,linewidth=2,linestyle=dashed will be visualised as: please note that we support HTML coded texts as the name of the collapsed node; for example: Scer|YPL277C,Spar|spar435-g2.1 name=my < i style = \"color:pink\" > triangle </ i > ,color=green,linewidth=2,linestyle=dashed when the HTML mode is enabled (by using the 'HTML' button on the toolbar), the collapsed node will be visualised as: Here the tree (which also contains some HTML code): ((((((Scer|<i style=\"color:red;background-color:lightgreen\">YPL277C</i>:1.234e-10,Spar|spar435-g2.1),Sbay|sbayc582-g2.1),(Scer|YOR389W,Smik|smik240-g1.1)),(Klac|KLLA0E19349g,Sklu|SAKL0A04994g)),Ylip|YALI0A21131g),Anid|AN4574); please note that under HTML mode , exporting to graphical formats may NOT work. You may export your visualisation to a SVG file, but it can only be visualised correctly by browsers such as Firefox, Google Chrome and Apple Safari, NOT by Adobe Illustrator. Add datasets to a collapsed tree In general, collapsed internal nodes are treated as leaf nodes. An internal node can be identified by its internal id, or if available, node name. To find such information, users can simply mouse-over an internal node. Here we use some examples to show how to add other datasets to a collapsed tree. The tree: ( ( (A:0.4,B:0.3)90:0.2,(C:0.1,D:0.001)75:0.2 )90:0.3, E:0.44 )100:0.3; ... and the dataset for collapsing the tree (the same as the example above): A,B C,D Branch colors ## note the branch color applies to the triangles too. INT3 lightblue E darkgreen ## 'ad' works but the 'prefix' and 'suffix' do not ## here INT3,INT4 defines the last common ancestor on the tree, ## 'ad' means that the color 'red' would be applied to all its descendants. INT3,INT4 red ad see here for more about branch colors. Leaf colors and leaf background colors ## leaf colors E darkred INT3 pink INT4 green ## leaf bk color INT3 lightblue INT4 lightgreen E pink please see here for more information on leaf colors, and here for leaf background colors. Color shapes and strips ##color strips !type strip,check,rect,star,circle ## -- here A,B == INT3 A,B red,green,blue ## -- or directly use the internal id to point to an internal node -- INT4 lightblue E darkgreen,grey,pink ... in circular mode: pie charts leaf label decorations !defaultstrokewidth 2 ## -- use internal id of an internal node -- INT3 rect,pink:red check,pink ## -- use two leaf nodes to define an internal node -- C,D triangle,white:darker ## -- a leaf node E rect,green:darker Group label !grouplabel style=1,color=pink,show=1,fontsize=14 INT3,INT4 text=group 1,textorientation=vertical E text=mammal,color=darkgreen,linewidth=4,fontsize=16,bkcolor=green ... in circular mode: Dot plot ##dot plots !groups dot 1,dot 2,dot 3 !colors #028482,#7ABA7A,purple !title dot plots for a collapsed tree # -- legends -- !legendstyle circle !showLegends 1 ## -- if !scalebycol is set to 1, each column of data will be scaled independently !scalebycol 0 !byarea 1 # ---- grid and grid label / group label are also supported -- !grid 1 !gridlabel 1 # stroke and stroke color also work here !defaultStrokeColor pink #!defaultStrokeWidth 2 # here shape can be 'rect' or 'circle'; roundedcorner only applies to 'rect' shapes ... !dotplots shape=circle,margin=2,colwidth=30,roundedcorner=3 ## -- show data value works at here as well -- !showdataValue show=1,fontsize=12,fontitalic=0 !columnlabelstyle fontsize=12,fontbold=1 ## here A,B == INT3 A,B 20,20,20 INT4 8,9,7 E 20,20,20 Heatmap #heatmap !legendTitle heatmap for a collapsed tree !showLegends 1 #!defaultStrokeColor pink #!defaultStrokeWidth 2 !colorgradient blue, yellow,red !colorgradientMarkLabel 0,5,10,15,20,25 # -- heatmap column labels -- !showHeatMapColumnLabel 1 !heatmapColumnLabels e1,e2,e3,control # -- heatmap -- !heatmap margin=2,colwidth=30,roundedcorner=2 # -- show data value !showdataValue show=1,fontsize=12,fontitalic=0,textalign=start !columnlabelstyle fontsize=12,fontbold=1,fontcolor=darkred INT3 7,9,10,4 C,D -2,3,5,25 E 16,12,19,4 Column plot ## -- !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45,spacebetweencolumns=10 ## a column of data starts with a 'namedcolumn', it defines global options for the corresponding column namedcolumn=thermopiles,color=purple:darker ## followed by the following fragments from=A,to=C from=D,color=white:purple,text=?,width=20,style=circle,textangle=0 from=INT3,to=INT4 from=E,color=white:purple,text=?,width=20,style=circle,textangle=0 ## -- 2nd column namedcolumn=habitat,width=15 from=INT3,to=E,text=aquatic,textangle=-90,color=white:lightblue ## -- 3rd column namedcolumn=fast evolving,color=lightgreen:darker from=INT3,to=E from=INT4,style=none,text=*,textangle=0,width=20","title":"Collapse internal nodes"},{"location":"dataset/collapseintnodes/#overview","text":"With this annotation type, users can : collapse at internal nodes show a small triangle at the collapsed nodes that is proportional to the number of leaves that the collapsed node contains Please note a tree CAN NOT be collapsed at leaf nodes or the root this feature does NOT work in \"slanted cladogram\" mode Datasets can be uploaded using the following button on the toolbar: Here is an example:","title":"Overview"},{"location":"dataset/collapseintnodes/#supported-modifiers","text":"We didn't introduce new modifiers for this annotation type; only the following universal modifiers related to legends are supported: Key (case insensitive) Value Description !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendStyle or !Style rect or circle or star shapes to be plotted before the legend texts; default = rect !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ; note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends","title":"Supported modifiers"},{"location":"dataset/collapseintnodes/#specify-define-the-internal-nodes-to-collapse","text":"The data part contains a list of internal nodes at which the tree should collapse. There are three ways of specifying an internal node. Let's take the following tree as an example: (A,(B,(C,(D,E)2DE)CDE3)BC3DE)ROOT; Now we try to collapse the tree at the last common ancestor of the leaf nodes \"C\" and \"E\". The simplest way is to upload a dataset with the following content: C,E Alternatively, users can point to the internal node by using its \"internal id\" or name (if available); to find out such information, simply mouseover the internal node of interest: Therefore the above dataset is equivalent to: ## internal id INT3 ... or ## name of the internal node CDE3 Please consult this wiki for more information on naming internal nodes. Of course users can collapse at multiple internal nodes at the same time. Let's use a different tree: ( ( (A:0.4,B:0.3)90:0.2,(C:0.1,D:0.001)75:0.2 )90:0.3, E:0.44 )100:0.3; This tree does not have named internal nodes, so we use leaf nodes to define the internal nodes at where the tree would collapses: A,B C,D","title":"Specify/ define the internal node(s) to collapse"},{"location":"dataset/collapseintnodes/#size-of-the-triangles","text":"The height of a triangle is proportional to the number of leaf nodes that the corresponding internal node contains, it is calculated using the equation: ( 1 + log10( number of contained daughter nodes ) ) * vertical scale * 30% while the width of the triangle is defined by \"horizontal scale\". The \"vertical scale\" and \"horizontal scale\" can be changed/ specified using the toolbar (the \"Basic\" tab):","title":"Size of the triangles"},{"location":"dataset/collapseintnodes/#customise-the-collapsed-nodes","text":"","title":"Customise the collapsed nodes"},{"location":"dataset/collapseintnodes/#naming-collapsed-nodes-work-in-progress","text":"By default, the text displayed next to the collapsed node is the node name (see the annotated figure above); if the node is not named, its internal name (INT###) will be used. Please consult this wiki for more information on naming internal nodes. In the future, we'll allow users to name the collapsed nodes directly in the dataset. For example: C,D name=my collapsed node","title":"Naming collapsed nodes (work in progress)"},{"location":"dataset/collapseintnodes/#styling-collapsed-nodes","text":"Users can customise the visualisation styles of the collapsed nodes using the grammar below. For example: C,D name=my collapsed node,color=yellow,linewidth=2,linestyle=dashed please note that HTML codes are also supported for the name; for example: Scer|YPL277C,Spar|spar435-g2.1 name=my triangle,color=green,linewidth=2,linestyle=dashed will be visualised as: please note that we support HTML coded texts as the name of the collapsed node; for example: Scer|YPL277C,Spar|spar435-g2.1 name=my < i style = \"color:pink\" > triangle </ i > ,color=green,linewidth=2,linestyle=dashed when the HTML mode is enabled (by using the 'HTML' button on the toolbar), the collapsed node will be visualised as: Here the tree (which also contains some HTML code): ((((((Scer|<i style=\"color:red;background-color:lightgreen\">YPL277C</i>:1.234e-10,Spar|spar435-g2.1),Sbay|sbayc582-g2.1),(Scer|YOR389W,Smik|smik240-g1.1)),(Klac|KLLA0E19349g,Sklu|SAKL0A04994g)),Ylip|YALI0A21131g),Anid|AN4574); please note that under HTML mode , exporting to graphical formats may NOT work. You may export your visualisation to a SVG file, but it can only be visualised correctly by browsers such as Firefox, Google Chrome and Apple Safari, NOT by Adobe Illustrator.","title":"Styling collapsed nodes"},{"location":"dataset/collapseintnodes/#add-datasets-to-a-collapsed-tree","text":"In general, collapsed internal nodes are treated as leaf nodes. An internal node can be identified by its internal id, or if available, node name. To find such information, users can simply mouse-over an internal node. Here we use some examples to show how to add other datasets to a collapsed tree. The tree: ( ( (A:0.4,B:0.3)90:0.2,(C:0.1,D:0.001)75:0.2 )90:0.3, E:0.44 )100:0.3; ... and the dataset for collapsing the tree (the same as the example above): A,B C,D","title":"Add datasets to a collapsed tree"},{"location":"dataset/collapseintnodes/#branch-colors","text":"## note the branch color applies to the triangles too. INT3 lightblue E darkgreen ## 'ad' works but the 'prefix' and 'suffix' do not ## here INT3,INT4 defines the last common ancestor on the tree, ## 'ad' means that the color 'red' would be applied to all its descendants. INT3,INT4 red ad see here for more about branch colors.","title":"Branch colors"},{"location":"dataset/collapseintnodes/#leaf-colors-and-leaf-background-colors","text":"## leaf colors E darkred INT3 pink INT4 green ## leaf bk color INT3 lightblue INT4 lightgreen E pink please see here for more information on leaf colors, and here for leaf background colors.","title":"Leaf colors and leaf background colors"},{"location":"dataset/collapseintnodes/#color-shapes-and-strips","text":"##color strips !type strip,check,rect,star,circle ## -- here A,B == INT3 A,B red,green,blue ## -- or directly use the internal id to point to an internal node -- INT4 lightblue E darkgreen,grey,pink ... in circular mode:","title":"Color shapes and strips"},{"location":"dataset/collapseintnodes/#pie-charts","text":"","title":"pie charts"},{"location":"dataset/collapseintnodes/#leaf-label-decorations","text":"!defaultstrokewidth 2 ## -- use internal id of an internal node -- INT3 rect,pink:red check,pink ## -- use two leaf nodes to define an internal node -- C,D triangle,white:darker ## -- a leaf node E rect,green:darker","title":"leaf label decorations"},{"location":"dataset/collapseintnodes/#group-label","text":"!grouplabel style=1,color=pink,show=1,fontsize=14 INT3,INT4 text=group 1,textorientation=vertical E text=mammal,color=darkgreen,linewidth=4,fontsize=16,bkcolor=green ... in circular mode:","title":"Group label"},{"location":"dataset/collapseintnodes/#dot-plot","text":"##dot plots !groups dot 1,dot 2,dot 3 !colors #028482,#7ABA7A,purple !title dot plots for a collapsed tree # -- legends -- !legendstyle circle !showLegends 1 ## -- if !scalebycol is set to 1, each column of data will be scaled independently !scalebycol 0 !byarea 1 # ---- grid and grid label / group label are also supported -- !grid 1 !gridlabel 1 # stroke and stroke color also work here !defaultStrokeColor pink #!defaultStrokeWidth 2 # here shape can be 'rect' or 'circle'; roundedcorner only applies to 'rect' shapes ... !dotplots shape=circle,margin=2,colwidth=30,roundedcorner=3 ## -- show data value works at here as well -- !showdataValue show=1,fontsize=12,fontitalic=0 !columnlabelstyle fontsize=12,fontbold=1 ## here A,B == INT3 A,B 20,20,20 INT4 8,9,7 E 20,20,20","title":"Dot plot"},{"location":"dataset/collapseintnodes/#heatmap","text":"#heatmap !legendTitle heatmap for a collapsed tree !showLegends 1 #!defaultStrokeColor pink #!defaultStrokeWidth 2 !colorgradient blue, yellow,red !colorgradientMarkLabel 0,5,10,15,20,25 # -- heatmap column labels -- !showHeatMapColumnLabel 1 !heatmapColumnLabels e1,e2,e3,control # -- heatmap -- !heatmap margin=2,colwidth=30,roundedcorner=2 # -- show data value !showdataValue show=1,fontsize=12,fontitalic=0,textalign=start !columnlabelstyle fontsize=12,fontbold=1,fontcolor=darkred INT3 7,9,10,4 C,D -2,3,5,25 E 16,12,19,4","title":"Heatmap"},{"location":"dataset/collapseintnodes/#column-plot","text":"## -- !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45,spacebetweencolumns=10 ## a column of data starts with a 'namedcolumn', it defines global options for the corresponding column namedcolumn=thermopiles,color=purple:darker ## followed by the following fragments from=A,to=C from=D,color=white:purple,text=?,width=20,style=circle,textangle=0 from=INT3,to=INT4 from=E,color=white:purple,text=?,width=20,style=circle,textangle=0 ## -- 2nd column namedcolumn=habitat,width=15 from=INT3,to=E,text=aquatic,textangle=-90,color=white:lightblue ## -- 3rd column namedcolumn=fast evolving,color=lightgreen:darker from=INT3,to=E from=INT4,style=none,text=*,textangle=0,width=20","title":"Column plot"},{"location":"dataset/columnplots/","text":"Overview Column plots provides a flexable way of visualising summary information of species in a phylogenetic tree, it was inspired by the figure 6 (the column plots on the right) of a recent publication in eLife: source: Laumer, Christopher E., Andreas Hejnol, and Gonzalo Giribet. \"Nuclear genomic signals of the \u2018microturbellarian\u2019roots of platyhelminth evolutionary innovation.\" eLife 4 (2015): e05503. note : thanks to Desmond Ramirez of the UCSB who brought this figure to our attention. Here is our implementation in evolview: Tree: (A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Dataset: ## -- !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45,spacebetweencolumns=15 ## a column of data starts with a 'namedcolumn', #it defines global options for the corresponding column namedcolumn=thermopiles,color=purple:darker ## followed by the following fragments from=A,to=C from=D,color=white:purple,text=?,width=20,style=circle,textangle=0 ## -- 2nd column namedcolumn=habitat,width=15 from=A,to=B,text=aquatic,textangle=-90,color=white:lightblue from=C,to=D,text=?,textangle=0,color=white:darkgrey ## -- 3rd column namedcolumn=fast evolving,color=lightgreen:darker from=A,style=star from=B,to=D from=C,style=none,text=*,textangle=0,width=20 Supported modifiers Due to the complexity of the plot, we adopted here a new approach for the dataset, thus many so-called universal modifiers are no longer supported except those that are related to the legend. Below are universal modifiers that are still supported by Column plots: Key (case insensitive) Value Description !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendStyle or !Style rect or circle or star shapes to be plotted before the legend texts; default = rect !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ;note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset the !columnPlots modifier here we introduce a new modifier !columnPlots to allow users to control the following aspect of the plot globally: * fill and text color * default stroke color * default stroke width * font size, italic, bold and rotation angle * column width and space between columns please note all these global options can be overriden by local settings. A typical !columnPlots would look like the following (NOTE: this is written in one line, not multiple lines): !columnPlots width=10,spaceBetweenColumns=10,color=green:red,strokewidth=1,textangle=-60,style=rect,roundedcorner=5,fontsize=14 please remember always use a 'TAB' character to separate !columnPlots from its value. The value of !columnPlots is mandatory; it can be any of the following options, individually or in combination: key alternative value description width=10 any integer >= 0 set column width, default = 10 spaceBetweenColumns=10 any integer >= 0 set space between columns, default = 10 style=rect any of the following:none,rect,circle,star,check,triangle style / shape to be plotted, default = rect fontsize=10 any integer >= 0 set font size for columns labels, default = 14 fontitalic=0 1 set font italic for columns labels, default = 0 fontbold=0 1 set font bold for columns labels, default = 0 color=red, or color=red:blue any valid html color name, e.g. green, darkblue ..., or hex html color, e.g. #FF00FF set fill and optional stroke color; fill color will be also applied to column labels, default = black; see examples below for detail strokewidth=1 any integer >=1 set strokewidth, valid only when the strokecolor is set, default = 1; see examples below for detail Please note that Evolview supports the use of \"darker\", \"brighter\" and \"lighter\" as stroke colors. For example, the following usages are all valid: red:darker '#FF00FF':lighter darkblue:brighter When 'darker' or 'brighter'/'lighter' is used, the stroke color will be 20% darker or brighter than the specified color. See here for more details. prepare a column of data for visualisation As shown in the previous example, a column of data often consists of two parts , a line of text starts with a mandatory filed 'namedcolumn=name of the column', followed by any numbers of the options mentioned in the table above, for example: namedcolumn=thermopiles,color=purple:darker namedcolumn=habitat,width=15 the options following 'namedColumn' control the displaying styles of current column, and overrides the corresponding global options. several lines of text, each line defines a fragment / segment to be plotted. For example: from=A,to=C from=D,color=white:purple,text=?,width=20,style=circle,textangle=0 the 'fragment' line should contain the following elements: the starting point, i.e. the name of the leaf node, of the fragment using 'from='; mandatory an optional ending point / the name of a leaf node using 'to=' any numbers of the options mentioned in the above table; optional. These options control the displaying styles of current fragment, and overrides the corresponding global options Here is an example: ## a column of data starts with a 'namedcolumn', ##it defines global options for the corresponding column namedcolumn=thermopiles,color=purple:darker ## followed by the following fragments from=A,to=C from=D,color=white:purple,text=?,width=20,style=circle,textangle=0 Tip Note : the dataset is case-insensitive the indentation at the begining of the framents is optional Example Example 1 Example 1. a column with two fragments, one span three leaf nodes, while the other spans only one.: ## -- ## -- some global options !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45 ## -- a column with two fragments, note how the stroke color is defined namedcolumn=thermopiles,color=lightblue:darker ## note: the indentation is optional from=A,to=C from=D Example Example 2 try change the style / shape of the fragments, however it only work when a fragment spans only one leaf node: ## ## -- some global options !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45 ## -- a column with two fragments, note how the stroke color is defined namedcolumn=thermopiles,color=lightblue:darker ## try change the style / shape, but it wouldn't work here from=A,to=C,style=star ## but, it will work here from=D,style=star Example Example 3 now try change the width of the fragments: ## ## -- some global options !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45 ## -- set width to 20, it will apply to both fragments namedcolumn=thermopiles,color=lightblue:darker,width=20 from=A,to=C,style=star from=D,style=star Example Example 4 you can change the widths of the fragments individually: ## ## -- some global options !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45 ## please note, width=25 here specifies the overall plot width of current column, ## it is thus meaningful even it is overridden later. namedcolumn=thermopiles,color=lightblue:darker,width=25 from=A,to=C,width=10 from=D,style=star,width=20 Example Example 5 we know for sure the first three species are thermophilic, but the last one??? ## ## -- some global options !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45 namedcolumn=thermopiles,color=#FF33CC:darker,width=25 from=A,to=C,width=10 from=D,style=circle,color=white:darkgrey,width=20,text=?,textangle=0 Example Example 6 now we'd like the readers to pay more attention to species A and C: ## ## -- some global options !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45 namedcolumn=thermopiles,color=lightblue:darker,width=25 from=A,to=C,width=10 ## -- don't forget to set style=none from=A,style=none,text=*,fontsize=16,textangle=0 from=C,style=none,text=*,fontsize=16,textangle=0 from=D,style=circle,color=white:darkgrey,width=20,text=?,textangle=0 Example Example 7 we can have multiple columns in a dataset: ## !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45,spacebetweencolumns=15 ## a column of data starts with a 'namedcolumn', ## it defines global options for the corresponding column namedcolumn=thermopiles,color=purple:darker ## followed by the following fragments from=A,to=C from=D,color=white:purple,text=?,width=20,style=circle,textangle=0 ## -- 2nd column namedcolumn=habitat,width=15 from=A,to=B,text=aquatic,textangle=90,color=white:lightblue,fontsize=14 from=C,to=D,text=?,textangle=0,color=white:darkgrey ## -- 3rd column namedcolumn=fast evolving,color=lightgreen:darker from=A,style=star from=B,to=D from=C,style=none,text=*,textangle=0,width=20 Tip Please NOTE: the plot is optimized for cladogram and phylogram, thus it wouldn't be as pretty in circular mode please send us (evolgenius.team@gmail.com) email if you have encountered any problems using EvolView, attach your tree and datasets if necessary please also send us your suggestions and feature requests! Add column plots to collapsed trees Evolview supports collapsing at internal nodes; collapsed nodes are treated as leaf nodes. It is therefore very straightforward to add column plots to a collapsed tree. See here for more information.","title":"Column plot"},{"location":"dataset/columnplots/#overview","text":"Column plots provides a flexable way of visualising summary information of species in a phylogenetic tree, it was inspired by the figure 6 (the column plots on the right) of a recent publication in eLife: source: Laumer, Christopher E., Andreas Hejnol, and Gonzalo Giribet. \"Nuclear genomic signals of the \u2018microturbellarian\u2019roots of platyhelminth evolutionary innovation.\" eLife 4 (2015): e05503. note : thanks to Desmond Ramirez of the UCSB who brought this figure to our attention. Here is our implementation in evolview:","title":"Overview"},{"location":"dataset/columnplots/#tree","text":"(A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Dataset: ## -- !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45,spacebetweencolumns=15 ## a column of data starts with a 'namedcolumn', #it defines global options for the corresponding column namedcolumn=thermopiles,color=purple:darker ## followed by the following fragments from=A,to=C from=D,color=white:purple,text=?,width=20,style=circle,textangle=0 ## -- 2nd column namedcolumn=habitat,width=15 from=A,to=B,text=aquatic,textangle=-90,color=white:lightblue from=C,to=D,text=?,textangle=0,color=white:darkgrey ## -- 3rd column namedcolumn=fast evolving,color=lightgreen:darker from=A,style=star from=B,to=D from=C,style=none,text=*,textangle=0,width=20","title":"Tree:"},{"location":"dataset/columnplots/#supported-modifiers","text":"Due to the complexity of the plot, we adopted here a new approach for the dataset, thus many so-called universal modifiers are no longer supported except those that are related to the legend. Below are universal modifiers that are still supported by Column plots: Key (case insensitive) Value Description !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendStyle or !Style rect or circle or star shapes to be plotted before the legend texts; default = rect !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ;note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset","title":"Supported modifiers"},{"location":"dataset/columnplots/#the-columnplots-modifier","text":"here we introduce a new modifier !columnPlots to allow users to control the following aspect of the plot globally: * fill and text color * default stroke color * default stroke width * font size, italic, bold and rotation angle * column width and space between columns please note all these global options can be overriden by local settings. A typical !columnPlots would look like the following (NOTE: this is written in one line, not multiple lines): !columnPlots width=10,spaceBetweenColumns=10,color=green:red,strokewidth=1,textangle=-60,style=rect,roundedcorner=5,fontsize=14 please remember always use a 'TAB' character to separate !columnPlots from its value. The value of !columnPlots is mandatory; it can be any of the following options, individually or in combination: key alternative value description width=10 any integer >= 0 set column width, default = 10 spaceBetweenColumns=10 any integer >= 0 set space between columns, default = 10 style=rect any of the following:none,rect,circle,star,check,triangle style / shape to be plotted, default = rect fontsize=10 any integer >= 0 set font size for columns labels, default = 14 fontitalic=0 1 set font italic for columns labels, default = 0 fontbold=0 1 set font bold for columns labels, default = 0 color=red, or color=red:blue any valid html color name, e.g. green, darkblue ..., or hex html color, e.g. #FF00FF set fill and optional stroke color; fill color will be also applied to column labels, default = black; see examples below for detail strokewidth=1 any integer >=1 set strokewidth, valid only when the strokecolor is set, default = 1; see examples below for detail Please note that Evolview supports the use of \"darker\", \"brighter\" and \"lighter\" as stroke colors. For example, the following usages are all valid: red:darker '#FF00FF':lighter darkblue:brighter When 'darker' or 'brighter'/'lighter' is used, the stroke color will be 20% darker or brighter than the specified color. See here for more details.","title":"the !columnPlots modifier"},{"location":"dataset/columnplots/#prepare-a-column-of-data-for-visualisation","text":"As shown in the previous example, a column of data often consists of two parts , a line of text starts with a mandatory filed 'namedcolumn=name of the column', followed by any numbers of the options mentioned in the table above, for example: namedcolumn=thermopiles,color=purple:darker namedcolumn=habitat,width=15 the options following 'namedColumn' control the displaying styles of current column, and overrides the corresponding global options. several lines of text, each line defines a fragment / segment to be plotted. For example: from=A,to=C from=D,color=white:purple,text=?,width=20,style=circle,textangle=0 the 'fragment' line should contain the following elements: the starting point, i.e. the name of the leaf node, of the fragment using 'from='; mandatory an optional ending point / the name of a leaf node using 'to=' any numbers of the options mentioned in the above table; optional. These options control the displaying styles of current fragment, and overrides the corresponding global options Here is an example: ## a column of data starts with a 'namedcolumn', ##it defines global options for the corresponding column namedcolumn=thermopiles,color=purple:darker ## followed by the following fragments from=A,to=C from=D,color=white:purple,text=?,width=20,style=circle,textangle=0 Tip Note : the dataset is case-insensitive the indentation at the begining of the framents is optional Example","title":"prepare a column of data for visualisation"},{"location":"dataset/columnplots/#example-1","text":"Example 1. a column with two fragments, one span three leaf nodes, while the other spans only one.: ## -- ## -- some global options !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45 ## -- a column with two fragments, note how the stroke color is defined namedcolumn=thermopiles,color=lightblue:darker ## note: the indentation is optional from=A,to=C from=D Example","title":"Example 1"},{"location":"dataset/columnplots/#example-2","text":"try change the style / shape of the fragments, however it only work when a fragment spans only one leaf node: ## ## -- some global options !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45 ## -- a column with two fragments, note how the stroke color is defined namedcolumn=thermopiles,color=lightblue:darker ## try change the style / shape, but it wouldn't work here from=A,to=C,style=star ## but, it will work here from=D,style=star Example","title":"Example 2"},{"location":"dataset/columnplots/#example-3","text":"now try change the width of the fragments: ## ## -- some global options !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45 ## -- set width to 20, it will apply to both fragments namedcolumn=thermopiles,color=lightblue:darker,width=20 from=A,to=C,style=star from=D,style=star Example","title":"Example 3"},{"location":"dataset/columnplots/#example-4","text":"you can change the widths of the fragments individually: ## ## -- some global options !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45 ## please note, width=25 here specifies the overall plot width of current column, ## it is thus meaningful even it is overridden later. namedcolumn=thermopiles,color=lightblue:darker,width=25 from=A,to=C,width=10 from=D,style=star,width=20 Example","title":"Example 4"},{"location":"dataset/columnplots/#example-5","text":"we know for sure the first three species are thermophilic, but the last one??? ## ## -- some global options !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45 namedcolumn=thermopiles,color=#FF33CC:darker,width=25 from=A,to=C,width=10 from=D,style=circle,color=white:darkgrey,width=20,text=?,textangle=0 Example","title":"Example 5"},{"location":"dataset/columnplots/#example-6","text":"now we'd like the readers to pay more attention to species A and C: ## ## -- some global options !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45 namedcolumn=thermopiles,color=lightblue:darker,width=25 from=A,to=C,width=10 ## -- don't forget to set style=none from=A,style=none,text=*,fontsize=16,textangle=0 from=C,style=none,text=*,fontsize=16,textangle=0 from=D,style=circle,color=white:darkgrey,width=20,text=?,textangle=0 Example","title":"Example 6"},{"location":"dataset/columnplots/#example-7","text":"we can have multiple columns in a dataset: ## !columnplots strokewidth=2,fontbold=1,fontsize=16,textangle=-45,spacebetweencolumns=15 ## a column of data starts with a 'namedcolumn', ## it defines global options for the corresponding column namedcolumn=thermopiles,color=purple:darker ## followed by the following fragments from=A,to=C from=D,color=white:purple,text=?,width=20,style=circle,textangle=0 ## -- 2nd column namedcolumn=habitat,width=15 from=A,to=B,text=aquatic,textangle=90,color=white:lightblue,fontsize=14 from=C,to=D,text=?,textangle=0,color=white:darkgrey ## -- 3rd column namedcolumn=fast evolving,color=lightgreen:darker from=A,style=star from=B,to=D from=C,style=none,text=*,textangle=0,width=20 Tip Please NOTE: the plot is optimized for cladogram and phylogram, thus it wouldn't be as pretty in circular mode please send us (evolgenius.team@gmail.com) email if you have encountered any problems using EvolView, attach your tree and datasets if necessary please also send us your suggestions and feature requests!","title":"Example 7"},{"location":"dataset/columnplots/#add-column-plots-to-collapsed-trees","text":"Evolview supports collapsing at internal nodes; collapsed nodes are treated as leaf nodes. It is therefore very straightforward to add column plots to a collapsed tree. See here for more information.","title":"Add column plots to collapsed trees"},{"location":"dataset/dotplots/","text":"Tree (A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Example dataset: ##dot plots !groups dot 1,dot 2,dot 3 !colors #028482,#7ABA7A,yellow !title Example of dot plot # -- legends -- !legendstyle circle !showLegends 1 ## -- if !scalebycol is set to 1, each column of data will be scaled independently !scalebycol 0 !byarea 1 # ---- grid and grid label / group label are also supported -- !grid 1 !gridlabel 1 # stroke and stroke color also work here !defaultStrokeColor pink #!defaultStrokeWidth 2 # here shape can be 'rect' or 'circle'; roundedcorner only applies to 'rect' shapes ... !dotplots shape=circle,margin=2,colwidth=30,roundedcorner=3 ## -- show data value works at here as well -- !showdataValue show=1,fontsize=12,fontcolor=black A 8,13,5 B 10,20,20 C 8,9,7 D 20,20,20 Supported modifiers The following 'modifiers' (Key-Value pairs) are supported for dot plots: Key (case insensitive) Value Description universal modifiers !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendStyle or !Style rect or circle or star shapes to be plotted before the legend texts; default = rect !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ; note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset modifiers shared with Bar Charts modifiers that apply to both Bar Charts and Dot Plots !grid none show a background grid !gridlabel or !axis none show grid labels (note: does not work in circular modes !defaultStrokeWidth any value >= 0 stroke width that applies to both legends and the chart !defaultStrokeColor any valid color name such as red and yellow and html hex color such as #FF00FF stroke color that applies to both legends and the chart; see more about stroke colors; also see the section below dot plots specific !scalebycol none scale the data by column, i.e. the max value in a column will take the maximum plot width of a column; default is to scale by the maximum of all data other modifiers !dotplots see section below for more details !showdataValue see section show data value for more details !columnLabelStyle tweak column label styles; see 'column label style' below for detail Tip notes on preparing your datasets!! please always use TAB to separate the modifiers and their values. if a modifier is used (accidentally) multiple tiles, only the last one will be used. the \"data\" part of this dataset can only contain two columns of tab-delimited texts; the third column, if presents, will be ignored please also always use TAB to separate the columns in the data section. The !dotplots modifier The 'value' of the modifier !dotplots can be any combination of the following, separated by a \",\": shape=circle,margin=2,colwidth=30,roundedcorner=3 key alternative value description shape = circle rect shape of the dot plots; default is circle colwidth=30 any integer > 0 set pixel width per column ; optional; default = 20 margin=2 any integer >= 0 set pixel space between columns; optional; default = 0 roundedcorner=1 any integer >= 0 set rounded corner in pixels for rectangular; valid when shape=rect; optional, default = 0 Strokes User can choose different stroke colors for different columns using the modifier !colors; for example, by simply changing the value of !colors to : #028482:blue,#7ABA7A:gold,#B76EB8:darkgrey For example: ##dot plots !groups dot 1,dot 2,dot 3 ## -- set stroke color -- !colors #028482:blue,#7ABA7A:gold,#B76EB8:darkgrey ## -- set stroke width to 2 -- #!defaultStrokeColor pink !defaultStrokeWidth 2 !title Example of dot plot !legendstyle circle !showLegends 1 !byarea 1 !grid 1 !gridlabel 1 !dotplots shape=circle,margin=2,colwidth=30,roundedcorner=3 !showdataValue show=1,fontsize=12,fontcolor=white A 8,13,5 B 10,20,20 C 8,9,7 D 20,20,20 Show data value The 'value' of the modifier !showdataValue can be any combination of the following, separated by a \",\": key alternative value description show = 1 0 show or hide data values; optional; the data values will be shown if omitted fontsize=12 any integer set font size; optional; default = 10 fontcolor=red any value color name set text color; optional; default = 'black' or 'white' depending on the background color fontitalic=1 0 set font italic; optional; default = 0 valuesToHide=value1, or valuesToHide=value1:value2 any number(s) specify a single value to hide, e.g. valuesToHide=9, or a range of values to hide, e.g. valuesToHide=0.5:10 (inclusive). Default is to hide none NOTE : when 'fontcolor' is omitted, the default font color will be either 'black' or 'white' depending the background color, for example: !groups dot 1,dot 2,dot 3 !colors #028482,#7ABA7A,yellow !title Example of dot plot !legendstyle circle !showLegends 1 !byarea 1 !grid 1 !gridlabel 1 !defaultStrokeColor pink !dotplots shape=circle,margin=2,colwidth=30,roundedcorner=3 !showdataValue show=1,fontsize=12,fontitalic=0,textalign=start A 8,13,5 B 10,20,20 C 8,9,7 D 20,20,20 The purpose here is to ensure the readability of the texts on any background colors. In this particular case, if we force the text color to 'white': !groups dot 1,dot 2,dot 3 !colors #028482,#7ABA7A,yellow !title Example of dot plot !legendstyle circle !showLegends 1 !byarea 1 !grid 1 !gridlabel 1 !defaultStrokeColor pink !dotplots shape=circle,margin=2,colwidth=30,roundedcorner=3 !showdataValue show=1,fontsize=12,fontcolor=white A 8,13,5 B 10,20,20 C 8,9,7 D 20,20,20 ... the texts of the 3rd column where the background color is yellow are unreadable: Hide a value or a range of values Now we are going to hide values from 5 to 9 (inclusive): !groups dot 1,dot 2,dot 3 !colors #028482,#7ABA7A,yellow !title Example of dot plot !legendstyle circle !showLegends 1 !byarea 1 !grid 1 !gridlabel 1 !defaultStrokeColor pink !dotplots shape=circle,margin=2,colwidth=30,roundedcorner=3 !showdataValue show=1,fontsize=12,fontitalic=0,textalign=start,valuesToHide=5:9 A 8,13,5 B 10,20,20 C 8,9,7 D 20,20,20 Customise column label styles NOTE : modifier !columnLabelStyle is also supported by heatmap. The 'value' of the modifier !columnLabelStyle can be any combination of the following, separated by a \",\"; for example: show=1,fontsize=14,fontitalic=0,fontbold=1,textangle=60,fontcolor=red key alternative valu description show = 1 0 show or hide data values; optional; if omitted, the column lables will be shown fontsize=12 any integer set font size; optional; default = 10 fontcolor=red any value color name set text color for all labels; optional; default = colors matching the corresponding columns fontitalic=1 0 set font italic; optional; default = 0 fontbold=1 0 set font weight to bold; optional; default = 0 textangle=-60 any number(s) set rotation angle; optional, default = -60 Example Example 1 ##dot plots !groups dot 1,dot 2,dot 3 ## -- set stroke color -- !colors #028482:blue,#7ABA7A:gold,#B76EB8:darkgrey ## -- set stroke width to 2 -- #!defaultStrokeColor pink !defaultStrokeWidth 2 !title Example of dot plot !legendstyle circle !showLegends 1 !byarea 1 !grid 1 !gridlabel 1 !dotplots shape=circle,margin=2,colwidth=30,roundedcorner=3 !showdataValue show=1,fontsize=12,fontcolor=white,valuestohide=5:9 !columLabelStyle show=1,fontsize=14,fontbold=1,textangle=60 A 8,13,5 B 10,20,20 C 8,9,7 D 20,20,20","title":"Dotplot"},{"location":"dataset/dotplots/#tree","text":"(A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Example dataset: ##dot plots !groups dot 1,dot 2,dot 3 !colors #028482,#7ABA7A,yellow !title Example of dot plot # -- legends -- !legendstyle circle !showLegends 1 ## -- if !scalebycol is set to 1, each column of data will be scaled independently !scalebycol 0 !byarea 1 # ---- grid and grid label / group label are also supported -- !grid 1 !gridlabel 1 # stroke and stroke color also work here !defaultStrokeColor pink #!defaultStrokeWidth 2 # here shape can be 'rect' or 'circle'; roundedcorner only applies to 'rect' shapes ... !dotplots shape=circle,margin=2,colwidth=30,roundedcorner=3 ## -- show data value works at here as well -- !showdataValue show=1,fontsize=12,fontcolor=black A 8,13,5 B 10,20,20 C 8,9,7 D 20,20,20","title":"Tree"},{"location":"dataset/dotplots/#supported-modifiers","text":"The following 'modifiers' (Key-Value pairs) are supported for dot plots: Key (case insensitive) Value Description universal modifiers !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendStyle or !Style rect or circle or star shapes to be plotted before the legend texts; default = rect !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ; note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset modifiers shared with Bar Charts modifiers that apply to both Bar Charts and Dot Plots !grid none show a background grid !gridlabel or !axis none show grid labels (note: does not work in circular modes !defaultStrokeWidth any value >= 0 stroke width that applies to both legends and the chart !defaultStrokeColor any valid color name such as red and yellow and html hex color such as #FF00FF stroke color that applies to both legends and the chart; see more about stroke colors; also see the section below dot plots specific !scalebycol none scale the data by column, i.e. the max value in a column will take the maximum plot width of a column; default is to scale by the maximum of all data other modifiers !dotplots see section below for more details !showdataValue see section show data value for more details !columnLabelStyle tweak column label styles; see 'column label style' below for detail Tip notes on preparing your datasets!! please always use TAB to separate the modifiers and their values. if a modifier is used (accidentally) multiple tiles, only the last one will be used. the \"data\" part of this dataset can only contain two columns of tab-delimited texts; the third column, if presents, will be ignored please also always use TAB to separate the columns in the data section.","title":"Supported modifiers"},{"location":"dataset/dotplots/#the-dotplots-modifier","text":"The 'value' of the modifier !dotplots can be any combination of the following, separated by a \",\": shape=circle,margin=2,colwidth=30,roundedcorner=3 key alternative value description shape = circle rect shape of the dot plots; default is circle colwidth=30 any integer > 0 set pixel width per column ; optional; default = 20 margin=2 any integer >= 0 set pixel space between columns; optional; default = 0 roundedcorner=1 any integer >= 0 set rounded corner in pixels for rectangular; valid when shape=rect; optional, default = 0","title":"The !dotplots modifier"},{"location":"dataset/dotplots/#strokes","text":"User can choose different stroke colors for different columns using the modifier !colors; for example, by simply changing the value of !colors to : #028482:blue,#7ABA7A:gold,#B76EB8:darkgrey For example: ##dot plots !groups dot 1,dot 2,dot 3 ## -- set stroke color -- !colors #028482:blue,#7ABA7A:gold,#B76EB8:darkgrey ## -- set stroke width to 2 -- #!defaultStrokeColor pink !defaultStrokeWidth 2 !title Example of dot plot !legendstyle circle !showLegends 1 !byarea 1 !grid 1 !gridlabel 1 !dotplots shape=circle,margin=2,colwidth=30,roundedcorner=3 !showdataValue show=1,fontsize=12,fontcolor=white A 8,13,5 B 10,20,20 C 8,9,7 D 20,20,20","title":"Strokes"},{"location":"dataset/dotplots/#show-data-value","text":"The 'value' of the modifier !showdataValue can be any combination of the following, separated by a \",\": key alternative value description show = 1 0 show or hide data values; optional; the data values will be shown if omitted fontsize=12 any integer set font size; optional; default = 10 fontcolor=red any value color name set text color; optional; default = 'black' or 'white' depending on the background color fontitalic=1 0 set font italic; optional; default = 0 valuesToHide=value1, or valuesToHide=value1:value2 any number(s) specify a single value to hide, e.g. valuesToHide=9, or a range of values to hide, e.g. valuesToHide=0.5:10 (inclusive). Default is to hide none NOTE : when 'fontcolor' is omitted, the default font color will be either 'black' or 'white' depending the background color, for example: !groups dot 1,dot 2,dot 3 !colors #028482,#7ABA7A,yellow !title Example of dot plot !legendstyle circle !showLegends 1 !byarea 1 !grid 1 !gridlabel 1 !defaultStrokeColor pink !dotplots shape=circle,margin=2,colwidth=30,roundedcorner=3 !showdataValue show=1,fontsize=12,fontitalic=0,textalign=start A 8,13,5 B 10,20,20 C 8,9,7 D 20,20,20 The purpose here is to ensure the readability of the texts on any background colors. In this particular case, if we force the text color to 'white': !groups dot 1,dot 2,dot 3 !colors #028482,#7ABA7A,yellow !title Example of dot plot !legendstyle circle !showLegends 1 !byarea 1 !grid 1 !gridlabel 1 !defaultStrokeColor pink !dotplots shape=circle,margin=2,colwidth=30,roundedcorner=3 !showdataValue show=1,fontsize=12,fontcolor=white A 8,13,5 B 10,20,20 C 8,9,7 D 20,20,20 ... the texts of the 3rd column where the background color is yellow are unreadable:","title":"Show data value"},{"location":"dataset/dotplots/#hide-a-value-or-a-range-of-values","text":"Now we are going to hide values from 5 to 9 (inclusive): !groups dot 1,dot 2,dot 3 !colors #028482,#7ABA7A,yellow !title Example of dot plot !legendstyle circle !showLegends 1 !byarea 1 !grid 1 !gridlabel 1 !defaultStrokeColor pink !dotplots shape=circle,margin=2,colwidth=30,roundedcorner=3 !showdataValue show=1,fontsize=12,fontitalic=0,textalign=start,valuesToHide=5:9 A 8,13,5 B 10,20,20 C 8,9,7 D 20,20,20","title":"Hide a value or a range of values"},{"location":"dataset/dotplots/#customise-column-label-styles","text":"NOTE : modifier !columnLabelStyle is also supported by heatmap. The 'value' of the modifier !columnLabelStyle can be any combination of the following, separated by a \",\"; for example: show=1,fontsize=14,fontitalic=0,fontbold=1,textangle=60,fontcolor=red key alternative valu description show = 1 0 show or hide data values; optional; if omitted, the column lables will be shown fontsize=12 any integer set font size; optional; default = 10 fontcolor=red any value color name set text color for all labels; optional; default = colors matching the corresponding columns fontitalic=1 0 set font italic; optional; default = 0 fontbold=1 0 set font weight to bold; optional; default = 0 textangle=-60 any number(s) set rotation angle; optional, default = -60 Example","title":"Customise column label styles"},{"location":"dataset/dotplots/#example-1","text":"##dot plots !groups dot 1,dot 2,dot 3 ## -- set stroke color -- !colors #028482:blue,#7ABA7A:gold,#B76EB8:darkgrey ## -- set stroke width to 2 -- #!defaultStrokeColor pink !defaultStrokeWidth 2 !title Example of dot plot !legendstyle circle !showLegends 1 !byarea 1 !grid 1 !gridlabel 1 !dotplots shape=circle,margin=2,colwidth=30,roundedcorner=3 !showdataValue show=1,fontsize=12,fontcolor=white,valuestohide=5:9 !columLabelStyle show=1,fontsize=14,fontbold=1,textangle=60 A 8,13,5 B 10,20,20 C 8,9,7 D 20,20,20","title":"Example 1"},{"location":"dataset/genesynteny/","text":"Overview Evolview supports visualization of gene synteny.The annotation has the following mandatory properties: !groups Provide the genes represented in the plot. !Colors Provide the colors in which genes are represented. !genesynteny gene display properties and visualization style provided by the user !totgenes Total genes used for the plot.(should be same as total number of groups) Here is an quick example Related modifiers Supported Key-Value pairs Key (case insensitive) Value Description width=20 default value is 20 the width of gene is decided by user input or uses default pre-set value height=10 default value is 10 the height of gene is decided by user input or uses default pre-set value style=1 default value is 1 Default style is set to be 1,for other visualization users can choose other styles. fillbg=1 value can b 1 or 0 the gene blocks can have filled background color or transparent. strokecolor=blue the stroke color for the genes. the default color is same as the color of the gene background. stroketype=line default value is the line Default style is set to be line,for other visualization users can choose dashlines. fontcolor=black any color name or valid html hex colors such as #FF0000 default color of group labels; default = black; if omitted, uses 'color' fontsize=12 any integer set font size; optional; default = 10 fontitalic=1 0 set font italic; optional; default = 0 textalign=middle start or end set text align; optional; default = middle; see the following examples bkcolor=colorname any color name or valid html hex colors such as #FFFF00 default color for group background; default = lightblue Data Each line of the Data section usually consists two parts, separated by a TAB . The first part defines to where the group label will be placed, it can be either: names of two leaf labels, separated by a ',', or a name of a leaf label. The second part specifics the 'label' (required) and second part provides the gene information(gane_name:direction). The directions can 0: unknown direction,1:left arrow,2:right arrow See below: Visualization styles Tree (A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Style-1 Style-1 copy & paste the following contents to Evolview to view the visualisation results: Example-1 Example 1 !groups g1,g2,g3 !Colors red,green,blue !genesynteny style=1,fontcolor=black,fontsize=8 !totgenes 3 !showGeneLabel 0 !showGeneDirection 1 A g1:1,g2:0,g3:0 B g1:1,g3:1 C g2:0,g3:1 D g3:2 Example-2 Example 2 with !showGeneLabel 1 prints the gene labels and absence of !showGeneDirection hides the direction information of the genes. ! groups g1 , g2 , g3 ! Colors red , green , blue ! genesynteny style = 1 , fontcolor = black , fontsize = 15 , width = 40 , height = 20 ! totgenes 3 ! showGeneLabel 1 A g1 : 1 , g2 : 0 , g3 : 0 B g1 : 1 , g2 : 2 , g3 : 1 C g1 : 2 , g2 : 0 , g3 : 1 D g1 : 1 , g2 : 0 , g3 : 2 Style-2 Style-2 The style info is set using the style keyword in the gene synteny properties. Example-1 Example 1 ! groups g1 , g2 , g3 ! Colors red , green , blue ! genesynteny style = 1 , fontcolor = black , fontsize = 8 ! totgenes 3 ! showGeneLabel 0 ! showGeneDirection 1 A g1 : 1 , g2 : 0 , g3 : 0 B g1 : 1 , g3 : 1 C g2 : 0 , g3 : 1 D g3 : 2 Example-2 Example 2 !groups g1,g2,g3 !Colors red,green,blue !genesynteny style=2,fontcolor=black,fontsize=8,width=40,height=18 !totgenes 3 !showGeneLabel 0 !showGeneDirection 1 A g1:1,g2:0,g3:0 B g1:1,g2:2,g3:1 C g1:2,g2:0,g3:1 D g1:1,g2:0,g3:2","title":"Gene Synteny"},{"location":"dataset/genesynteny/#overview","text":"Evolview supports visualization of gene synteny.The annotation has the following mandatory properties: !groups Provide the genes represented in the plot. !Colors Provide the colors in which genes are represented. !genesynteny gene display properties and visualization style provided by the user !totgenes Total genes used for the plot.(should be same as total number of groups) Here is an quick example","title":"Overview"},{"location":"dataset/genesynteny/#related-modifiers","text":"Supported Key-Value pairs Key (case insensitive) Value Description width=20 default value is 20 the width of gene is decided by user input or uses default pre-set value height=10 default value is 10 the height of gene is decided by user input or uses default pre-set value style=1 default value is 1 Default style is set to be 1,for other visualization users can choose other styles. fillbg=1 value can b 1 or 0 the gene blocks can have filled background color or transparent. strokecolor=blue the stroke color for the genes. the default color is same as the color of the gene background. stroketype=line default value is the line Default style is set to be line,for other visualization users can choose dashlines. fontcolor=black any color name or valid html hex colors such as #FF0000 default color of group labels; default = black; if omitted, uses 'color' fontsize=12 any integer set font size; optional; default = 10 fontitalic=1 0 set font italic; optional; default = 0 textalign=middle start or end set text align; optional; default = middle; see the following examples bkcolor=colorname any color name or valid html hex colors such as #FFFF00 default color for group background; default = lightblue","title":"Related modifiers"},{"location":"dataset/genesynteny/#data","text":"Each line of the Data section usually consists two parts, separated by a TAB . The first part defines to where the group label will be placed, it can be either: names of two leaf labels, separated by a ',', or a name of a leaf label. The second part specifics the 'label' (required) and second part provides the gene information(gane_name:direction). The directions can 0: unknown direction,1:left arrow,2:right arrow See below:","title":"Data"},{"location":"dataset/genesynteny/#visualization-styles","text":"","title":"Visualization styles"},{"location":"dataset/genesynteny/#tree","text":"(A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Style-1","title":"Tree"},{"location":"dataset/genesynteny/#style-1","text":"copy & paste the following contents to Evolview to view the visualisation results: Example-1","title":"Style-1"},{"location":"dataset/genesynteny/#example-1","text":"!groups g1,g2,g3 !Colors red,green,blue !genesynteny style=1,fontcolor=black,fontsize=8 !totgenes 3 !showGeneLabel 0 !showGeneDirection 1 A g1:1,g2:0,g3:0 B g1:1,g3:1 C g2:0,g3:1 D g3:2 Example-2","title":"Example 1"},{"location":"dataset/genesynteny/#example-2","text":"with !showGeneLabel 1 prints the gene labels and absence of !showGeneDirection hides the direction information of the genes. ! groups g1 , g2 , g3 ! Colors red , green , blue ! genesynteny style = 1 , fontcolor = black , fontsize = 15 , width = 40 , height = 20 ! totgenes 3 ! showGeneLabel 1 A g1 : 1 , g2 : 0 , g3 : 0 B g1 : 1 , g2 : 2 , g3 : 1 C g1 : 2 , g2 : 0 , g3 : 1 D g1 : 1 , g2 : 0 , g3 : 2 Style-2","title":"Example 2"},{"location":"dataset/genesynteny/#style-2","text":"The style info is set using the style keyword in the gene synteny properties. Example-1","title":"Style-2"},{"location":"dataset/genesynteny/#example-1_1","text":"! groups g1 , g2 , g3 ! Colors red , green , blue ! genesynteny style = 1 , fontcolor = black , fontsize = 8 ! totgenes 3 ! showGeneLabel 0 ! showGeneDirection 1 A g1 : 1 , g2 : 0 , g3 : 0 B g1 : 1 , g3 : 1 C g2 : 0 , g3 : 1 D g3 : 2 Example-2","title":"Example 1"},{"location":"dataset/genesynteny/#example-2_1","text":"!groups g1,g2,g3 !Colors red,green,blue !genesynteny style=2,fontcolor=black,fontsize=8,width=40,height=18 !totgenes 3 !showGeneLabel 0 !showGeneDirection 1 A g1:1,g2:0,g3:0 B g1:1,g2:2,g3:1 C g1:2,g2:0,g3:1 D g1:1,g2:0,g3:2","title":"Example 2"},{"location":"dataset/grouplabel/","text":"Overview Group labels will be showed next to the leaf labels: it falls into the 'Charts' category, and multiple Group Labels datasets can be displayed at the same time however, some styles (3, 4 and 5) have to be the first one of all charts; see examples below Here is an quick example (display styles 5,2 and 1 out of in total 5 styles ): Supported modifiers Apart from the common modifiers such as those that are related to legends, Group Labels supports an additional modifier: !groupLabel . The value of this modifier defines default settings for all group labels and can be any combination of the following, separated by a \",\": modifier alternative value description show=1 0 show or hide group labels; optional; the data values will be shown if omitted style=1 any integer from 1 to 5 visualization style of group labels; see the following section for more examples; default is 1 color=pink any color name or valid html hex colors such as #FF0000 default color for group lines and labels; default = black linewidth=2 any integer >= 0 set width of the group line; default = 1; if set to 0, the group line is hidden; valid only when style=1 ; see examples below linestyle=dashed if set, a dotted group line will be plotted; default is regular line; valid only when style=1 ; see examples below fontcolor=black any color name or valid html hex colors such as #FF0000 default color of group labels; default = black; if omitted, uses 'color' fontsize=12 any integer set font size; optional; default = 10 fontitalic=1 0 set font italic; optional; default = 0 textalign=middle start or end set text align; optional; default = middle; see the following examples textorientation=horizontal vertical set text orientation relative to leaf label; default = horizontal; see examples below bkcolor=colorname any color name or valid html hex colors such as #FFFF00 default color for group background; valid only when style = 2~5 ; default = lightblue marginPCT=0.05 any float value between 0 and 1 white space between group labels; the larger the value, the more white space to show; default = 0.05 Data Each line of the Data section usually consists two parts, separated by a TAB . The first part defines to where the group label will be placed, it can be either: names of two leaf labels, separated by a ',', or a name of a leaf label. The second part specifics the 'label' (required) and optional settings for this label such as font color, size. See below: Visualization styles Tree (chicken,((mouse,rat),(chimp,human))); Style-1 Style 1 (copy & paste the following contents to Evolview to view the visualisation results): !grouplabel color=pink,fontsize=14,fontcolor=black,linewidth=2 chicken text=cute by itself,fontcolor=red,linewidth=4 mouse,rat text=rodent,linecolor=darkgrey,fontcolor=purple,linestyle=dashed chimp,human text=mammal,color=darkgreen,textorientation=vertical,linewidth=4,fontsize=16 Style-2 Style 2 (copy & paste the following contents to Evolview to view the visualisation results): !grouplabel style=2,color=pink,show=1,marginPCT=0.05,fontsize=14,fontcolor=white,fontitalic=0,textalign=middle,textorientation=horizontal,linewidth=2 !op 0.8 chicken bkcolor=#404AC3,text=chicken mouse,rat bkcolor=green,text=rodent,fontcolor=darkred chimp,human bkcolor=#BE4144,text=mammal,textorientation=vertical,linewidth=4,fontsize=16 Style-3 Style 3 (copy & paste the following contents to Evolview to view the visualisation results): !grouplabel style=3,color=pink,show=1,marginPCT=0.05,fontsize=14,fontcolor=white,fontitalic=0,textalign=middle,textorientation=horizontal,linewidth=2 !op 0.8 chicken bkcolor=#404AC3,text=chicken mouse bkcolor=green,text=rodent,fontcolor=darkred rat,human bkcolor=#BE4144,text=mammal,textorientation=vertical,linewidth=4,fontsize=16 Style-4 Style 4 (copy & paste the following contents to Evolview to view the visualisation results): !grouplabel style=4,color=pink,show=1,marginPCT=0.05,fontsize=14,fontcolor=white,fontitalic=0,textalign=middle,textorientation=horizontal,linewidth=2 !op 0.8 chicken bkcolor=#404AC3,text=chicken mouse bkcolor=green,text=rodent,fontcolor=darkred rat,human bkcolor=#BE4144,text=mammal,textorientation=vertical,linewidth=4,fontsize=16 Style-5 Style 5, here the group labels will be drawn on the left of the tree; in circular mode this wouldn't work so it'll be plotted as style = 4. (copy & paste the following contents to Evolview to view the visualisation results) !grouplabel style=5,color=pink,show=1,marginPCT=0.05,fontsize=14,fontcolor=white,fontitalic=0,textalign=middle,textorientation=horizontal,linewidth=2 !op 0.8 chicken bkcolor=#404AC3,text=chicken mouse bkcolor=green,text=rodent,fontcolor=darkred rat,human bkcolor=#BE4144,text=mammal,textorientation=vertical,linewidth=4,fontsize=16 Example Example 1 chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example Example 2 # group label ; color applies to both the group labels and lines ... !GroupLabel color=red chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example Example 3 # group label ; now use a different color for the font; html hex color is also supported !GroupLabel color=red,fontcolor=#0000FF chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example Example 4 # group label ; a more complicated example !GroupLabel color=red,fontcolor=#0000FF,fontsize=20,fontitalic=1,textalign=start,textorientation=horizontal,linewidth=2 chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example Example 5 textalign=start|end|middle: ## by default group labels are placed at the middle of the group line; the positions can be ## specified using textalign with one of the three options: start, end or middle !GroupLabel textalign=end chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example Example 6 textorientation=horizontal|vertical ; NOTE the difference with 'textalign' ## -- textorientation specifies the orientation of group labels relative to leaf labels !GroupLabel textorientation=vertical chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example Example 7 ## -- textorientation can be used in combination with textalign -- !GroupLabel textalign=end,textorientation=vertical chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example Example 8 use linewidth and linestyle to change the looks of group lines: !GroupLabel linewidth=10,linestyle=dashed,color=red,fontcolor=black chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example Example 9 by default, the settings in GroupLabel will be applied to all group labels, however, they could be overridden by local settings: !grouplabel color=pink,show=1,fontsize=14,fontitalic=0,textalign=middle,textorientation=horizontal,linewidth=2 chicken text=cute by itself,linewidth=4 mouse,rat text=rodent,linecolor=darkgrey,fontcolor=purple,linestyle=dashed,textalign=middle chimp,human text=mammal,color=darkgreen,textorientation=vertical,linewidth=4,fontsize=16,textalign=end Add group label to collapsed trees Evolview supports collapsing at internal nodes; collapsed nodes are treated as leaf nodes. It is therefore very straightforward to add group labels to a collapsed tree. See here for more information.","title":"Group label"},{"location":"dataset/grouplabel/#overview","text":"Group labels will be showed next to the leaf labels: it falls into the 'Charts' category, and multiple Group Labels datasets can be displayed at the same time however, some styles (3, 4 and 5) have to be the first one of all charts; see examples below Here is an quick example (display styles 5,2 and 1 out of in total 5 styles ):","title":"Overview"},{"location":"dataset/grouplabel/#supported-modifiers","text":"Apart from the common modifiers such as those that are related to legends, Group Labels supports an additional modifier: !groupLabel . The value of this modifier defines default settings for all group labels and can be any combination of the following, separated by a \",\": modifier alternative value description show=1 0 show or hide group labels; optional; the data values will be shown if omitted style=1 any integer from 1 to 5 visualization style of group labels; see the following section for more examples; default is 1 color=pink any color name or valid html hex colors such as #FF0000 default color for group lines and labels; default = black linewidth=2 any integer >= 0 set width of the group line; default = 1; if set to 0, the group line is hidden; valid only when style=1 ; see examples below linestyle=dashed if set, a dotted group line will be plotted; default is regular line; valid only when style=1 ; see examples below fontcolor=black any color name or valid html hex colors such as #FF0000 default color of group labels; default = black; if omitted, uses 'color' fontsize=12 any integer set font size; optional; default = 10 fontitalic=1 0 set font italic; optional; default = 0 textalign=middle start or end set text align; optional; default = middle; see the following examples textorientation=horizontal vertical set text orientation relative to leaf label; default = horizontal; see examples below bkcolor=colorname any color name or valid html hex colors such as #FFFF00 default color for group background; valid only when style = 2~5 ; default = lightblue marginPCT=0.05 any float value between 0 and 1 white space between group labels; the larger the value, the more white space to show; default = 0.05","title":"Supported modifiers"},{"location":"dataset/grouplabel/#data","text":"Each line of the Data section usually consists two parts, separated by a TAB . The first part defines to where the group label will be placed, it can be either: names of two leaf labels, separated by a ',', or a name of a leaf label. The second part specifics the 'label' (required) and optional settings for this label such as font color, size. See below:","title":"Data"},{"location":"dataset/grouplabel/#visualization-styles","text":"","title":"Visualization styles"},{"location":"dataset/grouplabel/#tree","text":"(chicken,((mouse,rat),(chimp,human))); Style-1","title":"Tree"},{"location":"dataset/grouplabel/#style-1","text":"(copy & paste the following contents to Evolview to view the visualisation results): !grouplabel color=pink,fontsize=14,fontcolor=black,linewidth=2 chicken text=cute by itself,fontcolor=red,linewidth=4 mouse,rat text=rodent,linecolor=darkgrey,fontcolor=purple,linestyle=dashed chimp,human text=mammal,color=darkgreen,textorientation=vertical,linewidth=4,fontsize=16 Style-2","title":"Style 1"},{"location":"dataset/grouplabel/#style-2","text":"(copy & paste the following contents to Evolview to view the visualisation results): !grouplabel style=2,color=pink,show=1,marginPCT=0.05,fontsize=14,fontcolor=white,fontitalic=0,textalign=middle,textorientation=horizontal,linewidth=2 !op 0.8 chicken bkcolor=#404AC3,text=chicken mouse,rat bkcolor=green,text=rodent,fontcolor=darkred chimp,human bkcolor=#BE4144,text=mammal,textorientation=vertical,linewidth=4,fontsize=16 Style-3","title":"Style 2"},{"location":"dataset/grouplabel/#style-3","text":"(copy & paste the following contents to Evolview to view the visualisation results): !grouplabel style=3,color=pink,show=1,marginPCT=0.05,fontsize=14,fontcolor=white,fontitalic=0,textalign=middle,textorientation=horizontal,linewidth=2 !op 0.8 chicken bkcolor=#404AC3,text=chicken mouse bkcolor=green,text=rodent,fontcolor=darkred rat,human bkcolor=#BE4144,text=mammal,textorientation=vertical,linewidth=4,fontsize=16 Style-4","title":"Style 3"},{"location":"dataset/grouplabel/#style-4","text":"(copy & paste the following contents to Evolview to view the visualisation results): !grouplabel style=4,color=pink,show=1,marginPCT=0.05,fontsize=14,fontcolor=white,fontitalic=0,textalign=middle,textorientation=horizontal,linewidth=2 !op 0.8 chicken bkcolor=#404AC3,text=chicken mouse bkcolor=green,text=rodent,fontcolor=darkred rat,human bkcolor=#BE4144,text=mammal,textorientation=vertical,linewidth=4,fontsize=16 Style-5","title":"Style 4"},{"location":"dataset/grouplabel/#style-5","text":"here the group labels will be drawn on the left of the tree; in circular mode this wouldn't work so it'll be plotted as style = 4. (copy & paste the following contents to Evolview to view the visualisation results) !grouplabel style=5,color=pink,show=1,marginPCT=0.05,fontsize=14,fontcolor=white,fontitalic=0,textalign=middle,textorientation=horizontal,linewidth=2 !op 0.8 chicken bkcolor=#404AC3,text=chicken mouse bkcolor=green,text=rodent,fontcolor=darkred rat,human bkcolor=#BE4144,text=mammal,textorientation=vertical,linewidth=4,fontsize=16 Example","title":"Style 5,"},{"location":"dataset/grouplabel/#example-1","text":"chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example","title":"Example 1"},{"location":"dataset/grouplabel/#example-2","text":"# group label ; color applies to both the group labels and lines ... !GroupLabel color=red chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example","title":"Example 2"},{"location":"dataset/grouplabel/#example-3","text":"# group label ; now use a different color for the font; html hex color is also supported !GroupLabel color=red,fontcolor=#0000FF chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example","title":"Example 3"},{"location":"dataset/grouplabel/#example-4","text":"# group label ; a more complicated example !GroupLabel color=red,fontcolor=#0000FF,fontsize=20,fontitalic=1,textalign=start,textorientation=horizontal,linewidth=2 chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example","title":"Example 4"},{"location":"dataset/grouplabel/#example-5","text":"textalign=start|end|middle: ## by default group labels are placed at the middle of the group line; the positions can be ## specified using textalign with one of the three options: start, end or middle !GroupLabel textalign=end chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example","title":"Example 5"},{"location":"dataset/grouplabel/#example-6","text":"textorientation=horizontal|vertical ; NOTE the difference with 'textalign' ## -- textorientation specifies the orientation of group labels relative to leaf labels !GroupLabel textorientation=vertical chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example","title":"Example 6"},{"location":"dataset/grouplabel/#example-7","text":"## -- textorientation can be used in combination with textalign -- !GroupLabel textalign=end,textorientation=vertical chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example","title":"Example 7"},{"location":"dataset/grouplabel/#example-8","text":"use linewidth and linestyle to change the looks of group lines: !GroupLabel linewidth=10,linestyle=dashed,color=red,fontcolor=black chicken text=cute by itself mouse,rat text=rodent chimp,human text=mammal Example","title":"Example 8"},{"location":"dataset/grouplabel/#example-9","text":"by default, the settings in GroupLabel will be applied to all group labels, however, they could be overridden by local settings: !grouplabel color=pink,show=1,fontsize=14,fontitalic=0,textalign=middle,textorientation=horizontal,linewidth=2 chicken text=cute by itself,linewidth=4 mouse,rat text=rodent,linecolor=darkgrey,fontcolor=purple,linestyle=dashed,textalign=middle chimp,human text=mammal,color=darkgreen,textorientation=vertical,linewidth=4,fontsize=16,textalign=end","title":"Example 9"},{"location":"dataset/grouplabel/#add-group-label-to-collapsed-trees","text":"Evolview supports collapsing at internal nodes; collapsed nodes are treated as leaf nodes. It is therefore very straightforward to add group labels to a collapsed tree. See here for more information.","title":"Add group label to collapsed trees"},{"location":"dataset/heatmap/","text":"Overview note: please consult the tree 'heatmaps' in the DEMOS project to see the Heatmap in action when exported to pdf using Firefox, the color gradient in the legend is known to be wrong; therefore Google Chrome is strongly recommended. First, let's see some examples. The tree: (A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; ... and an example dataset: #heatmap !legendTitle Example of heatmap !showLegends 1 #!defaultStrokeColor pink #!defaultStrokeWidth 2 !colorgradient blue, yellow,red !colorgradientMarkLabel 0,5,10,15,20,25 # -- heatmap column labels -- !showHeatMapColumnLabel 1 !heatmapColumnLabels e1,e2,e3,control # -- heatmap -- !heatmap margin=2,colwidth=30,roundedcorner=2 # -- show data value !showdataValue show=1,fontsize=12,fontitalic=0,textalign=start A -2,3,5,0 B 7,9,10,23 C 13,15,19,8 D 20,22,25,4 here is how the plot looks like (with annotations): Supported modifiers The following 'modifiers' (Key-Value pairs) are supported for heatmap: Key (case insensitive) Value Description universal modifiers !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset modifiers shared with Bar Charts and Dot plots modifiers that apply to both Bar Charts, Dot Plots and Heatmap !gridlabel or !axis or !showHeatMapColumnLabel none, or any integer; 0 : hide column labels; >= 1: show column labels; note: using !showHeatMapColumnLabel here is recommended show heatmap column labels (note: does not work in circular modes) !columnLabelStyle tweak column label styles; see section 'colum label style' for detail !defaultStrokeWidth any value >= 0 stroke width that applies to both legends and the chart !defaultStrokeColor any valid color name such as red and yellow and html hex color such as #FF00FF stroke color that applies to both legends and the chart; see more about stroke colors; also see the section bellow heatmap specific !colorgradient or !colorspectrum two or more valid colors separated by ','; a color gradient will be generated using the specified colors (see more examples bellow); this modifier is mandatory valid colors include html color names (such as red, yellow, lightblue; see here for a complete list of supported html color names) as well as html hex colors such as #FF00FF !colorgradientMarkLabel or !colorgradientMarkLabels one or more valid numbers separated by ',' such as -3,2,5,7,9,10.5; see bellow for more examples numbers to be plotted in the legend next to the color gradient !heatmapColumnLabel or !heatmapColumnLabels or one or more text strings separated by ',', such as trait 1,trait 2,control; see bellow for more examples texts to be plotted on the top of the heatmap, each text string corresponds to a column of the heatmap; NOTE not implemented yet in circular mode !colorGradientPixelHeight or !colorGradientHeight any integer > 1 pixel height of the color gradient in the legend, default = 100 !colorGradientPixelWidth or !colorGradientWidth any integer > 1 pixel width of the color gradient in the legend, default = 15 !heatmap see section the !heatmap modifier optional show data values see section show data value for more details unsupported modifiers modifiers that are not supported in Heatmap !Groups or !LegendText !LegendStyle or !Style !LegendColors or !Colors !grid !plotwidth Tip notes on preparing your datasets!! please always use TAB to separate the modifiers and their values. if a modifier is used (accidentally) multiple tiles, only the last one will be used. the \"data\" part of this dataset can only contain two columns of tab-delimited texts; the third column, if presents, will be ignored please also always use TAB to separate the columns in the data section. Strokes Stroke color and width is supported in heat plot; the corresponding modifiers are !defaultStrokeColor and !defaultStrokeWidth . !defaultStrokeWidth is optional with the default value of 1. Here is an example: #heatmap !title Example of heatmap !showLegends 1 !defaultStrokeColor gold !defaultStrokeWidth 2 !colorgradient green, yellow,red !colorgradientMarkLabel 0,5,10,15,20,25 # -- heatmap column labels -- !showHeatMapColumnLabel 1 !heatmapColumnLabels e1,e2,e3,control # -- heatmap -- !heatmap margin=2,colwidth=30,roundedcorner=2 # -- show data value !showdataValue show=1,fontsize=12 A -2,3,5,0 B 7,9,10,23 C 13,15,19,8 D 20,22,25,4 the !heatmap modifier The 'value' of the modifier !heatmap can be any combination of the following, separated by a \",\": margin=2,colwidth=30,roundedcorner=2 Please note the !heatmap modifier is optional; if omitted, default values will be used. key alternative value description colwidth=30 any integer > 0 set pixel width per column ; optional; default = 20 margin=2 any integer >= 0 set pixel space between columns; optional; default = 0 roundedcorner=1 any integer >= 0 set rounded corner in pixels for rectangular; valid when shape=rect; optional, default = 0 Here are examples showing how these attributes work. Example Example 1 no !heatmap, everything is by default: #heatmap !title Example of heatmap !showLegends 1 #!defaultStrokeColor gold #!defaultStrokeWidth 2 !colorgradient green, yellow,red !colorgradientMarkLabel 0,5,10,15,20,25 # -- heatmap column labels -- !showHeatMapColumnLabel 1 !heatmapColumnLabels e1,e2,e3,control # -- heatmap -- #!heatmap margin=2,colwidth=30,roundedcorner=2 # -- show data value !showdataValue show=1,fontsize=12 A 0,3,5,6 B 7,9,10,12 C 13,15,16,19 D 20,22,23,25 Example Example 2 margin=2: !heatmap margin=2,colwidth=20 Example Example 3 roundedcorner=5: !heatmap margin=2,colwidth=30,roundedcorner=5 Show data value Heatmap supports the !showdataValue modifier; the 'value' of !showdataValue can be any combination of the following, separated by a \",\": key alternative value description show = 1 0 show or hide data values; optional; the data values will be shown if omitted fontsize=12 any integer set font size; optional; default = 10 fontcolor=red any value color name set text color; optional; default = 'black' or 'white' depending on the background color fontitalic=1 0 set font italic; optional; default = 0 NOTE : when 'fontcolor' is omitted, a 'black' or 'white' color will be chosen automatically depending the background color of each value in order to increase readability. Color gradient Creating color gradient is very easy in EvolView by using the !colorgradient or !colorspectrum modifier. Here are a few examples: Example Example 1 #heatmap !title Example of heatmap !showLegends 1 #!defaultStrokeColor gold #!defaultStrokeWidth 2 !colorgradient green,yellow,red !colorgradientMarkLabel 0,5,10,15,20,25 # -- heatmap column labels -- !showHeatMapColumnLabel 1 !heatmapColumnLabels e1,e2,e3,control # -- heatmap -- !heatmap margin=2,colwidth=30,roundedcorner=2 # -- show data value !showdataValue show=1,fontsize=12,fontitalic=0,textalign=start A 0,3,5,6 B 7,9,10,12 C 13,15,16,19 D 20,22,23,25 Example Example 2 ## -- red to white to blue -- !colorgradient red,white,blue Example Example 3 ## -- grays; only two colors here -- !colorgradient black,white Example Example 4 ## -- use five colors this time -- !colorgradient blue,red,yellow,white,green Tick labels of the color gradient of the legend EvolView calculates automatically where the ticks and tick labels to plot on the color gradient of the legend, based on the min and max of user data. However, the results are not always up to users' standard. Users can use modifier !colorgradientMarkLabel / !colorgradientMarkLabels to customize the tick labels. The value of the modifier is one or more valid numbers, separated by ','. Here are some examples: Example Example 1 color gradient tick labels are automatically positioned: #heatmap !title Example of heatmap !showLegends 1 !colorgradient blue,red,yellow,white,green !showHeatMapColumnLabel 1 !heatmapColumnLabels e1,e2,e3,control !heatmap margin=1,colwidth=30,roundedcorner=0 !showdataValue show=1,fontsize=12,fontitalic=0 A -1,3,5,6 B 7,9,10,12 C 13,15,16,19 D 20,22,23,25 Example Example 2 customized tick labels using !colorgradientMarkLabel: !colorgradientMarkLabel 0,5,10,15,20,25 column label style customisation Heatmap also supports modifier !columnLabelStyle ; the value of this modifier can be any combination of the following, separated by a \",\": key alternative value description show = 1 0 show or hide data values; optional; if omitted, the column lables will be shown fontsize=12 any integer set font size; optional; default = 10 fontcolor=red any value color name set text color for all labels; optional; default = black fontitalic=1 0 set font italic; optional; default = 0 fontbold=1 0 set font weight to bold; optional; default = 0 textangle=-60 any number(s) set rotation angle; optional, default = -60 Here is an example: !title Example of heatmap !showLegends 1 !colorgradient blue,red,yellow,white,green !showHeatMapColumnLabel 1 !heatmapColumnLabels e1,e2,e3,control !heatmap margin=1,colwidth=30,roundedcorner=0 !showdataValue show=1,fontsize=12,fontitalic=0 !columLabelStyle show=1,fontsize=20,fontitalic=0,fontbold=1,textangle=60,fontcolor=red A -1,3,5,6 B 7,9,10,12 C 13,15,16,19 D 20,22,23,25 Add heatmap to collapsed trees Evolview supports collapsing at internal nodes; collapsed nodes are treated as leaf nodes. It is therefore very straightforward to add heatmaps to a collapsed tree. See here for more information.","title":"Heatmap"},{"location":"dataset/heatmap/#overview","text":"note: please consult the tree 'heatmaps' in the DEMOS project to see the Heatmap in action when exported to pdf using Firefox, the color gradient in the legend is known to be wrong; therefore Google Chrome is strongly recommended. First, let's see some examples. The tree: (A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; ... and an example dataset: #heatmap !legendTitle Example of heatmap !showLegends 1 #!defaultStrokeColor pink #!defaultStrokeWidth 2 !colorgradient blue, yellow,red !colorgradientMarkLabel 0,5,10,15,20,25 # -- heatmap column labels -- !showHeatMapColumnLabel 1 !heatmapColumnLabels e1,e2,e3,control # -- heatmap -- !heatmap margin=2,colwidth=30,roundedcorner=2 # -- show data value !showdataValue show=1,fontsize=12,fontitalic=0,textalign=start A -2,3,5,0 B 7,9,10,23 C 13,15,19,8 D 20,22,25,4 here is how the plot looks like (with annotations):","title":"Overview"},{"location":"dataset/heatmap/#supported-modifiers","text":"The following 'modifiers' (Key-Value pairs) are supported for heatmap: Key (case insensitive) Value Description universal modifiers !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset modifiers shared with Bar Charts and Dot plots modifiers that apply to both Bar Charts, Dot Plots and Heatmap !gridlabel or !axis or !showHeatMapColumnLabel none, or any integer; 0 : hide column labels; >= 1: show column labels; note: using !showHeatMapColumnLabel here is recommended show heatmap column labels (note: does not work in circular modes) !columnLabelStyle tweak column label styles; see section 'colum label style' for detail !defaultStrokeWidth any value >= 0 stroke width that applies to both legends and the chart !defaultStrokeColor any valid color name such as red and yellow and html hex color such as #FF00FF stroke color that applies to both legends and the chart; see more about stroke colors; also see the section bellow heatmap specific !colorgradient or !colorspectrum two or more valid colors separated by ','; a color gradient will be generated using the specified colors (see more examples bellow); this modifier is mandatory valid colors include html color names (such as red, yellow, lightblue; see here for a complete list of supported html color names) as well as html hex colors such as #FF00FF !colorgradientMarkLabel or !colorgradientMarkLabels one or more valid numbers separated by ',' such as -3,2,5,7,9,10.5; see bellow for more examples numbers to be plotted in the legend next to the color gradient !heatmapColumnLabel or !heatmapColumnLabels or one or more text strings separated by ',', such as trait 1,trait 2,control; see bellow for more examples texts to be plotted on the top of the heatmap, each text string corresponds to a column of the heatmap; NOTE not implemented yet in circular mode !colorGradientPixelHeight or !colorGradientHeight any integer > 1 pixel height of the color gradient in the legend, default = 100 !colorGradientPixelWidth or !colorGradientWidth any integer > 1 pixel width of the color gradient in the legend, default = 15 !heatmap see section the !heatmap modifier optional show data values see section show data value for more details unsupported modifiers modifiers that are not supported in Heatmap !Groups or !LegendText !LegendStyle or !Style !LegendColors or !Colors !grid !plotwidth Tip notes on preparing your datasets!! please always use TAB to separate the modifiers and their values. if a modifier is used (accidentally) multiple tiles, only the last one will be used. the \"data\" part of this dataset can only contain two columns of tab-delimited texts; the third column, if presents, will be ignored please also always use TAB to separate the columns in the data section.","title":"Supported modifiers"},{"location":"dataset/heatmap/#strokes","text":"Stroke color and width is supported in heat plot; the corresponding modifiers are !defaultStrokeColor and !defaultStrokeWidth . !defaultStrokeWidth is optional with the default value of 1. Here is an example: #heatmap !title Example of heatmap !showLegends 1 !defaultStrokeColor gold !defaultStrokeWidth 2 !colorgradient green, yellow,red !colorgradientMarkLabel 0,5,10,15,20,25 # -- heatmap column labels -- !showHeatMapColumnLabel 1 !heatmapColumnLabels e1,e2,e3,control # -- heatmap -- !heatmap margin=2,colwidth=30,roundedcorner=2 # -- show data value !showdataValue show=1,fontsize=12 A -2,3,5,0 B 7,9,10,23 C 13,15,19,8 D 20,22,25,4","title":"Strokes"},{"location":"dataset/heatmap/#the-heatmap-modifier","text":"The 'value' of the modifier !heatmap can be any combination of the following, separated by a \",\": margin=2,colwidth=30,roundedcorner=2 Please note the !heatmap modifier is optional; if omitted, default values will be used. key alternative value description colwidth=30 any integer > 0 set pixel width per column ; optional; default = 20 margin=2 any integer >= 0 set pixel space between columns; optional; default = 0 roundedcorner=1 any integer >= 0 set rounded corner in pixels for rectangular; valid when shape=rect; optional, default = 0 Here are examples showing how these attributes work. Example","title":"the !heatmap modifier"},{"location":"dataset/heatmap/#example-1","text":"no !heatmap, everything is by default: #heatmap !title Example of heatmap !showLegends 1 #!defaultStrokeColor gold #!defaultStrokeWidth 2 !colorgradient green, yellow,red !colorgradientMarkLabel 0,5,10,15,20,25 # -- heatmap column labels -- !showHeatMapColumnLabel 1 !heatmapColumnLabels e1,e2,e3,control # -- heatmap -- #!heatmap margin=2,colwidth=30,roundedcorner=2 # -- show data value !showdataValue show=1,fontsize=12 A 0,3,5,6 B 7,9,10,12 C 13,15,16,19 D 20,22,23,25 Example","title":"Example 1"},{"location":"dataset/heatmap/#example-2","text":"margin=2: !heatmap margin=2,colwidth=20 Example","title":"Example 2"},{"location":"dataset/heatmap/#example-3","text":"roundedcorner=5: !heatmap margin=2,colwidth=30,roundedcorner=5","title":"Example 3"},{"location":"dataset/heatmap/#show-data-value","text":"Heatmap supports the !showdataValue modifier; the 'value' of !showdataValue can be any combination of the following, separated by a \",\": key alternative value description show = 1 0 show or hide data values; optional; the data values will be shown if omitted fontsize=12 any integer set font size; optional; default = 10 fontcolor=red any value color name set text color; optional; default = 'black' or 'white' depending on the background color fontitalic=1 0 set font italic; optional; default = 0 NOTE : when 'fontcolor' is omitted, a 'black' or 'white' color will be chosen automatically depending the background color of each value in order to increase readability.","title":"Show data value"},{"location":"dataset/heatmap/#color-gradient","text":"Creating color gradient is very easy in EvolView by using the !colorgradient or !colorspectrum modifier. Here are a few examples: Example","title":"Color gradient"},{"location":"dataset/heatmap/#example-1_1","text":"#heatmap !title Example of heatmap !showLegends 1 #!defaultStrokeColor gold #!defaultStrokeWidth 2 !colorgradient green,yellow,red !colorgradientMarkLabel 0,5,10,15,20,25 # -- heatmap column labels -- !showHeatMapColumnLabel 1 !heatmapColumnLabels e1,e2,e3,control # -- heatmap -- !heatmap margin=2,colwidth=30,roundedcorner=2 # -- show data value !showdataValue show=1,fontsize=12,fontitalic=0,textalign=start A 0,3,5,6 B 7,9,10,12 C 13,15,16,19 D 20,22,23,25 Example","title":"Example 1"},{"location":"dataset/heatmap/#example-2_1","text":"## -- red to white to blue -- !colorgradient red,white,blue Example","title":"Example 2"},{"location":"dataset/heatmap/#example-3_1","text":"## -- grays; only two colors here -- !colorgradient black,white Example","title":"Example 3"},{"location":"dataset/heatmap/#example-4","text":"## -- use five colors this time -- !colorgradient blue,red,yellow,white,green","title":"Example 4"},{"location":"dataset/heatmap/#tick-labels-of-the-color-gradient-of-the-legend","text":"EvolView calculates automatically where the ticks and tick labels to plot on the color gradient of the legend, based on the min and max of user data. However, the results are not always up to users' standard. Users can use modifier !colorgradientMarkLabel / !colorgradientMarkLabels to customize the tick labels. The value of the modifier is one or more valid numbers, separated by ','. Here are some examples: Example","title":"Tick labels of the color gradient of the legend"},{"location":"dataset/heatmap/#example-1_2","text":"color gradient tick labels are automatically positioned: #heatmap !title Example of heatmap !showLegends 1 !colorgradient blue,red,yellow,white,green !showHeatMapColumnLabel 1 !heatmapColumnLabels e1,e2,e3,control !heatmap margin=1,colwidth=30,roundedcorner=0 !showdataValue show=1,fontsize=12,fontitalic=0 A -1,3,5,6 B 7,9,10,12 C 13,15,16,19 D 20,22,23,25 Example","title":"Example 1"},{"location":"dataset/heatmap/#example-2_2","text":"customized tick labels using !colorgradientMarkLabel: !colorgradientMarkLabel 0,5,10,15,20,25","title":"Example 2"},{"location":"dataset/heatmap/#column-label-style-customisation","text":"Heatmap also supports modifier !columnLabelStyle ; the value of this modifier can be any combination of the following, separated by a \",\": key alternative value description show = 1 0 show or hide data values; optional; if omitted, the column lables will be shown fontsize=12 any integer set font size; optional; default = 10 fontcolor=red any value color name set text color for all labels; optional; default = black fontitalic=1 0 set font italic; optional; default = 0 fontbold=1 0 set font weight to bold; optional; default = 0 textangle=-60 any number(s) set rotation angle; optional, default = -60 Here is an example: !title Example of heatmap !showLegends 1 !colorgradient blue,red,yellow,white,green !showHeatMapColumnLabel 1 !heatmapColumnLabels e1,e2,e3,control !heatmap margin=1,colwidth=30,roundedcorner=0 !showdataValue show=1,fontsize=12,fontitalic=0 !columLabelStyle show=1,fontsize=20,fontitalic=0,fontbold=1,textangle=60,fontcolor=red A -1,3,5,6 B 7,9,10,12 C 13,15,16,19 D 20,22,23,25","title":"column label style customisation"},{"location":"dataset/heatmap/#add-heatmap-to-collapsed-trees","text":"Evolview supports collapsing at internal nodes; collapsed nodes are treated as leaf nodes. It is therefore very straightforward to add heatmaps to a collapsed tree. See here for more information.","title":"Add heatmap to collapsed trees"},{"location":"dataset/leafImg/","text":"Overview Label image provides the users for option to insert image for each tree branch label. The users can provide the URL for the image to be used in the dataset file. The file consist of: Leaf name src of the image. The default value is an test image from Evolview. The image source should be a working URL of the image. Here is the Quick example: Related modifiers Supported Key-Value pairs Key (case insensitive) Value Description !showLeafLabel 0 or 1 Mandatory parameter. Show or hide the default leaf label names along with the images based on true or false flag. src image source URL Mandatory parameter. width integer/number value optional parameter to set size of the inserted image height integer /number value optional parameter to set size of the inserted image Tree (A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Example Example 1 NOTE : when src is left empty, default image is used by Evolview. !showLeafLabel 0 A src=https://evolgenius.info/pics/logo_.png B src= C src=https://evolgenius.info/pics/logo_.png D src= Example Example 2 We support some default inbuilt images for testing and trial purposes. users can use these to check the insert image label option along with the trees. !showLeafLabel 1 A src=1 B src=0 C src=2 D src=4 Example Example 2 To hide the leaf label text , use !showLeafLabel identifier. !showLeafLabel 0 A src=1 B src=0 C src=2 D src=4","title":"Leaf images"},{"location":"dataset/leafImg/#overview","text":"Label image provides the users for option to insert image for each tree branch label. The users can provide the URL for the image to be used in the dataset file. The file consist of: Leaf name src of the image. The default value is an test image from Evolview. The image source should be a working URL of the image. Here is the Quick example:","title":"Overview"},{"location":"dataset/leafImg/#related-modifiers","text":"Supported Key-Value pairs Key (case insensitive) Value Description !showLeafLabel 0 or 1 Mandatory parameter. Show or hide the default leaf label names along with the images based on true or false flag. src image source URL Mandatory parameter. width integer/number value optional parameter to set size of the inserted image height integer /number value optional parameter to set size of the inserted image","title":"Related modifiers"},{"location":"dataset/leafImg/#tree","text":"(A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Example","title":"Tree"},{"location":"dataset/leafImg/#example-1","text":"NOTE : when src is left empty, default image is used by Evolview. !showLeafLabel 0 A src=https://evolgenius.info/pics/logo_.png B src= C src=https://evolgenius.info/pics/logo_.png D src= Example","title":"Example 1"},{"location":"dataset/leafImg/#example-2","text":"We support some default inbuilt images for testing and trial purposes. users can use these to check the insert image label option along with the trees. !showLeafLabel 1 A src=1 B src=0 C src=2 D src=4 Example","title":"Example 2"},{"location":"dataset/leafImg/#example-2_1","text":"To hide the leaf label text , use !showLeafLabel identifier. !showLeafLabel 0 A src=1 B src=0 C src=2 D src=4","title":"Example 2"},{"location":"dataset/leafann/","text":"Overview Leaf annotation styles provide different ways to highlight and group the tree leaf branches.The annotation properties can be provided in two formats: !groups_class :Provides the annotation details for a specified group name or id. Leaf/Branch based annotation details can provided for each leaf along with leaf Name. Here is an quick example Related modifiers Supported Key-Value pairs Key (case insensitive) Value Description text=group name to be displayed any textual/string content Provide a label name to be displayed for the annotation group. id=some_unique_name any textual/string content without spaces Mandatory for using with !groups_class to represent the group annotation definitions. color=pink any color name or valid html hex colors such as #FF0000 default color for group lines and labels; default = black linewidth=2 any integer >= 0 set width of the group line; default = 1; if set to 0, the group line is hidden; valid only when style=1; see examples below linestyle=dashed if set, a dotted group line will be plotted; default is regular line; valid only when style=1; see examples below fontcolor=black any color name or valid html hex colors such as #FF0000 default color of group labels; default = black; if omitted, uses 'color' fontsize=12 any integer set font size; optional; default = 10 fontitalic=1 0 set font italic; optional; default = 0 textalign=middle start or end set text align; optional; default = middle; see the following examples bkcolor=colorname any color name or valid html hex colors such as #FFFF00 default color for group background; default = lightblue Data Each line of the Data section usually consists two parts, separated by a TAB . The first part defines to where the group label will be placed, it can be either: names of two leaf labels, separated by a ',', or a name of a leaf label. The second part specifics the 'label' (required) and either provide group_class id or settings for this label such as font color, size. Visualization styles Tree (A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Example Example 1 !groups bad,good !colors red,green ##class def !groups_class id=T1,text=bad,textalign=middle,shape=rect,bkcolor=red,color=black,fontsize=8 !groups_class id=T2,text=good,textalign=middle,shape=rect,bkcolor=green,color=black,fontsize=8 ##data A T1 B T2 C T1 D T1 Example Example 2 The shape of the annotation can be omitted, this gives us a text label next to the tree branch label with specified properties. !groups bad,good !colors red,green ##class def !groups_class id=T1,text=bad,textalign=middle,bkcolor=red,color=red,fontsize=8 !groups_class id=T2,text=good,textalign=middle,bkcolor=green,color=green,fontsize=8 ##data A T1 B T2 C T1 D T1 Example Example 3 The leaf annotation can also of gradient background type. This provides an gradient background that extends from the annotation label till the the brach. This can be applied using the !leaf_annotation_style 2 keyword. ! leaf_annotation_style 2 ##class def ! groups_class id = T1 , text = bad , bkcolor = red , color = black , fontsize = 8 ! groups_class id = T2 , text = good , bkcolor = green , color = black , fontsize = 8 ##data A T1 B T2 C , D T1","title":"Leaf annotation"},{"location":"dataset/leafann/#overview","text":"Leaf annotation styles provide different ways to highlight and group the tree leaf branches.The annotation properties can be provided in two formats: !groups_class :Provides the annotation details for a specified group name or id. Leaf/Branch based annotation details can provided for each leaf along with leaf Name. Here is an quick example","title":"Overview"},{"location":"dataset/leafann/#related-modifiers","text":"Supported Key-Value pairs Key (case insensitive) Value Description text=group name to be displayed any textual/string content Provide a label name to be displayed for the annotation group. id=some_unique_name any textual/string content without spaces Mandatory for using with !groups_class to represent the group annotation definitions. color=pink any color name or valid html hex colors such as #FF0000 default color for group lines and labels; default = black linewidth=2 any integer >= 0 set width of the group line; default = 1; if set to 0, the group line is hidden; valid only when style=1; see examples below linestyle=dashed if set, a dotted group line will be plotted; default is regular line; valid only when style=1; see examples below fontcolor=black any color name or valid html hex colors such as #FF0000 default color of group labels; default = black; if omitted, uses 'color' fontsize=12 any integer set font size; optional; default = 10 fontitalic=1 0 set font italic; optional; default = 0 textalign=middle start or end set text align; optional; default = middle; see the following examples bkcolor=colorname any color name or valid html hex colors such as #FFFF00 default color for group background; default = lightblue","title":"Related modifiers"},{"location":"dataset/leafann/#data","text":"Each line of the Data section usually consists two parts, separated by a TAB . The first part defines to where the group label will be placed, it can be either: names of two leaf labels, separated by a ',', or a name of a leaf label. The second part specifics the 'label' (required) and either provide group_class id or settings for this label such as font color, size.","title":"Data"},{"location":"dataset/leafann/#visualization-styles","text":"","title":"Visualization styles"},{"location":"dataset/leafann/#tree","text":"(A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; Example","title":"Tree"},{"location":"dataset/leafann/#example-1","text":"!groups bad,good !colors red,green ##class def !groups_class id=T1,text=bad,textalign=middle,shape=rect,bkcolor=red,color=black,fontsize=8 !groups_class id=T2,text=good,textalign=middle,shape=rect,bkcolor=green,color=black,fontsize=8 ##data A T1 B T2 C T1 D T1 Example","title":"Example 1"},{"location":"dataset/leafann/#example-2","text":"The shape of the annotation can be omitted, this gives us a text label next to the tree branch label with specified properties. !groups bad,good !colors red,green ##class def !groups_class id=T1,text=bad,textalign=middle,bkcolor=red,color=red,fontsize=8 !groups_class id=T2,text=good,textalign=middle,bkcolor=green,color=green,fontsize=8 ##data A T1 B T2 C T1 D T1 Example","title":"Example 2"},{"location":"dataset/leafann/#example-3","text":"The leaf annotation can also of gradient background type. This provides an gradient background that extends from the annotation label till the the brach. This can be applied using the !leaf_annotation_style 2 keyword. ! leaf_annotation_style 2 ##class def ! groups_class id = T1 , text = bad , bkcolor = red , color = black , fontsize = 8 ! groups_class id = T2 , text = good , bkcolor = green , color = black , fontsize = 8 ##data A T1 B T2 C , D T1","title":"Example 3"},{"location":"dataset/leafbkclr/","text":"Overview leafbackground colors will change the colors of leaf background. Similar to branch colors, multiple datasets can be uploaded to a tree, but only one can be shown at a time. Here is an example: Related modifiers Supported Key-Value pairs for leaf colors: Key (case insensitive) Value Description !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendStyle or !Style rect or circle or star shapes to be plotted before the legend texts; default = rect !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ; note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset the data Data are usually tab-delimited three-column texts, with the third column optional. Let me use the tree below to illustrate the usage of the data: (chicken,((mouse,rat),(chimp,human))); Example Example 1 first column: the location the first column dictates where the data to be plotted. It usually contains the name of a leaf node, or two leaf names separated by a ','. chicken mouse,human second column: color to be applied chicken green mouse,human blue third column: optional commands to change the default behavior of current line By default, the color will only apply to the specified leaf label; for example: ## leaf background color mouse red By adding a third column, the default behavior can be changed. Here is a list of choices of this column: Option (case insensitive) Description ad apply color to the leaf labels of all descendants prefix apply color to all leaf labels that start with the string specified by the first column suffix apply color to all leaf labels that end with the string specified by the first column anywhere apply color to leaf labels that contain the string specified by the first column See examples below. Example Example 1, 'ad' ## leaf background color human,mouse lightblue ad Example Example 2, 'prefix': ## leaf background color mouse,human grey ad ch yellow prefix Example Example 3, 'suffix': ## leaf background color chicken,human grey ad n blue suffix Add leaf background color to a collapsed tree Evolview supports collapsing at internal nodes; collapsed nodes are treated as leaf nodes. It is therefore very straightforward to add leaf background color to a collapsed tree. See here for more information.","title":"Leaf background color"},{"location":"dataset/leafbkclr/#overview","text":"leafbackground colors will change the colors of leaf background. Similar to branch colors, multiple datasets can be uploaded to a tree, but only one can be shown at a time. Here is an example:","title":"Overview"},{"location":"dataset/leafbkclr/#related-modifiers","text":"Supported Key-Value pairs for leaf colors: Key (case insensitive) Value Description !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendStyle or !Style rect or circle or star shapes to be plotted before the legend texts; default = rect !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ; note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset","title":"Related modifiers"},{"location":"dataset/leafbkclr/#the-data","text":"Data are usually tab-delimited three-column texts, with the third column optional. Let me use the tree below to illustrate the usage of the data: (chicken,((mouse,rat),(chimp,human))); Example","title":"the data"},{"location":"dataset/leafbkclr/#example-1","text":"first column: the location the first column dictates where the data to be plotted. It usually contains the name of a leaf node, or two leaf names separated by a ','. chicken mouse,human second column: color to be applied chicken green mouse,human blue third column: optional commands to change the default behavior of current line By default, the color will only apply to the specified leaf label; for example: ## leaf background color mouse red By adding a third column, the default behavior can be changed. Here is a list of choices of this column: Option (case insensitive) Description ad apply color to the leaf labels of all descendants prefix apply color to all leaf labels that start with the string specified by the first column suffix apply color to all leaf labels that end with the string specified by the first column anywhere apply color to leaf labels that contain the string specified by the first column See examples below. Example","title":"Example 1"},{"location":"dataset/leafbkclr/#example-1-ad","text":"## leaf background color human,mouse lightblue ad Example","title":"Example 1, 'ad'"},{"location":"dataset/leafbkclr/#example-2-prefix","text":"## leaf background color mouse,human grey ad ch yellow prefix Example","title":"Example 2, 'prefix':"},{"location":"dataset/leafbkclr/#example-3-suffix","text":"## leaf background color chicken,human grey ad n blue suffix","title":"Example 3, 'suffix':"},{"location":"dataset/leafbkclr/#add-leaf-background-color-to-a-collapsed-tree","text":"Evolview supports collapsing at internal nodes; collapsed nodes are treated as leaf nodes. It is therefore very straightforward to add leaf background color to a collapsed tree. See here for more information.","title":"Add leaf background color to a collapsed tree"},{"location":"dataset/leafclr/","text":"Overview Leaf colors will change the colors of leaf labels. Similar to branch colors, multiple datasets can be uploaded to a tree, but only one can be shown at a time. Related modifiers (not all datasets support these modifiers) Supported Key-Value pairs for leaf colors: Key (case insensitive) Value Description !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendStyle or !Style rect or circle or star shapes to be plotted before the legend texts; default = rect !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ; note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset the data Data are usually tab-delimited three-column texts, with the third column optional. Let me use the tree below to illustrate the usage of the data: (chicken,((mouse,rat),(chimp,human))); Example Example 1 first column: the location the first column dictates where the data to be plotted. It usually contains the name of a leaf node, or two leaf names separated by a ','. chicken mouse,human second column: color to be applied For example: chicken green mouse,human blue third column: optional commands to change the default behavior of current line By default, the color will only apply to the specified leaf label; for example: ## leaf color human red By adding a third column, the default behavior can be changed. Here is a list of choices of this column: Option (case insensitive) Description ad apply color to all descendants prefix apply color to all branches connecting leaf nodes whose name starts with the string specified by the first column suffix apply color to all branches connecting leaf nodes whose name ends with the string specified by the first column anywhere apply color to all branches connecting leaf nodes whose name contains the string specified by the first column toroot apply color to all branches connecting the leaf node and parent nodes all the way to the root See examples below. Example Example 1, 'ad' ## leaf color human,mouse pink ad Example Example 2, 'prefix': ## leaf color ch yellow prefix Example Example 3, 'suffix': ## leaf color n blue suffix Example Example 3, 'anywhere': ## leaf color m purple anywhere Add leaf color to a collapsed tree Evolview supports collapsing at internal nodes; collapsed nodes are treated as leaf nodes. It is therefore very straightforward to add leaf color to a collapsed tree. See here for more information.","title":"Leaf color"},{"location":"dataset/leafclr/#overview","text":"Leaf colors will change the colors of leaf labels. Similar to branch colors, multiple datasets can be uploaded to a tree, but only one can be shown at a time.","title":"Overview"},{"location":"dataset/leafclr/#related-modifiers","text":"(not all datasets support these modifiers) Supported Key-Value pairs for leaf colors: Key (case insensitive) Value Description !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendStyle or !Style rect or circle or star shapes to be plotted before the legend texts; default = rect !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ; note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset","title":"Related modifiers"},{"location":"dataset/leafclr/#the-data","text":"Data are usually tab-delimited three-column texts, with the third column optional. Let me use the tree below to illustrate the usage of the data: (chicken,((mouse,rat),(chimp,human))); Example","title":"the data"},{"location":"dataset/leafclr/#example-1","text":"first column: the location the first column dictates where the data to be plotted. It usually contains the name of a leaf node, or two leaf names separated by a ','. chicken mouse,human second column: color to be applied For example: chicken green mouse,human blue third column: optional commands to change the default behavior of current line By default, the color will only apply to the specified leaf label; for example: ## leaf color human red By adding a third column, the default behavior can be changed. Here is a list of choices of this column: Option (case insensitive) Description ad apply color to all descendants prefix apply color to all branches connecting leaf nodes whose name starts with the string specified by the first column suffix apply color to all branches connecting leaf nodes whose name ends with the string specified by the first column anywhere apply color to all branches connecting leaf nodes whose name contains the string specified by the first column toroot apply color to all branches connecting the leaf node and parent nodes all the way to the root See examples below. Example","title":"Example 1"},{"location":"dataset/leafclr/#example-1-ad","text":"## leaf color human,mouse pink ad Example","title":"Example 1, 'ad'"},{"location":"dataset/leafclr/#example-2-prefix","text":"## leaf color ch yellow prefix Example","title":"Example 2, 'prefix':"},{"location":"dataset/leafclr/#example-3-suffix","text":"## leaf color n blue suffix Example","title":"Example 3, 'suffix':"},{"location":"dataset/leafclr/#example-3-anywhere","text":"## leaf color m purple anywhere","title":"Example 3, 'anywhere':"},{"location":"dataset/leafclr/#add-leaf-color-to-a-collapsed-tree","text":"Evolview supports collapsing at internal nodes; collapsed nodes are treated as leaf nodes. It is therefore very straightforward to add leaf color to a collapsed tree. See here for more information.","title":"Add leaf color to a collapsed tree"},{"location":"dataset/leaflabdeco/","text":"Overview Leaf decorations are colour objects / shapes to be shown between the leaf node labels and branches: Tree: (A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; the dataset: !defaultstrokewidth 0.7 A triangle,red:red B triangle,white:red C triangle,white:green D triangle,green:green A decoration shape can be written as : shape,fill_color[:stroke_color](_stroke_color) Tip Leaf label can have multiple decoration shapes, but only one decoration dataset can be shown at a time Leaf labels can have different numbers of colour shapes; see more examples bellow. Here is an annotated example of the dataset: Supported Shapes triangle circle rect star check Supported modifiers !defaultstrokewidth 0.7 Example Example 1 !defaultstrokewidth 0.7 A star,red B rect,red check,green C star,white:red triangle,white:green D circle,white:green Add leaf label decoration to collapsed trees Evolview supports collapsing at internal nodes; collapsed nodes are treated as leaf nodes. It is therefore very straightforward to add leaf label decorations to a collapsed tree. See here for more information.","title":"Leaf label Decoration"},{"location":"dataset/leaflabdeco/#overview","text":"Leaf decorations are colour objects / shapes to be shown between the leaf node labels and branches:","title":"Overview"},{"location":"dataset/leaflabdeco/#tree","text":"(A:0.1,(B:0.2,(C:0.3,D:0.4)100:0.05)100:0.1)90:0.43; the dataset: !defaultstrokewidth 0.7 A triangle,red:red B triangle,white:red C triangle,white:green D triangle,green:green A decoration shape can be written as : shape,fill_color[:stroke_color](_stroke_color) Tip Leaf label can have multiple decoration shapes, but only one decoration dataset can be shown at a time Leaf labels can have different numbers of colour shapes; see more examples bellow. Here is an annotated example of the dataset: Supported Shapes triangle circle rect star check","title":"Tree:"},{"location":"dataset/leaflabdeco/#supported-modifiers","text":"!defaultstrokewidth 0.7 Example","title":"Supported modifiers"},{"location":"dataset/leaflabdeco/#example-1","text":"!defaultstrokewidth 0.7 A star,red B rect,red check,green C star,white:red triangle,white:green D circle,white:green","title":"Example 1"},{"location":"dataset/leaflabdeco/#add-leaf-label-decoration-to-collapsed-trees","text":"Evolview supports collapsing at internal nodes; collapsed nodes are treated as leaf nodes. It is therefore very straightforward to add leaf label decorations to a collapsed tree. See here for more information.","title":"Add leaf label decoration to collapsed trees"},{"location":"dataset/piechart/","text":"Tip notes on preparing your dataset!! please always use TAB to separate the modifiers and their values. some modifiers should not be used in combination, e.g. !area and !radius are mutually exclusive. However if both are used (accidentally), only the last one will be used. if a modifier is used (accidentally) multiple tiles, only the last one will be used. the \"data\" part of this dataset can only contain two columns of tab-delimited texts; the third column, if presents, will be ignored Related modifiers (not all datasets support these modifiers) Key (case insensitive) Value Description !minradius any float number > 0 minimal pixel radius of the pies !maxradius any float number > 0 maximal pixel radius of the pies !area none use user inputs as the areas of the pie charts !radius none use user inputs as the radiuses of the pie charts Tree ((((((((((Saccharomyces_cerevisiae:0.054377,Saccharomyces_paradoxus:0.039196)Saccharomyces_subclade:0.035915,Saccharomyces_mikatae:0.082075)Saccharomyces_subclade:0.054132,Saccharomyces_bayanus:0.128022)Saccharomyces:0.485857,Candida_glabrata:0.874698)Saccharomycetaceae_subclade:0.060179,Naumovia_castellii:0.761269)Saccharomycetaceae_subclade:0.182516,(Lachancea_waltii:0.700985,(Kluyveromyces_lactis:0.770604,Agossypii:0.758273)Kluyveromyces:0.118441)Saccharomycetaceae_subclade:0.146942)Saccharomycetaceae:1.069627,(Debaryomyces_hansenii:0.591048,Candida_albicans:0.851762)Saccharomycetales_subclade:0.866539)Saccharomycetales_subclade:0.844816,Yarrowia_lipolytica:1.745091)Saccharomycetales:0.650477,(Emericella_nidulans:0.618015,(Magnaporthe_grisea:0.446021,(Neurospora_crassa:0.412753,Gibberella_zeae:0.414866)Sordariomycetes_subclade:0.071418)Sordariomycetes:0.318914)Pezizomycotina:0.873484)Ascomycota_subclade:0.955079,Schizosaccharomyces_pombe:0.952249); Example Example 1 ## for evolview; Yeast !Groups WGD,SSD !colors #9F0251,#4D8963 !legendstyle circle !title Duplication mechanism !opacity 0.8 Saccharomyces_cerevisiae,Saccharomyces_paradoxus 0,19 Saccharomyces_cerevisiae,Saccharomyces_mikatae 0,20 Saccharomyces_cerevisiae,Saccharomyces_bayanus 0,18 Saccharomyces_cerevisiae,Candida_glabrata 0,22 Saccharomyces_cerevisiae,Naumovia_castellii 862,0 Saccharomyces_cerevisiae,Lachancea_waltii 0,29 Saccharomyces_cerevisiae,Candida_albicans 0,53 Saccharomyces_cerevisiae,Yarrowia_lipolytica 0,26 Saccharomyces_cerevisiae,Neurospora_crassa 0,169 Tip an internal branch / node is identified by the names of two leaf nodes; the former is the last common ancestor of the latter the values of an internal branches are separated by \",\", e.g. 0,19 the number of values of all internal nodes should be the same (two in this dataset) the same number of colors should be provided by \"!colors\" (\"#9F0251,#4D8963\" in this case) and the same number of \"groups\" should also provided by \"!groups\" Example Example 2 # for evolview; Yeast ## created at may 25, 2011 !Groups WGD-O,WGD-N,SSD-O,SSD-N !colors #9F0251,#f88ef9,#effc00,#4D8963 !legendstyle circle !title overlap with other duplicates !opacity 0.8 Saccharomyces_cerevisiae,Saccharomyces_paradoxus 0,0,24,14 Saccharomyces_cerevisiae,Saccharomyces_mikatae 0,0,14,11 Saccharomyces_cerevisiae,Saccharomyces_bayanus 0,0,13,16 Saccharomyces_cerevisiae,Candida_glabrata 0,0,4,18 Saccharomyces_cerevisiae,Naumovia_castellii 77,792,0,0 Saccharomyces_cerevisiae,Lachancea_waltii 0,0,12,28 Saccharomyces_cerevisiae,Candida_albicans 0,0,18,42 Saccharomyces_cerevisiae,Yarrowia_lipolytica 0,0,11,16 Saccharomyces_cerevisiae,Neurospora_crassa 0,0,28,143 Show data values modifiers alternative value description show = 1 0 show or hide data values; optional; the data values will be shown if omitted fontsize=12 any integer set font size; optional; default = 10 fontcolor=red any valid HTML color name such as 'darkred' and hex color code such as '#FF0000' set text color; optional; default = black fontitalic=1 0 set font italic; optional; default = 0 Example Example 3 ## for evolview; Yeast ## created at may 25, 2011 !Groups WGD-O,WGD-N,SSD-O,SSD_N !colors #9F0251,#f88ef9,#effc00,#4D8963 !legendstyle rect !title overlap with WGDs !opacity 0.8 !showlegends 0 !showDataValue show=1,fontsize=12,fontcolor=darkblue,titalic=1 Saccharomyces_cerevisiae,Saccharomyces_paradoxus 0,0,11,27 Saccharomyces_cerevisiae,Saccharomyces_mikatae 0,0,0,25 Saccharomyces_cerevisiae,Saccharomyces_bayanus 0,0,4,25 Saccharomyces_cerevisiae,Candida_glabrata 0,0,2,20 Saccharomyces_cerevisiae,Naumovia_castellii 869,0,0,0 Saccharomyces_cerevisiae,Lachancea_waltii 0,0,0,40 Saccharomyces_cerevisiae,Candida_albicans 0,0,9,51 Saccharomyces_cerevisiae,Yarrowia_lipolytica 0,0,7,20 Saccharomyces_cerevisiae,Neurospora_crassa 0,0,20,151","title":"Pie chart"},{"location":"dataset/piechart/#related-modifiers","text":"(not all datasets support these modifiers) Key (case insensitive) Value Description !minradius any float number > 0 minimal pixel radius of the pies !maxradius any float number > 0 maximal pixel radius of the pies !area none use user inputs as the areas of the pie charts !radius none use user inputs as the radiuses of the pie charts","title":"Related modifiers"},{"location":"dataset/piechart/#tree","text":"((((((((((Saccharomyces_cerevisiae:0.054377,Saccharomyces_paradoxus:0.039196)Saccharomyces_subclade:0.035915,Saccharomyces_mikatae:0.082075)Saccharomyces_subclade:0.054132,Saccharomyces_bayanus:0.128022)Saccharomyces:0.485857,Candida_glabrata:0.874698)Saccharomycetaceae_subclade:0.060179,Naumovia_castellii:0.761269)Saccharomycetaceae_subclade:0.182516,(Lachancea_waltii:0.700985,(Kluyveromyces_lactis:0.770604,Agossypii:0.758273)Kluyveromyces:0.118441)Saccharomycetaceae_subclade:0.146942)Saccharomycetaceae:1.069627,(Debaryomyces_hansenii:0.591048,Candida_albicans:0.851762)Saccharomycetales_subclade:0.866539)Saccharomycetales_subclade:0.844816,Yarrowia_lipolytica:1.745091)Saccharomycetales:0.650477,(Emericella_nidulans:0.618015,(Magnaporthe_grisea:0.446021,(Neurospora_crassa:0.412753,Gibberella_zeae:0.414866)Sordariomycetes_subclade:0.071418)Sordariomycetes:0.318914)Pezizomycotina:0.873484)Ascomycota_subclade:0.955079,Schizosaccharomyces_pombe:0.952249); Example","title":"Tree"},{"location":"dataset/piechart/#example-1","text":"## for evolview; Yeast !Groups WGD,SSD !colors #9F0251,#4D8963 !legendstyle circle !title Duplication mechanism !opacity 0.8 Saccharomyces_cerevisiae,Saccharomyces_paradoxus 0,19 Saccharomyces_cerevisiae,Saccharomyces_mikatae 0,20 Saccharomyces_cerevisiae,Saccharomyces_bayanus 0,18 Saccharomyces_cerevisiae,Candida_glabrata 0,22 Saccharomyces_cerevisiae,Naumovia_castellii 862,0 Saccharomyces_cerevisiae,Lachancea_waltii 0,29 Saccharomyces_cerevisiae,Candida_albicans 0,53 Saccharomyces_cerevisiae,Yarrowia_lipolytica 0,26 Saccharomyces_cerevisiae,Neurospora_crassa 0,169 Tip an internal branch / node is identified by the names of two leaf nodes; the former is the last common ancestor of the latter the values of an internal branches are separated by \",\", e.g. 0,19 the number of values of all internal nodes should be the same (two in this dataset) the same number of colors should be provided by \"!colors\" (\"#9F0251,#4D8963\" in this case) and the same number of \"groups\" should also provided by \"!groups\" Example","title":"Example 1"},{"location":"dataset/piechart/#example-2","text":"# for evolview; Yeast ## created at may 25, 2011 !Groups WGD-O,WGD-N,SSD-O,SSD-N !colors #9F0251,#f88ef9,#effc00,#4D8963 !legendstyle circle !title overlap with other duplicates !opacity 0.8 Saccharomyces_cerevisiae,Saccharomyces_paradoxus 0,0,24,14 Saccharomyces_cerevisiae,Saccharomyces_mikatae 0,0,14,11 Saccharomyces_cerevisiae,Saccharomyces_bayanus 0,0,13,16 Saccharomyces_cerevisiae,Candida_glabrata 0,0,4,18 Saccharomyces_cerevisiae,Naumovia_castellii 77,792,0,0 Saccharomyces_cerevisiae,Lachancea_waltii 0,0,12,28 Saccharomyces_cerevisiae,Candida_albicans 0,0,18,42 Saccharomyces_cerevisiae,Yarrowia_lipolytica 0,0,11,16 Saccharomyces_cerevisiae,Neurospora_crassa 0,0,28,143","title":"Example 2"},{"location":"dataset/piechart/#show-data-values","text":"modifiers alternative value description show = 1 0 show or hide data values; optional; the data values will be shown if omitted fontsize=12 any integer set font size; optional; default = 10 fontcolor=red any valid HTML color name such as 'darkred' and hex color code such as '#FF0000' set text color; optional; default = black fontitalic=1 0 set font italic; optional; default = 0 Example","title":"Show data values"},{"location":"dataset/piechart/#example-3","text":"## for evolview; Yeast ## created at may 25, 2011 !Groups WGD-O,WGD-N,SSD-O,SSD_N !colors #9F0251,#f88ef9,#effc00,#4D8963 !legendstyle rect !title overlap with WGDs !opacity 0.8 !showlegends 0 !showDataValue show=1,fontsize=12,fontcolor=darkblue,titalic=1 Saccharomyces_cerevisiae,Saccharomyces_paradoxus 0,0,11,27 Saccharomyces_cerevisiae,Saccharomyces_mikatae 0,0,0,25 Saccharomyces_cerevisiae,Saccharomyces_bayanus 0,0,4,25 Saccharomyces_cerevisiae,Candida_glabrata 0,0,2,20 Saccharomyces_cerevisiae,Naumovia_castellii 869,0,0,0 Saccharomyces_cerevisiae,Lachancea_waltii 0,0,0,40 Saccharomyces_cerevisiae,Candida_albicans 0,0,9,51 Saccharomyces_cerevisiae,Yarrowia_lipolytica 0,0,7,20 Saccharomyces_cerevisiae,Neurospora_crassa 0,0,20,151","title":"Example 3"},{"location":"dataset/protdomain/","text":"Overview User can choose to either copy and paste the contents of the dataset by hand, upload from a text file, or retrieve automatically from public resources like PFAM. automatic retrieval of domain annotations from PFAM To retrieve domains automatically from PFAM, user can simply click the green button \"retrieve data from PFAM\" (see figure above). EvolView uses leaf names of current active tree to query PFAM database using the PFAM URL API. For example, if a leaf name is \"KLF9_HUMAN\", the URL to retrieve data will look like: http://pfam.xfam.org/protein/KLF9_HUMAN?output=xml The retrieved data is in XML format, as shown bellow: <xml version=\"1.0\" encoding=\"UTF-8\"> <!-- information on UniProt entry Q13886 (KLF9_HUMAN), generated: 12:24:51 15-May-2012 --> <pfam xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://pfam.sanger.ac.uk/\" xsi:schemaLocation=\"http://pfam.sanger.ac.uk/ http://pfam.sanger.ac.uk/static/documents/schemas/protein.xsd\" release=\"26.0\" release_date=\"2011-11-17\"> <entry entry_type=\"sequence\" db=\"uniprot\" db_release=\"2011_06\" accession=\"Q13886\" id=\"KLF9_HUMAN\"> <description> <![CDATA[ Krueppel-like factor 9 ]]> </description> <taxonomy tax_id=\"9606\" species_name=\"Homo sapiens (Human)\">Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia; Eutheria; Euarchontoglires; Primates; Haplorrhini; Catarrhini; Hominidae; Homo.</taxonomy> <sequence length=\"244\" md5=\"c97fb18568b42285ca3d528c6af3bd36\" crc64=\"2D1B5A5BB9D42221\" version=\"1\">MSAAAYMDFVAAQCLVSISNRAAVPEHGVAPDAERLRLPEREVTKEHGDPGDTWKDYCTLVTIAKSLLDLNKYRPIQTPSVCSDSLESPDEDMGSDSDVTTESGSSPSHSPEERQDPGSAPSPLSLLHPGVAAKGKHASEKRHKCPYSGCGKVYGKSSHLKAHYRVHTGERPFPCTWPDCLKKFSRSDELTRHYRTHTGEKQFRCPLCEKRFMRSDHLTKHARRHTEFHPSMIKRSKKALANAL</sequence> <matches> <match accession=\"PF13465\" id=\"zf-H2C2_2\" type=\"Pfam-A\"> <location start=\"189\" end=\"212\" ali_start=\"190\" ali_end=\"212\" hmm_start=\"2\" hmm_end=\"24\" evalue=\"5.4e-05\" bitscore=\"32.80\" /> </match> <match accession=\"PF13465\" id=\"zf-H2C2_2\" type=\"Pfam-A\"> <location start=\"159\" end=\"186\" ali_start=\"159\" ali_end=\"186\" hmm_start=\"1\" hmm_end=\"26\" evalue=\"0.0036\" bitscore=\"27.00\" /> </match> <match accession=\"PB021241\" id=\"Pfam-B_21241\" type=\"Pfam-B\"> <location start=\"1\" end=\"158\" /> </match> </matches> </entry> </pfam> EvolView will parse the retrieved data, and paste the results to the text box bellow the button. By default, several \"modifiers\" will be automatically generated and added to the beginning of the dataset (see the figure above). Tree ((((((((KLH20_XENLA:0.2153,((Q86BQ6_DROME:0.2096,Q7PXP7_ANOGA:0.1568)0.85:0.2135, ((Q6PFE1_MOUSE:0.1521,Q6PGA3_MOUSE:0.2172)0.76:0.07388,Q8CCY1_MOUSE:0.1753) 0.95:0.3455)0.91:0.3338)0.86:0.2197,((KLHL2_HUMAN:0.08975,(Q8N4I8_HUMAN:0, (Q18670_CAEEL:0.7637,KLH12_XENLA:0.2797)0.93:0.4654)0.88:0.1558)0.82:0.1293, (KELC_ANOST:0.1794,KELC_DROME:0.1742)0.9:0.2075)0.94:0.2985)0.29:0.04967, (((Q8AW66_DANRE:0.1259,KLHL6_MOUSE:0.4485)0.98:0.4727,(KBTBC_MOUSE:0.6317, (KBTB8_HUMAN:0.1993,Q8JU17_LSDV:1.141)0.9:0.5857)0:0)0.82:0.2108, ((((KEAP1_RAT:0.1349,Q8JIM0_DANRE:0.2407)0.95:0.4784,Q7KSF5_DROME:0.5027) 0:0.06034,GAN_MOUSE:0.8177)0.73:0.1347,(((KLH38_MOUSE:0.668, ((Q7SYC4_DANRE:0.3353,Q6NRT8_XENLA:0.2334)0.88:0.275,KLH29_MOUSE:0.5729) 0:0.03749)0.81:0.1223,((((O61795_CAEEL:0.6747,(((Q9Q8G2_9POXV:0.6023, Q8V3G0_SWPV:0.6185)0.72:0.4076,Q9DHH3_YLDV:0.3759)0:0.1171,KBTB1_CWPXG:0.8456) 0.98:1.164)0:0.0495,(Q9W6R2_TAKRU:0.2735,Q9W6R3_TAKRU:0.6931)0.84:0.2291)0:0, (Q7Q1T2_ANOGA:0.5814,Q7ZVF7_DANRE:1.067)0.014:0.1921)0.81:0.1635, ((Q6P4N4_XENTR:0.1512,Q7SYD2_DANRE:0.4405)0.8:0.1838,KBTBA_HUMAN:0.02277) 1:0.5769)0.57:0.0335)0.27:0.06992,Q6GKZ1_DROME:0.7147)0.85:0.1895)0:0.00953) 0.65:0.08898)0.72:0.1007,(Q7QHD7_ANOGA:0.3004,Q9VGE5_DROME:0.3033)0.95:0.262)0:0, (((((ENC2_MOUSE:0.3014,(ENC2_XENLA:0.05783,((Q6TEQ2_DANRE:0.09609, Q6GNW3_XENLA:0.2931)0.86:0.1782,ENC1_HUMAN:0.2725)0.95:0.3066)0.8:0.1403) 0.98:0.551,Q6IR89_XENLA:0.415)0.75:0.07768,KBTB3_HUMAN:1.07)0.67:0.1062, KLH28_MOUSE:0.9934)0.61:0.08269,(KLH17_MOUSE:0.4396,(Q6IQ87_DANRE:0.1242, KLH18_HUMAN:0.08026)0.79:0.1194)0.73:0.1527)0.86:0.1814)0.73:0.04515, (Q8IQ29_DROME:1.127,KLH23_MOUSE:0.7506)0.83:0.6781)0.81:0.1032, ((O18147_CAEEL:0.4752,(Q6GNZ5_XENLA:0.1637,IPP_MOUSE:0.1366)0.93:0.3711) 0.81:0.1438,KLHL8_MOUSE:0.6621)0:0)0.83:0.2138,(Q6DJ21_XENTR:0.5388, (((Q9VK21_DROME:0.2861,Q7PMB5_ANOGA:0.3132)0.95:0.4708,((((Q8IH95_DROME:1.015, Q9W4S3_DROME:1.086)0.66:0.1906,Q9W4L5_DROME:0.4058)0.91:0.7326, ((((Q9W2S3_DROME:0.2141,O16313_CAEEL:0.8251)0.3:0.1505,(Q8C2V5_MOUSE:0.3688, Q6GML3_DANRE:0.2594)0.94:0.3389)0:0.04204,Q7QI84_ANOGA:0.3114)0.88:0.4656, (BTBDH_MOUSE:0.1753,BTBDH_XENLA:0.1789)0.96:0.803)0.84:0.4615)0.6:0.1801, ((O72746_COWPX:1.098,(Q8JTN6_LSDV:0.1404,Q8JTM8_LSDV:1.095)0.82:0.7468) 0.84:0.6953,P87597_COWPX:1.193)0.69:0.3544)0.79:0.2198)0.63:0.08743, ((((KLH21_DANRE:0.1926,KLH21_HUMAN:0.5162)0.59:0.2868,(KLH31_MOUSE:0.2558, KLH31_DANRE:0.04945)0.96:0.5586)0.76:0.2286,KLH30_XENLA:1.462)0.099:0.209, (Q6DE07_XENLA:0.4094,(KLH26_MOUSE:0.5299,KLH36_HUMAN:1.102)0:0.09303)0.93:0.4958) 0.12:0.124)0.77:0.173)0.83:0.00212); Second, go to the \"Annotation upload\" tab, click the \"protein domain\" icon, and then click the \"retrieve data from PFAM\" icon in the dialogbox. User will get a busy message during the data retrieval. Last, click the \"Submit\" button if there is no error, the domains will be plotted next to the tree (only partial plot is shown): Write domain annotations by hand A typical domain annotation for a protein looks like the following: KLF9_HUMAN 244 189,212,zf-H2C2_2,Pfam-A,,,PF13465,5.4e-05,32.80 159,186,zf-H2C2_2,Pfam-A,,,PF13465,0.0036,27.00 The first two columns are protein name and protein length, respectively. The third and four columns are two domains for this protein. More columns can be appended to the end of the same line. Columns are separated by a single 'tab' symbol , so that user can prepare the annotation using any standard spreadsheet program (for example Office Excel, iWorks Numbers and LibreOffice Calc). Typically a domain-architecture column contains the following nine fields separated by \",\"s: in which the first two are mandatory; the rest can be left blank if not available. For example, the following domain annotations are all valid: 159,186 159,186,WD40 159,186,WD40,Pfam-A 159,186,,Pfam-A 159,186,zf-H2C2_2,Pfam-A,,,PF13465 159,186,zf-H2C2_2,Pfam-A,,,,0.0036,27.00 159,186,zf-H2C2_2,Pfam-A,,,PF13465,0.0036,27.00 Related modifiers Key (case insensitive) Value Description universal modifiers !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ;note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset none pie chart modifiers modifiers that apply to all charts except pies !PlotWidth integer > 0 pixel width of the dataset on canvas !itemHeightPX or !barHeightPX or !PlotHeight (deprecated) or !Height (deprecated) integer > 0 pixel height of each bar; similar to bar chart !itemHeightPCT or !barHeightPCT float number between 1 to 100 percentage of available height taken by each bar; similar to bar chart !grid none show a background grid !gridlabel or !axis none show the values (protein length) corresponding to the grid lines unique modifiers modifiers unique to this annotation !shadow or !showShadow 0 or 1 1: show drop shadow under non-PFAM-B domains; WARNING: if shadow is on, exporting to graphical formats other than SVG is NOT functional!! Tip notes on preparing your datasets!! please always use TAB to separate the modifiers and their values. please also always use TAB to separate the columns in the data section.","title":"Protein domains"},{"location":"dataset/protdomain/#overview","text":"User can choose to either copy and paste the contents of the dataset by hand, upload from a text file, or retrieve automatically from public resources like PFAM.","title":"Overview"},{"location":"dataset/protdomain/#automatic-retrieval-of-domain-annotations-from-pfam","text":"To retrieve domains automatically from PFAM, user can simply click the green button \"retrieve data from PFAM\" (see figure above). EvolView uses leaf names of current active tree to query PFAM database using the PFAM URL API. For example, if a leaf name is \"KLF9_HUMAN\", the URL to retrieve data will look like: http://pfam.xfam.org/protein/KLF9_HUMAN?output=xml The retrieved data is in XML format, as shown bellow: <xml version=\"1.0\" encoding=\"UTF-8\"> <!-- information on UniProt entry Q13886 (KLF9_HUMAN), generated: 12:24:51 15-May-2012 --> <pfam xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://pfam.sanger.ac.uk/\" xsi:schemaLocation=\"http://pfam.sanger.ac.uk/ http://pfam.sanger.ac.uk/static/documents/schemas/protein.xsd\" release=\"26.0\" release_date=\"2011-11-17\"> <entry entry_type=\"sequence\" db=\"uniprot\" db_release=\"2011_06\" accession=\"Q13886\" id=\"KLF9_HUMAN\"> <description> <![CDATA[ Krueppel-like factor 9 ]]> </description> <taxonomy tax_id=\"9606\" species_name=\"Homo sapiens (Human)\">Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia; Eutheria; Euarchontoglires; Primates; Haplorrhini; Catarrhini; Hominidae; Homo.</taxonomy> <sequence length=\"244\" md5=\"c97fb18568b42285ca3d528c6af3bd36\" crc64=\"2D1B5A5BB9D42221\" version=\"1\">MSAAAYMDFVAAQCLVSISNRAAVPEHGVAPDAERLRLPEREVTKEHGDPGDTWKDYCTLVTIAKSLLDLNKYRPIQTPSVCSDSLESPDEDMGSDSDVTTESGSSPSHSPEERQDPGSAPSPLSLLHPGVAAKGKHASEKRHKCPYSGCGKVYGKSSHLKAHYRVHTGERPFPCTWPDCLKKFSRSDELTRHYRTHTGEKQFRCPLCEKRFMRSDHLTKHARRHTEFHPSMIKRSKKALANAL</sequence> <matches> <match accession=\"PF13465\" id=\"zf-H2C2_2\" type=\"Pfam-A\"> <location start=\"189\" end=\"212\" ali_start=\"190\" ali_end=\"212\" hmm_start=\"2\" hmm_end=\"24\" evalue=\"5.4e-05\" bitscore=\"32.80\" /> </match> <match accession=\"PF13465\" id=\"zf-H2C2_2\" type=\"Pfam-A\"> <location start=\"159\" end=\"186\" ali_start=\"159\" ali_end=\"186\" hmm_start=\"1\" hmm_end=\"26\" evalue=\"0.0036\" bitscore=\"27.00\" /> </match> <match accession=\"PB021241\" id=\"Pfam-B_21241\" type=\"Pfam-B\"> <location start=\"1\" end=\"158\" /> </match> </matches> </entry> </pfam> EvolView will parse the retrieved data, and paste the results to the text box bellow the button. By default, several \"modifiers\" will be automatically generated and added to the beginning of the dataset (see the figure above).","title":"automatic retrieval of domain annotations from PFAM"},{"location":"dataset/protdomain/#tree","text":"((((((((KLH20_XENLA:0.2153,((Q86BQ6_DROME:0.2096,Q7PXP7_ANOGA:0.1568)0.85:0.2135, ((Q6PFE1_MOUSE:0.1521,Q6PGA3_MOUSE:0.2172)0.76:0.07388,Q8CCY1_MOUSE:0.1753) 0.95:0.3455)0.91:0.3338)0.86:0.2197,((KLHL2_HUMAN:0.08975,(Q8N4I8_HUMAN:0, (Q18670_CAEEL:0.7637,KLH12_XENLA:0.2797)0.93:0.4654)0.88:0.1558)0.82:0.1293, (KELC_ANOST:0.1794,KELC_DROME:0.1742)0.9:0.2075)0.94:0.2985)0.29:0.04967, (((Q8AW66_DANRE:0.1259,KLHL6_MOUSE:0.4485)0.98:0.4727,(KBTBC_MOUSE:0.6317, (KBTB8_HUMAN:0.1993,Q8JU17_LSDV:1.141)0.9:0.5857)0:0)0.82:0.2108, ((((KEAP1_RAT:0.1349,Q8JIM0_DANRE:0.2407)0.95:0.4784,Q7KSF5_DROME:0.5027) 0:0.06034,GAN_MOUSE:0.8177)0.73:0.1347,(((KLH38_MOUSE:0.668, ((Q7SYC4_DANRE:0.3353,Q6NRT8_XENLA:0.2334)0.88:0.275,KLH29_MOUSE:0.5729) 0:0.03749)0.81:0.1223,((((O61795_CAEEL:0.6747,(((Q9Q8G2_9POXV:0.6023, Q8V3G0_SWPV:0.6185)0.72:0.4076,Q9DHH3_YLDV:0.3759)0:0.1171,KBTB1_CWPXG:0.8456) 0.98:1.164)0:0.0495,(Q9W6R2_TAKRU:0.2735,Q9W6R3_TAKRU:0.6931)0.84:0.2291)0:0, (Q7Q1T2_ANOGA:0.5814,Q7ZVF7_DANRE:1.067)0.014:0.1921)0.81:0.1635, ((Q6P4N4_XENTR:0.1512,Q7SYD2_DANRE:0.4405)0.8:0.1838,KBTBA_HUMAN:0.02277) 1:0.5769)0.57:0.0335)0.27:0.06992,Q6GKZ1_DROME:0.7147)0.85:0.1895)0:0.00953) 0.65:0.08898)0.72:0.1007,(Q7QHD7_ANOGA:0.3004,Q9VGE5_DROME:0.3033)0.95:0.262)0:0, (((((ENC2_MOUSE:0.3014,(ENC2_XENLA:0.05783,((Q6TEQ2_DANRE:0.09609, Q6GNW3_XENLA:0.2931)0.86:0.1782,ENC1_HUMAN:0.2725)0.95:0.3066)0.8:0.1403) 0.98:0.551,Q6IR89_XENLA:0.415)0.75:0.07768,KBTB3_HUMAN:1.07)0.67:0.1062, KLH28_MOUSE:0.9934)0.61:0.08269,(KLH17_MOUSE:0.4396,(Q6IQ87_DANRE:0.1242, KLH18_HUMAN:0.08026)0.79:0.1194)0.73:0.1527)0.86:0.1814)0.73:0.04515, (Q8IQ29_DROME:1.127,KLH23_MOUSE:0.7506)0.83:0.6781)0.81:0.1032, ((O18147_CAEEL:0.4752,(Q6GNZ5_XENLA:0.1637,IPP_MOUSE:0.1366)0.93:0.3711) 0.81:0.1438,KLHL8_MOUSE:0.6621)0:0)0.83:0.2138,(Q6DJ21_XENTR:0.5388, (((Q9VK21_DROME:0.2861,Q7PMB5_ANOGA:0.3132)0.95:0.4708,((((Q8IH95_DROME:1.015, Q9W4S3_DROME:1.086)0.66:0.1906,Q9W4L5_DROME:0.4058)0.91:0.7326, ((((Q9W2S3_DROME:0.2141,O16313_CAEEL:0.8251)0.3:0.1505,(Q8C2V5_MOUSE:0.3688, Q6GML3_DANRE:0.2594)0.94:0.3389)0:0.04204,Q7QI84_ANOGA:0.3114)0.88:0.4656, (BTBDH_MOUSE:0.1753,BTBDH_XENLA:0.1789)0.96:0.803)0.84:0.4615)0.6:0.1801, ((O72746_COWPX:1.098,(Q8JTN6_LSDV:0.1404,Q8JTM8_LSDV:1.095)0.82:0.7468) 0.84:0.6953,P87597_COWPX:1.193)0.69:0.3544)0.79:0.2198)0.63:0.08743, ((((KLH21_DANRE:0.1926,KLH21_HUMAN:0.5162)0.59:0.2868,(KLH31_MOUSE:0.2558, KLH31_DANRE:0.04945)0.96:0.5586)0.76:0.2286,KLH30_XENLA:1.462)0.099:0.209, (Q6DE07_XENLA:0.4094,(KLH26_MOUSE:0.5299,KLH36_HUMAN:1.102)0:0.09303)0.93:0.4958) 0.12:0.124)0.77:0.173)0.83:0.00212); Second, go to the \"Annotation upload\" tab, click the \"protein domain\" icon, and then click the \"retrieve data from PFAM\" icon in the dialogbox. User will get a busy message during the data retrieval. Last, click the \"Submit\" button if there is no error, the domains will be plotted next to the tree (only partial plot is shown):","title":"Tree"},{"location":"dataset/protdomain/#write-domain-annotations-by-hand","text":"A typical domain annotation for a protein looks like the following: KLF9_HUMAN 244 189,212,zf-H2C2_2,Pfam-A,,,PF13465,5.4e-05,32.80 159,186,zf-H2C2_2,Pfam-A,,,PF13465,0.0036,27.00 The first two columns are protein name and protein length, respectively. The third and four columns are two domains for this protein. More columns can be appended to the end of the same line. Columns are separated by a single 'tab' symbol , so that user can prepare the annotation using any standard spreadsheet program (for example Office Excel, iWorks Numbers and LibreOffice Calc). Typically a domain-architecture column contains the following nine fields separated by \",\"s: in which the first two are mandatory; the rest can be left blank if not available. For example, the following domain annotations are all valid: 159,186 159,186,WD40 159,186,WD40,Pfam-A 159,186,,Pfam-A 159,186,zf-H2C2_2,Pfam-A,,,PF13465 159,186,zf-H2C2_2,Pfam-A,,,,0.0036,27.00 159,186,zf-H2C2_2,Pfam-A,,,PF13465,0.0036,27.00","title":"Write domain annotations by hand"},{"location":"dataset/protdomain/#related-modifiers","text":"Key (case insensitive) Value Description universal modifiers !Groups or !LegendText comma separated text Legend texts; for example 'group_a,group_b,group_c' !LegendColors or !Colors comma separated color codes or names colors to be applied to the shapes specified by LegendStyle; for example 'red,green,yellow' ;note the number of colors should match the number of legend fields !Title or !Legend text title of the legend; default = name of the dataset !ShowLegends 0 or 1 0 : hide legends; 1 : show legends !opacity float number between 0 to 1 opacity of the dataset none pie chart modifiers modifiers that apply to all charts except pies !PlotWidth integer > 0 pixel width of the dataset on canvas !itemHeightPX or !barHeightPX or !PlotHeight (deprecated) or !Height (deprecated) integer > 0 pixel height of each bar; similar to bar chart !itemHeightPCT or !barHeightPCT float number between 1 to 100 percentage of available height taken by each bar; similar to bar chart !grid none show a background grid !gridlabel or !axis none show the values (protein length) corresponding to the grid lines unique modifiers modifiers unique to this annotation !shadow or !showShadow 0 or 1 1: show drop shadow under non-PFAM-B domains; WARNING: if shadow is on, exporting to graphical formats other than SVG is NOT functional!! Tip notes on preparing your datasets!! please always use TAB to separate the modifiers and their values. please also always use TAB to separate the columns in the data section.","title":"Related modifiers"},{"location":"dataset/stroke/","text":"Tree (A:0.1,B:0.2,(C:0.3,D:0.4)100:0.5)90:0.43; Related modifiers (not all datasets support these modifiers) !defaultStrokeWidth By default, a stroke width of '1' (one pixel) will be used; this can be changed by using a modifier: !defaultStrokeWidth stroke_width_value always separate the key and attributes with a single TAB character this value will be applied to all shapes. !defaultStrokeColor A default colour can also be specified by the following modifier: !defaultStrokeColor valid_stroke_color and it will be applied to shapes without user-supplied stroke colours. Example Example 1 ##color strips !defaultstrokewidth 1 !type rect,star,triangle,rect !showlegends 0 A white:grey,white:blue B white:red C white:grey D white:red In EvolView, the colur attribute of an object can be written as: fill_color[:stroke_color](_stroke_color) When the stroke_color is omitted, no stroke will be drawn. Example Example 2 ##color strips !defaultstrokewidth 2 !defaultstrokecolor gold !type rect,circle,star,triangle !showlegends 1 A red,green,blue:red B purple,darkred,lightgreen C lightblue D darkgreen,grey,pink Tip The colorstroke propery can also be used in other plots too. you can check these examples: barplot example 1, barplot example 2","title":"Stroke color and width"},{"location":"dataset/stroke/#tree","text":"(A:0.1,B:0.2,(C:0.3,D:0.4)100:0.5)90:0.43;","title":"Tree"},{"location":"dataset/stroke/#related-modifiers","text":"(not all datasets support these modifiers)","title":"Related modifiers"},{"location":"dataset/stroke/#defaultstrokewidth","text":"By default, a stroke width of '1' (one pixel) will be used; this can be changed by using a modifier: !defaultStrokeWidth stroke_width_value always separate the key and attributes with a single TAB character this value will be applied to all shapes.","title":"!defaultStrokeWidth"},{"location":"dataset/stroke/#defaultstrokecolor","text":"A default colour can also be specified by the following modifier: !defaultStrokeColor valid_stroke_color and it will be applied to shapes without user-supplied stroke colours. Example","title":"!defaultStrokeColor"},{"location":"dataset/stroke/#example-1","text":"##color strips !defaultstrokewidth 1 !type rect,star,triangle,rect !showlegends 0 A white:grey,white:blue B white:red C white:grey D white:red In EvolView, the colur attribute of an object can be written as: fill_color[:stroke_color](_stroke_color) When the stroke_color is omitted, no stroke will be drawn. Example","title":"Example 1"},{"location":"dataset/stroke/#example-2","text":"##color strips !defaultstrokewidth 2 !defaultstrokecolor gold !type rect,circle,star,triangle !showlegends 1 A red,green,blue:red B purple,darkred,lightgreen C lightblue D darkgreen,grey,pink Tip The colorstroke propery can also be used in other plots too. you can check these examples: barplot example 1, barplot example 2","title":"Example 2"},{"location":"dataset/timeline/","text":"Overview note: * please consult the tree 'TimeLines' in the DEMOS project to see TimeLine plots in action First, let's see some examples. Tree: (a,(d,(b:0.2,c:0.3):0.4):0.3); Example dataset: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=Top, Ticks=20,10,5, TickLabelStyle=10,grey,0,0, Grid=0 ... another example dataset .... !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineStrips op=1, Strips=-11.67,11.67,35,58.33,81.67, StripColors=#F4F5F6,#E8E9EA, StripLabels=now,25,50,70,100, StripLabelStyle=12,#77787B,0,0, StripLabelPos=bottom, StripMarginPx=3 the '!TimeLine' modifier The '!TimeLine' modifier is mandatory for all the following three types of timeline plots, the value of this modifier can be any combination of the following, separated by a \",\": The following 'modifiers' (Key-Value pairs) are supported for heatmap: (case insensitive) Alternative value Mandatory Description totaltime=70 any float number > 0 Y Total time from the root to the most distant leaf TimeUnit=Millions of Years any string N Time unit Note please note: TimeLine plot supports multi-line key-value pairs, i.e. the modifier and its value can be split into multiple line, as long as they are written in the correct format; see examples above. notes on preparing your datasets!! please always use TAB to separate the modifiers and their values. if a modifier is used (accidentally) multiple tiles, only the last one will be used. the \"data\" part of this dataset can only contain two columns of tab-delimited texts; the third column, if presents, will be ignored please also always use TAB to separate the columns in the data section. the '!timeLineAxis' modifier (Axis plot) This modifier defines an axis and related parameters; the value of this modifier can be any combination of the following, separated by a \",\": (case insensitive) Alternative value Mandatory Description pos=Top Bottom N position (above or at the bottom of the tree) at which the axis will be plotted; default=top Ticks=10,5,1 any float numbers Y positions at which the 'major', 'minor' and 'other' ticks will be plotted; ticks=10 means a major tick will be plotted every 10 TimeUnit; ticks=10,5 means in addition to major ticks, a minor tick will be plotted every 5 TimeUnit; see examples below for details TickLabels=A,B,C any strings or numbers N customized labels for major ticks; by default, the tick labels are their corresponding values; see examples below TickColors=red,blue,green any valid HTML color names or hex colors N colors to be applied to ticks; if only one color is set (e.g. TickColors=red), the specified color will be applied to the major ticks; if two colors are set (e.g. TickColors=red,blue), they will be applied to the major and minor ticks respectively; see below for examples TickLabelStyle=10,grey,1,0 here '10'==font size, 'grey'==font color, '1'==font italic, '0'==font bold N styles of tick labels Grid=0 1 N if ==1, plot grid lines at major and minor ticks; see examples below Examples Example Example 1 Axis on top: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis # axis position Pos=Top, Ticks=20,10,5, TickLabelStyle=10,grey,0,0, Grid=0 Example Example 2 Axis at bottom: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis # axis position 'bottom' Pos=bottom, Ticks=20,10,5, TickLabelStyle=10,grey,0,0, Grid=0 Example Example 3 major tick only: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=top, # major tick only Ticks=20, TickLabelStyle=10,grey,0,0, Grid=0 Example Example 4 major and minor ticks: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=top, # major and minor ticks Ticks=20,10, TickLabelStyle=10,grey,0,0, Grid=0 Example Example 5 major, minor and other ticks: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=top, # major, minor and other ticks Ticks=20,10,5, TickLabelStyle=10,grey,0,0, Grid=0 Example Example 6 customized tick label: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=top, Ticks=20,10,5, TickLabelStyle=10,grey,0,0, # customized tick labels TickLabels=A,B,C,D,E, Grid=0 Example Example 7 customized tick colors: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=top, Ticks=20,10,5, TickLabelStyle=10,grey,0,0, TickLabels=A,B,C,D,E, # customized tick colors TickColors=red,blue,green, Grid=0 Example Example 8 tick label styles: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=top, Ticks=20,10,5, ## tick label styles TickLabelStyle=12,darkred,1,0, TickLabels=A,B,C,D,E, TickColors=red,blue,green, Grid=0 Example Example 9 Eshow grid lines: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=top, Ticks=20,10,5, TickLabelStyle=12,darkred,1,0, TickLabels=A,B,C,D,E, TickColors=red,blue,green, ## show grid line Grid=1 the '!timeLineLines' modifier (Line plot) This modifier defines a set of time points at which lines will be plotted; this modifier can also be used to annotate these lines and control the visualisation styles of the lines. The value of this modifier can be any combination of the following, separated by a \",\": (case insensitive) Alternative value Mandatory Description op=0.9 any float number between 0~1 N opacity of the lines; default = 1 lines=0,10,25,33,56 any float numbers separated by ',' Y time points at which lines will be plotted; LineWidths=1,2 any float number or numbers N line widths; default = 1; if the number of widths is less than the number of lines, these widths will be cycled. LineLabels=Label1,B,Label2 any strings or numbers, separated by ',' N text labels for lines; see examples below LineColors=red,blue,green any valid HTML color names or hex colors N colors to be applied to lines; if the number of colors is less than the number of lines, these colors will be cycled; default == black LineLabelStyles=10,grey,1,0 here '10'==font size, 'grey'==font color, '1'==font italic, '0'==font bold N styles of line labels LineLabelPos=Top Bottom N position (above or at the bottom of the tree) at which the line labels will be plotted; default=top Examples Example Example 1 a timeline line plot will all available parameters: ## note: in any timeline plot, the !TimeLine modifier is always mandatory -- !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineLines op=0.9, Lines=4,25,56,70, LineStyles=solid,dashed, lineWidths=1,2,4, lineColors=pink,blue,darkred, LineLabels=A,B,C, LineLabelStyle=12,black,1,1, lineLabelPos=bottom Example Example 2 some simple lines: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineLines Lines=4,25,56,70 Example Example 3 with line styles ('solid' and 'dashed'): !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineLines op=0.9, Lines=4,25,56,70, # line styles LineStyles=solid,dashed Example Example 4 with line widths: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineLines op=0.9, Lines=4,25,56,70, LineStyles=solid,dashed, lineWidths=1,2,4 Example Example 5 Eline colors: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineLines op=0.9, Lines=4,25,56,70, LineStyles=solid,dashed, lineWidths=1,2,4, lineColors=pink,blue,darkred Example Example 6 line labels: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineLines op=0.9, Lines=4,25,56,70, LineStyles=solid,dashed, lineWidths=1,2,4, lineColors=pink,blue,darkred, LineLabels=A,B,C Example Example 7 Eline label styles: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineLines op=0.9, Lines=4,25,56,70, LineStyles=solid,dashed, lineWidths=1,2,4, lineColors=pink,blue,darkred, LineLabels=A,B,C, LineLabelStyle=12,black,1,1 the !TimeLineStrips modifier (Strip plot) This modifier defines a set of color strips to be plotted behind the trees; users will be allowed to annotate the strips and control their visualisation styles. The value of this modifier can be any combination of the following, separated by a \",\": (case insensitive) Alternative value Mandatory Description op=0.9 any float number between 0~1 N opacity of the strips (does not apply to the labels); default = 1 strips=0,10,25,33,56 any float numbers separated by ',' Y time points for strips; note: '0,10' defines a strip between 0~10; '0,10,25' defines two strips, 0~10 and 10~25; '0,10,25,33' defines three strips; StripColors=red,blue,green any valid HTML color names or hex colors, separated by ',' N fill-colors for the strips; if the number of colors is less than the number of strips, these colors will be cycled; default == black StripLabels=Label1,B,Label2 any strings or numbers, separated by ',' N text labels for strips; see examples below StripLabelStyle=10,grey,1,0 here '10'==font size, 'grey'==font color, '1'==font italic, '0'==font bold N styles of the text labels StripLabelPos=Top Bottom N position (above or at the bottom of the tree) at which the text labels will be plotted; default=top StripMaginPx=3 any float number N margin size for the strips in pixel ShowTimeUnit=1 0 N show or hide time unit; see examples below Example Example 1 a single strip: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis ticks=20,10,5,Pos=top !TimeLineStrips Strips=10,20, StripColors=#E8E9EA, StripLabels=some years ago, StripLabelPos=bottom, ShowTimeUnit=0 ... in circular mode: Example Example 2 two strips (actually there are three strips, but the 2nd one is 'white'): !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis ticks=20,10,5,Pos=top !TimeLineStrips Strips=10,20,50,65, StripColors=#E8E9EA,white,#F5F5DC, StripLabels=time A,,time B, StripLabelPos=bottom, ShowTimeUnit=0","title":"Timeline"},{"location":"dataset/timeline/#overview","text":"note: * please consult the tree 'TimeLines' in the DEMOS project to see TimeLine plots in action First, let's see some examples.","title":"Overview"},{"location":"dataset/timeline/#tree","text":"(a,(d,(b:0.2,c:0.3):0.4):0.3);","title":"Tree:"},{"location":"dataset/timeline/#example-dataset","text":"!TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=Top, Ticks=20,10,5, TickLabelStyle=10,grey,0,0, Grid=0 ... another example dataset .... !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineStrips op=1, Strips=-11.67,11.67,35,58.33,81.67, StripColors=#F4F5F6,#E8E9EA, StripLabels=now,25,50,70,100, StripLabelStyle=12,#77787B,0,0, StripLabelPos=bottom, StripMarginPx=3","title":"Example dataset:"},{"location":"dataset/timeline/#the-timeline-modifier","text":"The '!TimeLine' modifier is mandatory for all the following three types of timeline plots, the value of this modifier can be any combination of the following, separated by a \",\": The following 'modifiers' (Key-Value pairs) are supported for heatmap: (case insensitive) Alternative value Mandatory Description totaltime=70 any float number > 0 Y Total time from the root to the most distant leaf TimeUnit=Millions of Years any string N Time unit Note please note: TimeLine plot supports multi-line key-value pairs, i.e. the modifier and its value can be split into multiple line, as long as they are written in the correct format; see examples above. notes on preparing your datasets!! please always use TAB to separate the modifiers and their values. if a modifier is used (accidentally) multiple tiles, only the last one will be used. the \"data\" part of this dataset can only contain two columns of tab-delimited texts; the third column, if presents, will be ignored please also always use TAB to separate the columns in the data section.","title":"the '!TimeLine' modifier"},{"location":"dataset/timeline/#the-timelineaxis-modifier-axis-plot","text":"This modifier defines an axis and related parameters; the value of this modifier can be any combination of the following, separated by a \",\": (case insensitive) Alternative value Mandatory Description pos=Top Bottom N position (above or at the bottom of the tree) at which the axis will be plotted; default=top Ticks=10,5,1 any float numbers Y positions at which the 'major', 'minor' and 'other' ticks will be plotted; ticks=10 means a major tick will be plotted every 10 TimeUnit; ticks=10,5 means in addition to major ticks, a minor tick will be plotted every 5 TimeUnit; see examples below for details TickLabels=A,B,C any strings or numbers N customized labels for major ticks; by default, the tick labels are their corresponding values; see examples below TickColors=red,blue,green any valid HTML color names or hex colors N colors to be applied to ticks; if only one color is set (e.g. TickColors=red), the specified color will be applied to the major ticks; if two colors are set (e.g. TickColors=red,blue), they will be applied to the major and minor ticks respectively; see below for examples TickLabelStyle=10,grey,1,0 here '10'==font size, 'grey'==font color, '1'==font italic, '0'==font bold N styles of tick labels Grid=0 1 N if ==1, plot grid lines at major and minor ticks; see examples below","title":"the '!timeLineAxis' modifier  (Axis plot)"},{"location":"dataset/timeline/#examples","text":"Example","title":"Examples"},{"location":"dataset/timeline/#example-1","text":"Axis on top: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis # axis position Pos=Top, Ticks=20,10,5, TickLabelStyle=10,grey,0,0, Grid=0 Example","title":"Example 1"},{"location":"dataset/timeline/#example-2","text":"Axis at bottom: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis # axis position 'bottom' Pos=bottom, Ticks=20,10,5, TickLabelStyle=10,grey,0,0, Grid=0 Example","title":"Example 2"},{"location":"dataset/timeline/#example-3","text":"major tick only: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=top, # major tick only Ticks=20, TickLabelStyle=10,grey,0,0, Grid=0 Example","title":"Example 3"},{"location":"dataset/timeline/#example-4","text":"major and minor ticks: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=top, # major and minor ticks Ticks=20,10, TickLabelStyle=10,grey,0,0, Grid=0 Example","title":"Example 4"},{"location":"dataset/timeline/#example-5","text":"major, minor and other ticks: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=top, # major, minor and other ticks Ticks=20,10,5, TickLabelStyle=10,grey,0,0, Grid=0 Example","title":"Example 5"},{"location":"dataset/timeline/#example-6","text":"customized tick label: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=top, Ticks=20,10,5, TickLabelStyle=10,grey,0,0, # customized tick labels TickLabels=A,B,C,D,E, Grid=0 Example","title":"Example 6"},{"location":"dataset/timeline/#example-7","text":"customized tick colors: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=top, Ticks=20,10,5, TickLabelStyle=10,grey,0,0, TickLabels=A,B,C,D,E, # customized tick colors TickColors=red,blue,green, Grid=0 Example","title":"Example 7"},{"location":"dataset/timeline/#example-8","text":"tick label styles: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=top, Ticks=20,10,5, ## tick label styles TickLabelStyle=12,darkred,1,0, TickLabels=A,B,C,D,E, TickColors=red,blue,green, Grid=0 Example","title":"Example 8"},{"location":"dataset/timeline/#example-9","text":"Eshow grid lines: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis Pos=top, Ticks=20,10,5, TickLabelStyle=12,darkred,1,0, TickLabels=A,B,C,D,E, TickColors=red,blue,green, ## show grid line Grid=1","title":"Example 9"},{"location":"dataset/timeline/#the-timelinelines-modifier-line-plot","text":"This modifier defines a set of time points at which lines will be plotted; this modifier can also be used to annotate these lines and control the visualisation styles of the lines. The value of this modifier can be any combination of the following, separated by a \",\": (case insensitive) Alternative value Mandatory Description op=0.9 any float number between 0~1 N opacity of the lines; default = 1 lines=0,10,25,33,56 any float numbers separated by ',' Y time points at which lines will be plotted; LineWidths=1,2 any float number or numbers N line widths; default = 1; if the number of widths is less than the number of lines, these widths will be cycled. LineLabels=Label1,B,Label2 any strings or numbers, separated by ',' N text labels for lines; see examples below LineColors=red,blue,green any valid HTML color names or hex colors N colors to be applied to lines; if the number of colors is less than the number of lines, these colors will be cycled; default == black LineLabelStyles=10,grey,1,0 here '10'==font size, 'grey'==font color, '1'==font italic, '0'==font bold N styles of line labels LineLabelPos=Top Bottom N position (above or at the bottom of the tree) at which the line labels will be plotted; default=top","title":"the '!timeLineLines' modifier  (Line plot)"},{"location":"dataset/timeline/#examples_1","text":"Example","title":"Examples"},{"location":"dataset/timeline/#example-1_1","text":"a timeline line plot will all available parameters: ## note: in any timeline plot, the !TimeLine modifier is always mandatory -- !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineLines op=0.9, Lines=4,25,56,70, LineStyles=solid,dashed, lineWidths=1,2,4, lineColors=pink,blue,darkred, LineLabels=A,B,C, LineLabelStyle=12,black,1,1, lineLabelPos=bottom Example","title":"Example 1"},{"location":"dataset/timeline/#example-2_1","text":"some simple lines: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineLines Lines=4,25,56,70 Example","title":"Example 2"},{"location":"dataset/timeline/#example-3_1","text":"with line styles ('solid' and 'dashed'): !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineLines op=0.9, Lines=4,25,56,70, # line styles LineStyles=solid,dashed Example","title":"Example 3"},{"location":"dataset/timeline/#example-4_1","text":"with line widths: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineLines op=0.9, Lines=4,25,56,70, LineStyles=solid,dashed, lineWidths=1,2,4 Example","title":"Example 4"},{"location":"dataset/timeline/#example-5_1","text":"Eline colors: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineLines op=0.9, Lines=4,25,56,70, LineStyles=solid,dashed, lineWidths=1,2,4, lineColors=pink,blue,darkred Example","title":"Example 5"},{"location":"dataset/timeline/#example-6_1","text":"line labels: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineLines op=0.9, Lines=4,25,56,70, LineStyles=solid,dashed, lineWidths=1,2,4, lineColors=pink,blue,darkred, LineLabels=A,B,C Example","title":"Example 6"},{"location":"dataset/timeline/#example-7_1","text":"Eline label styles: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineLines op=0.9, Lines=4,25,56,70, LineStyles=solid,dashed, lineWidths=1,2,4, lineColors=pink,blue,darkred, LineLabels=A,B,C, LineLabelStyle=12,black,1,1","title":"Example 7"},{"location":"dataset/timeline/#the-timelinestrips-modifier-strip-plot","text":"This modifier defines a set of color strips to be plotted behind the trees; users will be allowed to annotate the strips and control their visualisation styles. The value of this modifier can be any combination of the following, separated by a \",\": (case insensitive) Alternative value Mandatory Description op=0.9 any float number between 0~1 N opacity of the strips (does not apply to the labels); default = 1 strips=0,10,25,33,56 any float numbers separated by ',' Y time points for strips; note: '0,10' defines a strip between 0~10; '0,10,25' defines two strips, 0~10 and 10~25; '0,10,25,33' defines three strips; StripColors=red,blue,green any valid HTML color names or hex colors, separated by ',' N fill-colors for the strips; if the number of colors is less than the number of strips, these colors will be cycled; default == black StripLabels=Label1,B,Label2 any strings or numbers, separated by ',' N text labels for strips; see examples below StripLabelStyle=10,grey,1,0 here '10'==font size, 'grey'==font color, '1'==font italic, '0'==font bold N styles of the text labels StripLabelPos=Top Bottom N position (above or at the bottom of the tree) at which the text labels will be plotted; default=top StripMaginPx=3 any float number N margin size for the strips in pixel ShowTimeUnit=1 0 N show or hide time unit; see examples below Example","title":"the !TimeLineStrips modifier (Strip plot)"},{"location":"dataset/timeline/#example-1_2","text":"a single strip: !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis ticks=20,10,5,Pos=top !TimeLineStrips Strips=10,20, StripColors=#E8E9EA, StripLabels=some years ago, StripLabelPos=bottom, ShowTimeUnit=0 ... in circular mode: Example","title":"Example 1"},{"location":"dataset/timeline/#example-2_2","text":"two strips (actually there are three strips, but the 2nd one is 'white'): !TimeLine TotalTime=70,TimeUnit=Millions of Years !TimeLineAxis ticks=20,10,5,Pos=top !TimeLineStrips Strips=10,20,50,65, StripColors=#E8E9EA,white,#F5F5DC, StripLabels=time A,,time B, StripLabelPos=bottom, ShowTimeUnit=0","title":"Example 2"}]}